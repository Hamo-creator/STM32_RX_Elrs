
STM32_RX_Elrs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005568  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005700  08005700  00006700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005720  08005720  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005720  08005720  00006720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005728  08005728  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005728  08005728  00006728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800572c  0800572c  0000672c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005730  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a0  2000000c  0800573c  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ac  0800573c  000074ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ee4  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b5e  00000000  00000000  00017f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed0  00000000  00000000  0001aa80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b8d  00000000  00000000  0001b950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001879e  00000000  00000000  0001c4dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013048  00000000  00000000  00034c7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a9a4  00000000  00000000  00047cc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e2667  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cf8  00000000  00000000  000e26ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  000e63a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080056e8 	.word	0x080056e8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080056e8 	.word	0x080056e8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800050a:	463b      	mov	r3, r7
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]
 8000514:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000516:	4b21      	ldr	r3, [pc, #132]	@ (800059c <MX_ADC1_Init+0x98>)
 8000518:	4a21      	ldr	r2, [pc, #132]	@ (80005a0 <MX_ADC1_Init+0x9c>)
 800051a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800051c:	4b1f      	ldr	r3, [pc, #124]	@ (800059c <MX_ADC1_Init+0x98>)
 800051e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000522:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000524:	4b1d      	ldr	r3, [pc, #116]	@ (800059c <MX_ADC1_Init+0x98>)
 8000526:	2200      	movs	r2, #0
 8000528:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800052a:	4b1c      	ldr	r3, [pc, #112]	@ (800059c <MX_ADC1_Init+0x98>)
 800052c:	2201      	movs	r2, #1
 800052e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000530:	4b1a      	ldr	r3, [pc, #104]	@ (800059c <MX_ADC1_Init+0x98>)
 8000532:	2201      	movs	r2, #1
 8000534:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000536:	4b19      	ldr	r3, [pc, #100]	@ (800059c <MX_ADC1_Init+0x98>)
 8000538:	2200      	movs	r2, #0
 800053a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800053e:	4b17      	ldr	r3, [pc, #92]	@ (800059c <MX_ADC1_Init+0x98>)
 8000540:	2200      	movs	r2, #0
 8000542:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000544:	4b15      	ldr	r3, [pc, #84]	@ (800059c <MX_ADC1_Init+0x98>)
 8000546:	4a17      	ldr	r2, [pc, #92]	@ (80005a4 <MX_ADC1_Init+0xa0>)
 8000548:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800054a:	4b14      	ldr	r3, [pc, #80]	@ (800059c <MX_ADC1_Init+0x98>)
 800054c:	2200      	movs	r2, #0
 800054e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000550:	4b12      	ldr	r3, [pc, #72]	@ (800059c <MX_ADC1_Init+0x98>)
 8000552:	2201      	movs	r2, #1
 8000554:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000556:	4b11      	ldr	r3, [pc, #68]	@ (800059c <MX_ADC1_Init+0x98>)
 8000558:	2200      	movs	r2, #0
 800055a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800055e:	4b0f      	ldr	r3, [pc, #60]	@ (800059c <MX_ADC1_Init+0x98>)
 8000560:	2201      	movs	r2, #1
 8000562:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000564:	480d      	ldr	r0, [pc, #52]	@ (800059c <MX_ADC1_Init+0x98>)
 8000566:	f001 fa39 	bl	80019dc <HAL_ADC_Init>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000570:	f000 fda8 	bl	80010c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000574:	2300      	movs	r3, #0
 8000576:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000578:	2301      	movs	r3, #1
 800057a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800057c:	2306      	movs	r3, #6
 800057e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000580:	463b      	mov	r3, r7
 8000582:	4619      	mov	r1, r3
 8000584:	4805      	ldr	r0, [pc, #20]	@ (800059c <MX_ADC1_Init+0x98>)
 8000586:	f001 fbed 	bl	8001d64 <HAL_ADC_ConfigChannel>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000590:	f000 fd98 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000594:	bf00      	nop
 8000596:	3710      	adds	r7, #16
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000028 	.word	0x20000028
 80005a0:	40012000 	.word	0x40012000
 80005a4:	0f000001 	.word	0x0f000001

080005a8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08a      	sub	sp, #40	@ 0x28
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a17      	ldr	r2, [pc, #92]	@ (8000624 <HAL_ADC_MspInit+0x7c>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d127      	bne.n	800061a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	613b      	str	r3, [r7, #16]
 80005ce:	4b16      	ldr	r3, [pc, #88]	@ (8000628 <HAL_ADC_MspInit+0x80>)
 80005d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005d2:	4a15      	ldr	r2, [pc, #84]	@ (8000628 <HAL_ADC_MspInit+0x80>)
 80005d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80005da:	4b13      	ldr	r3, [pc, #76]	@ (8000628 <HAL_ADC_MspInit+0x80>)
 80005dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80005e2:	613b      	str	r3, [r7, #16]
 80005e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000628 <HAL_ADC_MspInit+0x80>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ee:	4a0e      	ldr	r2, [pc, #56]	@ (8000628 <HAL_ADC_MspInit+0x80>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000628 <HAL_ADC_MspInit+0x80>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = APIN_VBAT_Pin;
 8000602:	2301      	movs	r3, #1
 8000604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000606:	2303      	movs	r3, #3
 8000608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060a:	2300      	movs	r3, #0
 800060c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(APIN_VBAT_GPIO_Port, &GPIO_InitStruct);
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	4619      	mov	r1, r3
 8000614:	4805      	ldr	r0, [pc, #20]	@ (800062c <HAL_ADC_MspInit+0x84>)
 8000616:	f002 fae7 	bl	8002be8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800061a:	bf00      	nop
 800061c:	3728      	adds	r7, #40	@ 0x28
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40012000 	.word	0x40012000
 8000628:	40023800 	.word	0x40023800
 800062c:	40020000 	.word	0x40020000

08000630 <crc8_dvb_s2>:
    }
    return crc;
}

uint8_t crc8_dvb_s2(const uint8_t *data, uint8_t len)
{
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	460b      	mov	r3, r1
 800063a:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < len; i++) {
 8000640:	2300      	movs	r3, #0
 8000642:	73bb      	strb	r3, [r7, #14]
 8000644:	e024      	b.n	8000690 <crc8_dvb_s2+0x60>
        crc ^= data[i];
 8000646:	7bbb      	ldrb	r3, [r7, #14]
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	4413      	add	r3, r2
 800064c:	781a      	ldrb	r2, [r3, #0]
 800064e:	7bfb      	ldrb	r3, [r7, #15]
 8000650:	4053      	eors	r3, r2
 8000652:	73fb      	strb	r3, [r7, #15]
        for (int j = 0; j < 8; j++)
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	e014      	b.n	8000684 <crc8_dvb_s2+0x54>
            crc = (crc & 0x80) ? (crc << 1) ^ 0xD5 : (crc << 1);
 800065a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800065e:	2b00      	cmp	r3, #0
 8000660:	da09      	bge.n	8000676 <crc8_dvb_s2+0x46>
 8000662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000666:	005b      	lsls	r3, r3, #1
 8000668:	b25b      	sxtb	r3, r3
 800066a:	f083 032a 	eor.w	r3, r3, #42	@ 0x2a
 800066e:	43db      	mvns	r3, r3
 8000670:	b25b      	sxtb	r3, r3
 8000672:	b2db      	uxtb	r3, r3
 8000674:	e002      	b.n	800067c <crc8_dvb_s2+0x4c>
 8000676:	7bfb      	ldrb	r3, [r7, #15]
 8000678:	005b      	lsls	r3, r3, #1
 800067a:	b2db      	uxtb	r3, r3
 800067c:	73fb      	strb	r3, [r7, #15]
        for (int j = 0; j < 8; j++)
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	3301      	adds	r3, #1
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	2b07      	cmp	r3, #7
 8000688:	dde7      	ble.n	800065a <crc8_dvb_s2+0x2a>
    for (uint8_t i = 0; i < len; i++) {
 800068a:	7bbb      	ldrb	r3, [r7, #14]
 800068c:	3301      	adds	r3, #1
 800068e:	73bb      	strb	r3, [r7, #14]
 8000690:	7bba      	ldrb	r2, [r7, #14]
 8000692:	78fb      	ldrb	r3, [r7, #3]
 8000694:	429a      	cmp	r2, r3
 8000696:	d3d6      	bcc.n	8000646 <crc8_dvb_s2+0x16>
    }
    return crc;
 8000698:	7bfb      	ldrb	r3, [r7, #15]
}
 800069a:	4618      	mov	r0, r3
 800069c:	3714      	adds	r7, #20
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr

080006a6 <CrsfSerial_Init>:
#include <string.h>

uint8_t uartRxBuf[UART_RX_BUFFER_SIZE];
uint16_t oldPos = 0;

void CrsfSerial_Init(CrsfSerial_HandleTypeDef *hcrsf, UART_HandleTypeDef *huart, uint32_t baud) {
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b084      	sub	sp, #16
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	60f8      	str	r0, [r7, #12]
 80006ae:	60b9      	str	r1, [r7, #8]
 80006b0:	607a      	str	r2, [r7, #4]
    hcrsf->huart = huart;
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	68ba      	ldr	r2, [r7, #8]
 80006b6:	601a      	str	r2, [r3, #0]
    hcrsf->baud = baud;
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	687a      	ldr	r2, [r7, #4]
 80006bc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
    hcrsf->rxBufPos = 0;
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	2200      	movs	r2, #0
 80006c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    hcrsf->lastReceive = 0;
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	2200      	movs	r2, #0
 80006cc:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
    hcrsf->lastChannelsPacket = 0;
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	2200      	movs	r2, #0
 80006d4:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
    hcrsf->linkIsUp = false;
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	2200      	movs	r2, #0
 80006dc:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c
    hcrsf->passthroughBaud = 0;
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	2200      	movs	r2, #0
 80006e4:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170

    memset(hcrsf->rxBuf, 0, sizeof(hcrsf->rxBuf));
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	3304      	adds	r3, #4
 80006ec:	2240      	movs	r2, #64	@ 0x40
 80006ee:	2100      	movs	r1, #0
 80006f0:	4618      	mov	r0, r3
 80006f2:	f004 ffbf 	bl	8005674 <memset>
    memset(hcrsf->channels, 0, sizeof(hcrsf->channels));
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 80006fc:	2240      	movs	r2, #64	@ 0x40
 80006fe:	2100      	movs	r1, #0
 8000700:	4618      	mov	r0, r3
 8000702:	f004 ffb7 	bl	8005674 <memset>

    hcrsf->onLinkDown = NULL;
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	2200      	movs	r2, #0
 800070a:	f8c3 21b8 	str.w	r2, [r3, #440]	@ 0x1b8
    hcrsf->onLinkUp = NULL;
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	2200      	movs	r2, #0
 8000712:	f8c3 21b4 	str.w	r2, [r3, #436]	@ 0x1b4
    hcrsf->onOobData = NULL;
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	2200      	movs	r2, #0
 800071a:	f8c3 21bc 	str.w	r2, [r3, #444]	@ 0x1bc
    hcrsf->onPacketChannels = NULL;
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	2200      	movs	r2, #0
 8000722:	f8c3 21c0 	str.w	r2, [r3, #448]	@ 0x1c0
    hcrsf->onPacketLinkStatistics = NULL;
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	2200      	movs	r2, #0
 800072a:	f8c3 21c4 	str.w	r2, [r3, #452]	@ 0x1c4
    hcrsf->onPacketGps = NULL;
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	2200      	movs	r2, #0
 8000732:	f8c3 21c8 	str.w	r2, [r3, #456]	@ 0x1c8
}
 8000736:	bf00      	nop
 8000738:	3710      	adds	r7, #16
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <CrsfSerial_Begin>:

void CrsfSerial_Begin(CrsfSerial_HandleTypeDef *hcrsf, uint32_t baud) {
 800073e:	b480      	push	{r7}
 8000740:	b083      	sub	sp, #12
 8000742:	af00      	add	r7, sp, #0
 8000744:	6078      	str	r0, [r7, #4]
 8000746:	6039      	str	r1, [r7, #0]
    hcrsf->baud = baud ? baud : hcrsf->baud;
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d103      	bne.n	8000756 <CrsfSerial_Begin+0x18>
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8000754:	e000      	b.n	8000758 <CrsfSerial_Begin+0x1a>
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
    // HAL_UART_Init must be called elsewhere with correct parameters
}
 800075e:	bf00      	nop
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr

0800076a <ShiftBuffer>:

static void ShiftBuffer(CrsfSerial_HandleTypeDef *hcrsf, uint8_t cnt) {
 800076a:	b580      	push	{r7, lr}
 800076c:	b082      	sub	sp, #8
 800076e:	af00      	add	r7, sp, #0
 8000770:	6078      	str	r0, [r7, #4]
 8000772:	460b      	mov	r3, r1
 8000774:	70fb      	strb	r3, [r7, #3]
    if (cnt >= hcrsf->rxBufPos) {
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800077c:	78fa      	ldrb	r2, [r7, #3]
 800077e:	429a      	cmp	r2, r3
 8000780:	d304      	bcc.n	800078c <ShiftBuffer+0x22>
        hcrsf->rxBufPos = 0;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	2200      	movs	r2, #0
 8000786:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        return;
 800078a:	e017      	b.n	80007bc <ShiftBuffer+0x52>
    }
    memmove(hcrsf->rxBuf, hcrsf->rxBuf + cnt, hcrsf->rxBufPos - cnt);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	1d18      	adds	r0, r3, #4
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	1d1a      	adds	r2, r3, #4
 8000794:	78fb      	ldrb	r3, [r7, #3]
 8000796:	18d1      	adds	r1, r2, r3
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800079e:	461a      	mov	r2, r3
 80007a0:	78fb      	ldrb	r3, [r7, #3]
 80007a2:	1ad3      	subs	r3, r2, r3
 80007a4:	461a      	mov	r2, r3
 80007a6:	f004 ff4b 	bl	8005640 <memmove>
    hcrsf->rxBufPos -= cnt;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80007b0:	78fb      	ldrb	r3, [r7, #3]
 80007b2:	1ad3      	subs	r3, r2, r3
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
}
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <CrsfSerial_UnpackChannels>:
//            bitsAvailable -= 11;
//        }
//    }
//}

static void CrsfSerial_UnpackChannels(CrsfSerial_HandleTypeDef *hcrsf, const uint8_t *payload) {
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b08c      	sub	sp, #48	@ 0x30
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
 80007ca:	6039      	str	r1, [r7, #0]
    uint16_t temp[CRSF_NUM_CHANNELS] = {0};
 80007cc:	f107 030c 	add.w	r3, r7, #12
 80007d0:	2220      	movs	r2, #32
 80007d2:	2100      	movs	r1, #0
 80007d4:	4618      	mov	r0, r3
 80007d6:	f004 ff4d 	bl	8005674 <memset>
    temp[0]  = ((payload[0]  >> 0) | (payload[1] << 8)) & 0x07FF;
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	b21a      	sxth	r2, r3
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	3301      	adds	r3, #1
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	b21b      	sxth	r3, r3
 80007e8:	021b      	lsls	r3, r3, #8
 80007ea:	b21b      	sxth	r3, r3
 80007ec:	4313      	orrs	r3, r2
 80007ee:	b21b      	sxth	r3, r3
 80007f0:	b29b      	uxth	r3, r3
 80007f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80007f6:	b29b      	uxth	r3, r3
 80007f8:	81bb      	strh	r3, [r7, #12]
    temp[1]  = ((payload[1]  >> 3) | (payload[2] << 5)) & 0x07FF;
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	3301      	adds	r3, #1
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	08db      	lsrs	r3, r3, #3
 8000802:	b2db      	uxtb	r3, r3
 8000804:	b21a      	sxth	r2, r3
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	3302      	adds	r3, #2
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	b21b      	sxth	r3, r3
 800080e:	015b      	lsls	r3, r3, #5
 8000810:	b21b      	sxth	r3, r3
 8000812:	4313      	orrs	r3, r2
 8000814:	b21b      	sxth	r3, r3
 8000816:	b29b      	uxth	r3, r3
 8000818:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800081c:	b29b      	uxth	r3, r3
 800081e:	81fb      	strh	r3, [r7, #14]
    temp[2]  = ((payload[2]  >> 6) | (payload[3] << 2) | (payload[4] << 10)) & 0x07FF;
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	3302      	adds	r3, #2
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	099b      	lsrs	r3, r3, #6
 8000828:	b2db      	uxtb	r3, r3
 800082a:	b21a      	sxth	r2, r3
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	3303      	adds	r3, #3
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	b21b      	sxth	r3, r3
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	b21b      	sxth	r3, r3
 8000838:	4313      	orrs	r3, r2
 800083a:	b21a      	sxth	r2, r3
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	3304      	adds	r3, #4
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	b21b      	sxth	r3, r3
 8000844:	029b      	lsls	r3, r3, #10
 8000846:	b21b      	sxth	r3, r3
 8000848:	4313      	orrs	r3, r2
 800084a:	b21b      	sxth	r3, r3
 800084c:	b29b      	uxth	r3, r3
 800084e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000852:	b29b      	uxth	r3, r3
 8000854:	823b      	strh	r3, [r7, #16]
    temp[3]  = ((payload[4]  >> 1) | (payload[5] << 7)) & 0x07FF;
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	3304      	adds	r3, #4
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	b2db      	uxtb	r3, r3
 8000860:	b21a      	sxth	r2, r3
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	3305      	adds	r3, #5
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	b21b      	sxth	r3, r3
 800086a:	01db      	lsls	r3, r3, #7
 800086c:	b21b      	sxth	r3, r3
 800086e:	4313      	orrs	r3, r2
 8000870:	b21b      	sxth	r3, r3
 8000872:	b29b      	uxth	r3, r3
 8000874:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000878:	b29b      	uxth	r3, r3
 800087a:	827b      	strh	r3, [r7, #18]
    temp[4]  = ((payload[5]  >> 4) | (payload[6] << 4)) & 0x07FF;
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	3305      	adds	r3, #5
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	091b      	lsrs	r3, r3, #4
 8000884:	b2db      	uxtb	r3, r3
 8000886:	b21a      	sxth	r2, r3
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	3306      	adds	r3, #6
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	b21b      	sxth	r3, r3
 8000890:	011b      	lsls	r3, r3, #4
 8000892:	b21b      	sxth	r3, r3
 8000894:	4313      	orrs	r3, r2
 8000896:	b21b      	sxth	r3, r3
 8000898:	b29b      	uxth	r3, r3
 800089a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800089e:	b29b      	uxth	r3, r3
 80008a0:	82bb      	strh	r3, [r7, #20]
    temp[5]  = ((payload[6]  >> 7) | (payload[7] << 1) | (payload[8] << 9)) & 0x07FF;
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	3306      	adds	r3, #6
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	09db      	lsrs	r3, r3, #7
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	b21a      	sxth	r2, r3
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	3307      	adds	r3, #7
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	b21b      	sxth	r3, r3
 80008b6:	005b      	lsls	r3, r3, #1
 80008b8:	b21b      	sxth	r3, r3
 80008ba:	4313      	orrs	r3, r2
 80008bc:	b21a      	sxth	r2, r3
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	3308      	adds	r3, #8
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	b21b      	sxth	r3, r3
 80008c6:	025b      	lsls	r3, r3, #9
 80008c8:	b21b      	sxth	r3, r3
 80008ca:	4313      	orrs	r3, r2
 80008cc:	b21b      	sxth	r3, r3
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80008d4:	b29b      	uxth	r3, r3
 80008d6:	82fb      	strh	r3, [r7, #22]
    temp[6]  = ((payload[8]  >> 2) | (payload[9] << 6)) & 0x07FF;
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	3308      	adds	r3, #8
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	089b      	lsrs	r3, r3, #2
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	b21a      	sxth	r2, r3
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	3309      	adds	r3, #9
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	b21b      	sxth	r3, r3
 80008ec:	019b      	lsls	r3, r3, #6
 80008ee:	b21b      	sxth	r3, r3
 80008f0:	4313      	orrs	r3, r2
 80008f2:	b21b      	sxth	r3, r3
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80008fa:	b29b      	uxth	r3, r3
 80008fc:	833b      	strh	r3, [r7, #24]
    temp[7]  = ((payload[9]  >> 5) | (payload[10] << 3)) & 0x07FF;
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	3309      	adds	r3, #9
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	095b      	lsrs	r3, r3, #5
 8000906:	b2db      	uxtb	r3, r3
 8000908:	b21a      	sxth	r2, r3
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	330a      	adds	r3, #10
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	b21b      	sxth	r3, r3
 8000912:	00db      	lsls	r3, r3, #3
 8000914:	b21b      	sxth	r3, r3
 8000916:	4313      	orrs	r3, r2
 8000918:	b21b      	sxth	r3, r3
 800091a:	b29b      	uxth	r3, r3
 800091c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000920:	b29b      	uxth	r3, r3
 8000922:	837b      	strh	r3, [r7, #26]
    temp[8]  = ((payload[11] >> 0) | (payload[12] << 8)) & 0x07FF;
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	330b      	adds	r3, #11
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	b21a      	sxth	r2, r3
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	330c      	adds	r3, #12
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	b21b      	sxth	r3, r3
 8000934:	021b      	lsls	r3, r3, #8
 8000936:	b21b      	sxth	r3, r3
 8000938:	4313      	orrs	r3, r2
 800093a:	b21b      	sxth	r3, r3
 800093c:	b29b      	uxth	r3, r3
 800093e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000942:	b29b      	uxth	r3, r3
 8000944:	83bb      	strh	r3, [r7, #28]
    temp[9]  = ((payload[12] >> 3) | (payload[13] << 5)) & 0x07FF;
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	330c      	adds	r3, #12
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	08db      	lsrs	r3, r3, #3
 800094e:	b2db      	uxtb	r3, r3
 8000950:	b21a      	sxth	r2, r3
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	330d      	adds	r3, #13
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	b21b      	sxth	r3, r3
 800095a:	015b      	lsls	r3, r3, #5
 800095c:	b21b      	sxth	r3, r3
 800095e:	4313      	orrs	r3, r2
 8000960:	b21b      	sxth	r3, r3
 8000962:	b29b      	uxth	r3, r3
 8000964:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000968:	b29b      	uxth	r3, r3
 800096a:	83fb      	strh	r3, [r7, #30]
    temp[10] = ((payload[13] >> 6) | (payload[14] << 2) | (payload[15] << 10)) & 0x07FF;
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	330d      	adds	r3, #13
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	099b      	lsrs	r3, r3, #6
 8000974:	b2db      	uxtb	r3, r3
 8000976:	b21a      	sxth	r2, r3
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	330e      	adds	r3, #14
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	b21b      	sxth	r3, r3
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	b21b      	sxth	r3, r3
 8000984:	4313      	orrs	r3, r2
 8000986:	b21a      	sxth	r2, r3
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	330f      	adds	r3, #15
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	b21b      	sxth	r3, r3
 8000990:	029b      	lsls	r3, r3, #10
 8000992:	b21b      	sxth	r3, r3
 8000994:	4313      	orrs	r3, r2
 8000996:	b21b      	sxth	r3, r3
 8000998:	b29b      	uxth	r3, r3
 800099a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800099e:	b29b      	uxth	r3, r3
 80009a0:	843b      	strh	r3, [r7, #32]
    temp[11] = ((payload[15] >> 1) | (payload[16] << 7)) & 0x07FF;
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	330f      	adds	r3, #15
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	085b      	lsrs	r3, r3, #1
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	b21a      	sxth	r2, r3
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	3310      	adds	r3, #16
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	b21b      	sxth	r3, r3
 80009b6:	01db      	lsls	r3, r3, #7
 80009b8:	b21b      	sxth	r3, r3
 80009ba:	4313      	orrs	r3, r2
 80009bc:	b21b      	sxth	r3, r3
 80009be:	b29b      	uxth	r3, r3
 80009c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	847b      	strh	r3, [r7, #34]	@ 0x22
    temp[12] = ((payload[16] >> 4) | (payload[17] << 4)) & 0x07FF;
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	3310      	adds	r3, #16
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	091b      	lsrs	r3, r3, #4
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	b21a      	sxth	r2, r3
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	3311      	adds	r3, #17
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	b21b      	sxth	r3, r3
 80009dc:	011b      	lsls	r3, r3, #4
 80009de:	b21b      	sxth	r3, r3
 80009e0:	4313      	orrs	r3, r2
 80009e2:	b21b      	sxth	r3, r3
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	84bb      	strh	r3, [r7, #36]	@ 0x24
    temp[13] = ((payload[17] >> 7) | (payload[18] << 1) | (payload[19] << 9)) & 0x07FF;
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	3311      	adds	r3, #17
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	09db      	lsrs	r3, r3, #7
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	b21a      	sxth	r2, r3
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	3312      	adds	r3, #18
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	b21b      	sxth	r3, r3
 8000a02:	005b      	lsls	r3, r3, #1
 8000a04:	b21b      	sxth	r3, r3
 8000a06:	4313      	orrs	r3, r2
 8000a08:	b21a      	sxth	r2, r3
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	3313      	adds	r3, #19
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	b21b      	sxth	r3, r3
 8000a12:	025b      	lsls	r3, r3, #9
 8000a14:	b21b      	sxth	r3, r3
 8000a16:	4313      	orrs	r3, r2
 8000a18:	b21b      	sxth	r3, r3
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	84fb      	strh	r3, [r7, #38]	@ 0x26
    temp[14] = ((payload[19] >> 2) | (payload[20] << 6)) & 0x07FF;
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	3313      	adds	r3, #19
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	089b      	lsrs	r3, r3, #2
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	b21a      	sxth	r2, r3
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	3314      	adds	r3, #20
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	b21b      	sxth	r3, r3
 8000a38:	019b      	lsls	r3, r3, #6
 8000a3a:	b21b      	sxth	r3, r3
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	b21b      	sxth	r3, r3
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000a46:	b29b      	uxth	r3, r3
 8000a48:	853b      	strh	r3, [r7, #40]	@ 0x28
    temp[15] = ((payload[20] >> 5) | (payload[21] << 3)) & 0x07FF;
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	3314      	adds	r3, #20
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	095b      	lsrs	r3, r3, #5
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	b21a      	sxth	r2, r3
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	3315      	adds	r3, #21
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	b21b      	sxth	r3, r3
 8000a5e:	00db      	lsls	r3, r3, #3
 8000a60:	b21b      	sxth	r3, r3
 8000a62:	4313      	orrs	r3, r2
 8000a64:	b21b      	sxth	r3, r3
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000a6c:	b29b      	uxth	r3, r3
 8000a6e:	857b      	strh	r3, [r7, #42]	@ 0x2a

    for (int i = 0; i < CRSF_NUM_CHANNELS; i++) {
 8000a70:	2300      	movs	r3, #0
 8000a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000a74:	e00f      	b.n	8000a96 <CrsfSerial_UnpackChannels+0x2d4>
        hcrsf->channels[i] = temp[i];
 8000a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	3330      	adds	r3, #48	@ 0x30
 8000a7c:	443b      	add	r3, r7
 8000a7e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8000a82:	4619      	mov	r1, r3
 8000a84:	687a      	ldr	r2, [r7, #4]
 8000a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a88:	335c      	adds	r3, #92	@ 0x5c
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	4413      	add	r3, r2
 8000a8e:	6059      	str	r1, [r3, #4]
    for (int i = 0; i < CRSF_NUM_CHANNELS; i++) {
 8000a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a92:	3301      	adds	r3, #1
 8000a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a98:	2b0f      	cmp	r3, #15
 8000a9a:	ddec      	ble.n	8000a76 <CrsfSerial_UnpackChannels+0x2b4>
    }
}
 8000a9c:	bf00      	nop
 8000a9e:	bf00      	nop
 8000aa0:	3730      	adds	r7, #48	@ 0x30
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <HandlePacket>:



static void HandlePacket(CrsfSerial_HandleTypeDef *hcrsf, uint8_t len) {
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b084      	sub	sp, #16
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
 8000aae:	460b      	mov	r3, r1
 8000ab0:	70fb      	strb	r3, [r7, #3]
    crsf_header_t *hdr = (crsf_header_t *)hcrsf->rxBuf;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	3304      	adds	r3, #4
 8000ab6:	60fb      	str	r3, [r7, #12]
    switch (hdr->type) {
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	789b      	ldrb	r3, [r3, #2]
 8000abc:	2b16      	cmp	r3, #22
 8000abe:	d006      	beq.n	8000ace <HandlePacket+0x28>
 8000ac0:	2b16      	cmp	r3, #22
 8000ac2:	dc4f      	bgt.n	8000b64 <HandlePacket+0xbe>
 8000ac4:	2b02      	cmp	r3, #2
 8000ac6:	d033      	beq.n	8000b30 <HandlePacket+0x8a>
 8000ac8:	2b14      	cmp	r3, #20
 8000aca:	d01a      	beq.n	8000b02 <HandlePacket+0x5c>
        case CRSF_FRAMETYPE_GPS:
            memcpy(&hcrsf->gpsSensor, hdr->data, sizeof(crsf_sensor_gps_t));
            if (hcrsf->onPacketGps) hcrsf->onPacketGps(&hcrsf->gpsSensor);
            break;
    }
}
 8000acc:	e04a      	b.n	8000b64 <HandlePacket+0xbe>
            CrsfSerial_UnpackChannels(hcrsf, hdr->data); // <--- UNPACK channels into hcrsf->channels
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	3303      	adds	r3, #3
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f7ff fe74 	bl	80007c2 <CrsfSerial_UnpackChannels>
            if (hcrsf->onPacketChannels) hcrsf->onPacketChannels();
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	f8d3 31c0 	ldr.w	r3, [r3, #448]	@ 0x1c0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d003      	beq.n	8000aec <HandlePacket+0x46>
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f8d3 31c0 	ldr.w	r3, [r3, #448]	@ 0x1c0
 8000aea:	4798      	blx	r3
            hcrsf->lastChannelsPacket = HAL_GetTick();
 8000aec:	f000 ff6a 	bl	80019c4 <HAL_GetTick>
 8000af0:	4602      	mov	r2, r0
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
            hcrsf->linkIsUp = true;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2201      	movs	r2, #1
 8000afc:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c
            break;
 8000b00:	e030      	b.n	8000b64 <HandlePacket+0xbe>
            memcpy(&hcrsf->linkStatistics, hdr->data, sizeof(crsfLinkStatistics_t));
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	f203 1045 	addw	r0, r3, #325	@ 0x145
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	3303      	adds	r3, #3
 8000b0c:	220a      	movs	r2, #10
 8000b0e:	4619      	mov	r1, r3
 8000b10:	f004 fddc 	bl	80056cc <memcpy>
            if (hcrsf->onPacketLinkStatistics) hcrsf->onPacketLinkStatistics(&hcrsf->linkStatistics);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d01f      	beq.n	8000b5e <HandlePacket+0xb8>
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8000b24:	687a      	ldr	r2, [r7, #4]
 8000b26:	f202 1245 	addw	r2, r2, #325	@ 0x145
 8000b2a:	4610      	mov	r0, r2
 8000b2c:	4798      	blx	r3
            break;
 8000b2e:	e016      	b.n	8000b5e <HandlePacket+0xb8>
            memcpy(&hcrsf->gpsSensor, hdr->data, sizeof(crsf_sensor_gps_t));
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	f203 104f 	addw	r0, r3, #335	@ 0x14f
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	3303      	adds	r3, #3
 8000b3a:	220f      	movs	r2, #15
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	f004 fdc5 	bl	80056cc <memcpy>
            if (hcrsf->onPacketGps) hcrsf->onPacketGps(&hcrsf->gpsSensor);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	f8d3 31c8 	ldr.w	r3, [r3, #456]	@ 0x1c8
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d00a      	beq.n	8000b62 <HandlePacket+0xbc>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f8d3 31c8 	ldr.w	r3, [r3, #456]	@ 0x1c8
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	f202 124f 	addw	r2, r2, #335	@ 0x14f
 8000b58:	4610      	mov	r0, r2
 8000b5a:	4798      	blx	r3
            break;
 8000b5c:	e001      	b.n	8000b62 <HandlePacket+0xbc>
            break;
 8000b5e:	bf00      	nop
 8000b60:	e000      	b.n	8000b64 <HandlePacket+0xbe>
            break;
 8000b62:	bf00      	nop
}
 8000b64:	bf00      	nop
 8000b66:	3710      	adds	r7, #16
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <ProcessByte>:

//static void ProcessByte(CrsfSerial_HandleTypeDef *hcrsf, uint8_t b) {
void ProcessByte(CrsfSerial_HandleTypeDef *hcrsf, uint8_t b) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	460b      	mov	r3, r1
 8000b76:	70fb      	strb	r3, [r7, #3]
    hcrsf->rxBuf[hcrsf->rxBufPos++] = b;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000b7e:	1c5a      	adds	r2, r3, #1
 8000b80:	b2d1      	uxtb	r1, r2
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	f882 1044 	strb.w	r1, [r2, #68]	@ 0x44
 8000b88:	461a      	mov	r2, r3
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	78fa      	ldrb	r2, [r7, #3]
 8000b90:	711a      	strb	r2, [r3, #4]
    if (hcrsf->rxBufPos >= 2) {
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d931      	bls.n	8000c00 <ProcessByte+0x94>
        uint8_t len = hcrsf->rxBuf[1];
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	795b      	ldrb	r3, [r3, #5]
 8000ba0:	73fb      	strb	r3, [r7, #15]
        if (len >= 3 && hcrsf->rxBufPos >= len + 2) {
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
 8000ba4:	2b02      	cmp	r3, #2
 8000ba6:	d92b      	bls.n	8000c00 <ProcessByte+0x94>
 8000ba8:	7bfb      	ldrb	r3, [r7, #15]
 8000baa:	3301      	adds	r3, #1
 8000bac:	687a      	ldr	r2, [r7, #4]
 8000bae:	f892 2044 	ldrb.w	r2, [r2, #68]	@ 0x44
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	da24      	bge.n	8000c00 <ProcessByte+0x94>
            uint8_t crc = crc8_dvb_s2(hcrsf->rxBuf + 2, len - 1);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	3304      	adds	r3, #4
 8000bba:	1c9a      	adds	r2, r3, #2
 8000bbc:	7bfb      	ldrb	r3, [r7, #15]
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4610      	mov	r0, r2
 8000bc6:	f7ff fd33 	bl	8000630 <crc8_dvb_s2>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	73bb      	strb	r3, [r7, #14]
            if (crc == hcrsf->rxBuf[len + 1]) {
 8000bce:	7bfb      	ldrb	r3, [r7, #15]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	687a      	ldr	r2, [r7, #4]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	791b      	ldrb	r3, [r3, #4]
 8000bd8:	7bba      	ldrb	r2, [r7, #14]
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	d10c      	bne.n	8000bf8 <ProcessByte+0x8c>
                HandlePacket(hcrsf, len);
 8000bde:	7bfb      	ldrb	r3, [r7, #15]
 8000be0:	4619      	mov	r1, r3
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f7ff ff5f 	bl	8000aa6 <HandlePacket>
                ShiftBuffer(hcrsf, len + 2);
 8000be8:	7bfb      	ldrb	r3, [r7, #15]
 8000bea:	3302      	adds	r3, #2
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	4619      	mov	r1, r3
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f7ff fdba 	bl	800076a <ShiftBuffer>
            } else {
                ShiftBuffer(hcrsf, 1);
            }
        }
    }
}
 8000bf6:	e003      	b.n	8000c00 <ProcessByte+0x94>
                ShiftBuffer(hcrsf, 1);
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f7ff fdb5 	bl	800076a <ShiftBuffer>
}
 8000c00:	bf00      	nop
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <CrsfSerial_Loop>:

void CrsfSerial_Loop(CrsfSerial_HandleTypeDef *hcrsf) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
//            if (hcrsf->onOobData) hcrsf->onOobData(b);
//        } else {
//            ProcessByte(hcrsf, b);
//        }
//    }
    if (hcrsf->linkIsUp && HAL_GetTick() - hcrsf->lastChannelsPacket > CRSF_FAILSAFE_STAGE1_MS) {
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d016      	beq.n	8000c48 <CrsfSerial_Loop+0x40>
 8000c1a:	f000 fed3 	bl	80019c4 <HAL_GetTick>
 8000c1e:	4602      	mov	r2, r0
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8000c26:	1ad3      	subs	r3, r2, r3
 8000c28:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000c2c:	d90c      	bls.n	8000c48 <CrsfSerial_Loop+0x40>
        if (hcrsf->onLinkDown) hcrsf->onLinkDown();
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	f8d3 31b8 	ldr.w	r3, [r3, #440]	@ 0x1b8
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d003      	beq.n	8000c40 <CrsfSerial_Loop+0x38>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f8d3 31b8 	ldr.w	r3, [r3, #440]	@ 0x1b8
 8000c3e:	4798      	blx	r3
        hcrsf->linkIsUp = false;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2200      	movs	r2, #0
 8000c44:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c
    }
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <CrsfSerial_UART_IdleCallback>:

void CrsfSerial_UART_IdleCallback(CrsfSerial_HandleTypeDef *hcrsf)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
    uint16_t dmaPos = UART_RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(hcrsf->huart->hdmarx);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8000c68:	823b      	strh	r3, [r7, #16]
    uint16_t len;

    if (dmaPos != oldPos) {
 8000c6a:	4b2f      	ldr	r3, [pc, #188]	@ (8000d28 <CrsfSerial_UART_IdleCallback+0xd8>)
 8000c6c:	881b      	ldrh	r3, [r3, #0]
 8000c6e:	8a3a      	ldrh	r2, [r7, #16]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d054      	beq.n	8000d1e <CrsfSerial_UART_IdleCallback+0xce>
        if (dmaPos > oldPos) {
 8000c74:	4b2c      	ldr	r3, [pc, #176]	@ (8000d28 <CrsfSerial_UART_IdleCallback+0xd8>)
 8000c76:	881b      	ldrh	r3, [r3, #0]
 8000c78:	8a3a      	ldrh	r2, [r7, #16]
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	d91a      	bls.n	8000cb4 <CrsfSerial_UART_IdleCallback+0x64>
            len = dmaPos - oldPos;
 8000c7e:	4b2a      	ldr	r3, [pc, #168]	@ (8000d28 <CrsfSerial_UART_IdleCallback+0xd8>)
 8000c80:	881b      	ldrh	r3, [r3, #0]
 8000c82:	8a3a      	ldrh	r2, [r7, #16]
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	81fb      	strh	r3, [r7, #14]
            for (uint16_t i = 0; i < len; i++) {
 8000c88:	2300      	movs	r3, #0
 8000c8a:	82fb      	strh	r3, [r7, #22]
 8000c8c:	e00d      	b.n	8000caa <CrsfSerial_UART_IdleCallback+0x5a>
                ProcessByte(hcrsf, uartRxBuf[oldPos + i]);
 8000c8e:	4b26      	ldr	r3, [pc, #152]	@ (8000d28 <CrsfSerial_UART_IdleCallback+0xd8>)
 8000c90:	881b      	ldrh	r3, [r3, #0]
 8000c92:	461a      	mov	r2, r3
 8000c94:	8afb      	ldrh	r3, [r7, #22]
 8000c96:	4413      	add	r3, r2
 8000c98:	4a24      	ldr	r2, [pc, #144]	@ (8000d2c <CrsfSerial_UART_IdleCallback+0xdc>)
 8000c9a:	5cd3      	ldrb	r3, [r2, r3]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f7ff ff64 	bl	8000b6c <ProcessByte>
            for (uint16_t i = 0; i < len; i++) {
 8000ca4:	8afb      	ldrh	r3, [r7, #22]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	82fb      	strh	r3, [r7, #22]
 8000caa:	8afa      	ldrh	r2, [r7, #22]
 8000cac:	89fb      	ldrh	r3, [r7, #14]
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	d3ed      	bcc.n	8000c8e <CrsfSerial_UART_IdleCallback+0x3e>
 8000cb2:	e02a      	b.n	8000d0a <CrsfSerial_UART_IdleCallback+0xba>
            }
        } else {
            len = UART_RX_BUFFER_SIZE - oldPos;
 8000cb4:	4b1c      	ldr	r3, [pc, #112]	@ (8000d28 <CrsfSerial_UART_IdleCallback+0xd8>)
 8000cb6:	881b      	ldrh	r3, [r3, #0]
 8000cb8:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8000cbc:	81fb      	strh	r3, [r7, #14]
            for (uint16_t i = 0; i < len; i++) {
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	82bb      	strh	r3, [r7, #20]
 8000cc2:	e00d      	b.n	8000ce0 <CrsfSerial_UART_IdleCallback+0x90>
                ProcessByte(hcrsf, uartRxBuf[oldPos + i]);
 8000cc4:	4b18      	ldr	r3, [pc, #96]	@ (8000d28 <CrsfSerial_UART_IdleCallback+0xd8>)
 8000cc6:	881b      	ldrh	r3, [r3, #0]
 8000cc8:	461a      	mov	r2, r3
 8000cca:	8abb      	ldrh	r3, [r7, #20]
 8000ccc:	4413      	add	r3, r2
 8000cce:	4a17      	ldr	r2, [pc, #92]	@ (8000d2c <CrsfSerial_UART_IdleCallback+0xdc>)
 8000cd0:	5cd3      	ldrb	r3, [r2, r3]
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f7ff ff49 	bl	8000b6c <ProcessByte>
            for (uint16_t i = 0; i < len; i++) {
 8000cda:	8abb      	ldrh	r3, [r7, #20]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	82bb      	strh	r3, [r7, #20]
 8000ce0:	8aba      	ldrh	r2, [r7, #20]
 8000ce2:	89fb      	ldrh	r3, [r7, #14]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d3ed      	bcc.n	8000cc4 <CrsfSerial_UART_IdleCallback+0x74>
            }
            for (uint16_t i = 0; i < dmaPos; i++) {
 8000ce8:	2300      	movs	r3, #0
 8000cea:	827b      	strh	r3, [r7, #18]
 8000cec:	e009      	b.n	8000d02 <CrsfSerial_UART_IdleCallback+0xb2>
                ProcessByte(hcrsf, uartRxBuf[i]);
 8000cee:	8a7b      	ldrh	r3, [r7, #18]
 8000cf0:	4a0e      	ldr	r2, [pc, #56]	@ (8000d2c <CrsfSerial_UART_IdleCallback+0xdc>)
 8000cf2:	5cd3      	ldrb	r3, [r2, r3]
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f7ff ff38 	bl	8000b6c <ProcessByte>
            for (uint16_t i = 0; i < dmaPos; i++) {
 8000cfc:	8a7b      	ldrh	r3, [r7, #18]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	827b      	strh	r3, [r7, #18]
 8000d02:	8a7a      	ldrh	r2, [r7, #18]
 8000d04:	8a3b      	ldrh	r3, [r7, #16]
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d3f1      	bcc.n	8000cee <CrsfSerial_UART_IdleCallback+0x9e>
            }
        }

        oldPos = dmaPos;
 8000d0a:	4a07      	ldr	r2, [pc, #28]	@ (8000d28 <CrsfSerial_UART_IdleCallback+0xd8>)
 8000d0c:	8a3b      	ldrh	r3, [r7, #16]
 8000d0e:	8013      	strh	r3, [r2, #0]
        if (oldPos >= UART_RX_BUFFER_SIZE) oldPos = 0;
 8000d10:	4b05      	ldr	r3, [pc, #20]	@ (8000d28 <CrsfSerial_UART_IdleCallback+0xd8>)
 8000d12:	881b      	ldrh	r3, [r3, #0]
 8000d14:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d16:	d902      	bls.n	8000d1e <CrsfSerial_UART_IdleCallback+0xce>
 8000d18:	4b03      	ldr	r3, [pc, #12]	@ (8000d28 <CrsfSerial_UART_IdleCallback+0xd8>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	801a      	strh	r2, [r3, #0]
    }
}
 8000d1e:	bf00      	nop
 8000d20:	3718      	adds	r7, #24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	200000f0 	.word	0x200000f0
 8000d2c:	20000070 	.word	0x20000070

08000d30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	607b      	str	r3, [r7, #4]
 8000d3a:	4b10      	ldr	r3, [pc, #64]	@ (8000d7c <MX_DMA_Init+0x4c>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3e:	4a0f      	ldr	r2, [pc, #60]	@ (8000d7c <MX_DMA_Init+0x4c>)
 8000d40:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d46:	4b0d      	ldr	r3, [pc, #52]	@ (8000d7c <MX_DMA_Init+0x4c>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d4e:	607b      	str	r3, [r7, #4]
 8000d50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2100      	movs	r1, #0
 8000d56:	203a      	movs	r0, #58	@ 0x3a
 8000d58:	f001 fb0d 	bl	8002376 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000d5c:	203a      	movs	r0, #58	@ 0x3a
 8000d5e:	f001 fb26 	bl	80023ae <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2100      	movs	r1, #0
 8000d66:	2046      	movs	r0, #70	@ 0x46
 8000d68:	f001 fb05 	bl	8002376 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000d6c:	2046      	movs	r0, #70	@ 0x46
 8000d6e:	f001 fb1e 	bl	80023ae <HAL_NVIC_EnableIRQ>

}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40023800 	.word	0x40023800

08000d80 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08a      	sub	sp, #40	@ 0x28
 8000d84:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
 8000d90:	609a      	str	r2, [r3, #8]
 8000d92:	60da      	str	r2, [r3, #12]
 8000d94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	613b      	str	r3, [r7, #16]
 8000d9a:	4b27      	ldr	r3, [pc, #156]	@ (8000e38 <MX_GPIO_Init+0xb8>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9e:	4a26      	ldr	r2, [pc, #152]	@ (8000e38 <MX_GPIO_Init+0xb8>)
 8000da0:	f043 0304 	orr.w	r3, r3, #4
 8000da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da6:	4b24      	ldr	r3, [pc, #144]	@ (8000e38 <MX_GPIO_Init+0xb8>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	f003 0304 	and.w	r3, r3, #4
 8000dae:	613b      	str	r3, [r7, #16]
 8000db0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	4b20      	ldr	r3, [pc, #128]	@ (8000e38 <MX_GPIO_Init+0xb8>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dba:	4a1f      	ldr	r2, [pc, #124]	@ (8000e38 <MX_GPIO_Init+0xb8>)
 8000dbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc2:	4b1d      	ldr	r3, [pc, #116]	@ (8000e38 <MX_GPIO_Init+0xb8>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	4b19      	ldr	r3, [pc, #100]	@ (8000e38 <MX_GPIO_Init+0xb8>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd6:	4a18      	ldr	r2, [pc, #96]	@ (8000e38 <MX_GPIO_Init+0xb8>)
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dde:	4b16      	ldr	r3, [pc, #88]	@ (8000e38 <MX_GPIO_Init+0xb8>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	607b      	str	r3, [r7, #4]
 8000dee:	4b12      	ldr	r3, [pc, #72]	@ (8000e38 <MX_GPIO_Init+0xb8>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df2:	4a11      	ldr	r2, [pc, #68]	@ (8000e38 <MX_GPIO_Init+0xb8>)
 8000df4:	f043 0302 	orr.w	r3, r3, #2
 8000df8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dfa:	4b0f      	ldr	r3, [pc, #60]	@ (8000e38 <MX_GPIO_Init+0xb8>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfe:	f003 0302 	and.w	r3, r3, #2
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DPIN_LED_GPIO_Port, DPIN_LED_Pin, GPIO_PIN_SET);
 8000e06:	2201      	movs	r2, #1
 8000e08:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e0c:	480b      	ldr	r0, [pc, #44]	@ (8000e3c <MX_GPIO_Init+0xbc>)
 8000e0e:	f002 f86f 	bl	8002ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DPIN_LED_Pin */
  GPIO_InitStruct.Pin = DPIN_LED_Pin;
 8000e12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DPIN_LED_GPIO_Port, &GPIO_InitStruct);
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4804      	ldr	r0, [pc, #16]	@ (8000e3c <MX_GPIO_Init+0xbc>)
 8000e2c:	f001 fedc 	bl	8002be8 <HAL_GPIO_Init>

}
 8000e30:	bf00      	nop
 8000e32:	3728      	adds	r7, #40	@ 0x28
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40020800 	.word	0x40020800

08000e40 <onRCFrameReceived>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Called when a valid RC packet is received
void onRCFrameReceived(const int *rcChannels) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
    lastPacketMillis = HAL_GetTick();  // Timestamp of last valid packet
 8000e48:	f000 fdbc 	bl	80019c4 <HAL_GetTick>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	4a10      	ldr	r2, [pc, #64]	@ (8000e90 <onRCFrameReceived+0x50>)
 8000e50:	6013      	str	r3, [r2, #0]
    failsafeActive = false;
 8000e52:	4b10      	ldr	r3, [pc, #64]	@ (8000e94 <onRCFrameReceived+0x54>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	701a      	strb	r2, [r3, #0]

    // Store last valid RC values
    for (int i = 0; i < CRSF_NUM_CHANNELS; i++) {
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	e00b      	b.n	8000e76 <onRCFrameReceived+0x36>
        lastValidChannels[i] = rcChannels[i];
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	4413      	add	r3, r2
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	490b      	ldr	r1, [pc, #44]	@ (8000e98 <onRCFrameReceived+0x58>)
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < CRSF_NUM_CHANNELS; i++) {
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	3301      	adds	r3, #1
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	2b0f      	cmp	r3, #15
 8000e7a:	ddf0      	ble.n	8000e5e <onRCFrameReceived+0x1e>
    }

    // Update servos here with lastValidChannels
    ServoControl_Update(lastValidChannels, failsafeActive);
 8000e7c:	4b05      	ldr	r3, [pc, #20]	@ (8000e94 <onRCFrameReceived+0x54>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	4619      	mov	r1, r3
 8000e82:	4805      	ldr	r0, [pc, #20]	@ (8000e98 <onRCFrameReceived+0x58>)
 8000e84:	f000 f958 	bl	8001138 <ServoControl_Update>
}
 8000e88:	bf00      	nop
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	200002c0 	.word	0x200002c0
 8000e94:	200002c4 	.word	0x200002c4
 8000e98:	200002c8 	.word	0x200002c8

08000e9c <Read_BatteryVoltage>:

// Read the battery voltage
float Read_BatteryVoltage(void) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 8000ea2:	4817      	ldr	r0, [pc, #92]	@ (8000f00 <Read_BatteryVoltage+0x64>)
 8000ea4:	f000 fdde 	bl	8001a64 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);  // Wait for conversion
 8000ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8000eac:	4814      	ldr	r0, [pc, #80]	@ (8000f00 <Read_BatteryVoltage+0x64>)
 8000eae:	f000 fec0 	bl	8001c32 <HAL_ADC_PollForConversion>
    uint32_t adc_raw = HAL_ADC_GetValue(&hadc1);
 8000eb2:	4813      	ldr	r0, [pc, #76]	@ (8000f00 <Read_BatteryVoltage+0x64>)
 8000eb4:	f000 ff48 	bl	8001d48 <HAL_ADC_GetValue>
 8000eb8:	60f8      	str	r0, [r7, #12]
    HAL_ADC_Stop(&hadc1);
 8000eba:	4811      	ldr	r0, [pc, #68]	@ (8000f00 <Read_BatteryVoltage+0x64>)
 8000ebc:	f000 fe86 	bl	8001bcc <HAL_ADC_Stop>

    float adc_voltage = ((float)adc_raw / 4095.0f) * 3.3f;  // Assuming 12-bit ADC and 3.3V ref
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	ee07 3a90 	vmov	s15, r3
 8000ec6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000eca:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8000f04 <Read_BatteryVoltage+0x68>
 8000ece:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ed2:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8000f08 <Read_BatteryVoltage+0x6c>
 8000ed6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000eda:	edc7 7a02 	vstr	s15, [r7, #8]
    float battery_voltage = adc_voltage * ((20.0f + 10.0f) / 10.0f);  // Compensate for voltage divider
 8000ede:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ee2:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8000ee6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000eea:	edc7 7a01 	vstr	s15, [r7, #4]

    return battery_voltage;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	ee07 3a90 	vmov	s15, r3
}
 8000ef4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000028 	.word	0x20000028
 8000f04:	457ff000 	.word	0x457ff000
 8000f08:	40533333 	.word	0x40533333

08000f0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f12:	f000 fcf1 	bl	80018f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f16:	f000 f86d 	bl	8000ff4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f1a:	f7ff ff31 	bl	8000d80 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f1e:	f7ff ff07 	bl	8000d30 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000f22:	f000 fbdb 	bl	80016dc <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000f26:	f7ff faed 	bl	8000504 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000f2a:	f000 fa41 	bl	80013b0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f2e:	f000 fabf 	bl	80014b0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  ServoControl_Init();
 8000f32:	f000 f8e9 	bl	8001108 <ServoControl_Init>

  // Initialize CRSF with UART and baud rate
  CrsfSerial_Init(&hcrsf, &huart1, CRSF_BAUDRATE);
 8000f36:	4a25      	ldr	r2, [pc, #148]	@ (8000fcc <main+0xc0>)
 8000f38:	4925      	ldr	r1, [pc, #148]	@ (8000fd0 <main+0xc4>)
 8000f3a:	4826      	ldr	r0, [pc, #152]	@ (8000fd4 <main+0xc8>)
 8000f3c:	f7ff fbb3 	bl	80006a6 <CrsfSerial_Init>
  CrsfSerial_Begin(&hcrsf, CRSF_BAUDRATE);
 8000f40:	4922      	ldr	r1, [pc, #136]	@ (8000fcc <main+0xc0>)
 8000f42:	4824      	ldr	r0, [pc, #144]	@ (8000fd4 <main+0xc8>)
 8000f44:	f7ff fbfb 	bl	800073e <CrsfSerial_Begin>

  /* USER CODE END 2 */

  HAL_UART_Receive_DMA(&huart1, uartRxBuf, UART_RX_BUFFER_SIZE);
 8000f48:	2280      	movs	r2, #128	@ 0x80
 8000f4a:	4923      	ldr	r1, [pc, #140]	@ (8000fd8 <main+0xcc>)
 8000f4c:	4820      	ldr	r0, [pc, #128]	@ (8000fd0 <main+0xc4>)
 8000f4e:	f003 fab9 	bl	80044c4 <HAL_UART_Receive_DMA>
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8000f52:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd0 <main+0xc4>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	68da      	ldr	r2, [r3, #12]
 8000f58:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd0 <main+0xc4>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f042 0210 	orr.w	r2, r2, #16
 8000f60:	60da      	str	r2, [r3, #12]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  CrsfSerial_Loop(&hcrsf);
 8000f62:	481c      	ldr	r0, [pc, #112]	@ (8000fd4 <main+0xc8>)
 8000f64:	f7ff fe50 	bl	8000c08 <CrsfSerial_Loop>

	  // This updates lastValidChannels[] and servos
	  onRCFrameReceived(hcrsf.channels);
 8000f68:	481c      	ldr	r0, [pc, #112]	@ (8000fdc <main+0xd0>)
 8000f6a:	f7ff ff69 	bl	8000e40 <onRCFrameReceived>

	    uint32_t now = HAL_GetTick();
 8000f6e:	f000 fd29 	bl	80019c4 <HAL_GetTick>
 8000f72:	6078      	str	r0, [r7, #4]

	    if (now - lastVoltageRead >= 5000) { // every 2 seconds
 8000f74:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe0 <main+0xd4>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d909      	bls.n	8000f98 <main+0x8c>
	        lastVoltageRead = now;
 8000f84:	4a16      	ldr	r2, [pc, #88]	@ (8000fe0 <main+0xd4>)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6013      	str	r3, [r2, #0]

	        voltage = Read_BatteryVoltage();
 8000f8a:	f7ff ff87 	bl	8000e9c <Read_BatteryVoltage>
 8000f8e:	eef0 7a40 	vmov.f32	s15, s0
 8000f92:	4b14      	ldr	r3, [pc, #80]	@ (8000fe4 <main+0xd8>)
 8000f94:	edc3 7a00 	vstr	s15, [r3]
	    }

//	  ServoControl_Update(hcrsf.channels, failsafeActive);  // Redundant

	  uint32_t currentMillis = HAL_GetTick();
 8000f98:	f000 fd14 	bl	80019c4 <HAL_GetTick>
 8000f9c:	6038      	str	r0, [r7, #0]

	  if ((currentMillis - lastPacketMillis) > CRSF_PACKET_TIMEOUT_MS) {
 8000f9e:	4b12      	ldr	r3, [pc, #72]	@ (8000fe8 <main+0xdc>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	683a      	ldr	r2, [r7, #0]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	2b64      	cmp	r3, #100	@ 0x64
 8000fa8:	d9db      	bls.n	8000f62 <main+0x56>
		  if (!failsafeActive) {
 8000faa:	4b10      	ldr	r3, [pc, #64]	@ (8000fec <main+0xe0>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	f083 0301 	eor.w	r3, r3, #1
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d0d4      	beq.n	8000f62 <main+0x56>
			  failsafeActive = true;
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000fec <main+0xe0>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	701a      	strb	r2, [r3, #0]

			  // Activate failsafe behavior: hold last known value for throttle, others in the center
			  ServoControl_Update(lastValidChannels, failsafeActive);
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000fec <main+0xe0>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	480a      	ldr	r0, [pc, #40]	@ (8000ff0 <main+0xe4>)
 8000fc6:	f000 f8b7 	bl	8001138 <ServoControl_Update>
  {
 8000fca:	e7ca      	b.n	8000f62 <main+0x56>
 8000fcc:	000668a0 	.word	0x000668a0
 8000fd0:	200003a0 	.word	0x200003a0
 8000fd4:	200000f4 	.word	0x200000f4
 8000fd8:	20000070 	.word	0x20000070
 8000fdc:	20000268 	.word	0x20000268
 8000fe0:	2000030c 	.word	0x2000030c
 8000fe4:	20000308 	.word	0x20000308
 8000fe8:	200002c0 	.word	0x200002c0
 8000fec:	200002c4 	.word	0x200002c4
 8000ff0:	200002c8 	.word	0x200002c8

08000ff4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b094      	sub	sp, #80	@ 0x50
 8000ff8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffa:	f107 0320 	add.w	r3, r7, #32
 8000ffe:	2230      	movs	r2, #48	@ 0x30
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f004 fb36 	bl	8005674 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001008:	f107 030c 	add.w	r3, r7, #12
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001018:	2300      	movs	r3, #0
 800101a:	60bb      	str	r3, [r7, #8]
 800101c:	4b27      	ldr	r3, [pc, #156]	@ (80010bc <SystemClock_Config+0xc8>)
 800101e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001020:	4a26      	ldr	r2, [pc, #152]	@ (80010bc <SystemClock_Config+0xc8>)
 8001022:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001026:	6413      	str	r3, [r2, #64]	@ 0x40
 8001028:	4b24      	ldr	r3, [pc, #144]	@ (80010bc <SystemClock_Config+0xc8>)
 800102a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001034:	2300      	movs	r3, #0
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	4b21      	ldr	r3, [pc, #132]	@ (80010c0 <SystemClock_Config+0xcc>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a20      	ldr	r2, [pc, #128]	@ (80010c0 <SystemClock_Config+0xcc>)
 800103e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001042:	6013      	str	r3, [r2, #0]
 8001044:	4b1e      	ldr	r3, [pc, #120]	@ (80010c0 <SystemClock_Config+0xcc>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800104c:	607b      	str	r3, [r7, #4]
 800104e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001050:	2301      	movs	r3, #1
 8001052:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001054:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001058:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800105a:	2302      	movs	r3, #2
 800105c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800105e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001062:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001064:	230c      	movs	r3, #12
 8001066:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001068:	2360      	movs	r3, #96	@ 0x60
 800106a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800106c:	2302      	movs	r3, #2
 800106e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001070:	2304      	movs	r3, #4
 8001072:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001074:	f107 0320 	add.w	r3, r7, #32
 8001078:	4618      	mov	r0, r3
 800107a:	f001 ff53 	bl	8002f24 <HAL_RCC_OscConfig>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001084:	f000 f81e 	bl	80010c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001088:	230f      	movs	r3, #15
 800108a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800108c:	2302      	movs	r3, #2
 800108e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001094:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001098:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800109a:	2300      	movs	r3, #0
 800109c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800109e:	f107 030c 	add.w	r3, r7, #12
 80010a2:	2103      	movs	r1, #3
 80010a4:	4618      	mov	r0, r3
 80010a6:	f002 f9b5 	bl	8003414 <HAL_RCC_ClockConfig>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80010b0:	f000 f808 	bl	80010c4 <Error_Handler>
  }
}
 80010b4:	bf00      	nop
 80010b6:	3750      	adds	r7, #80	@ 0x50
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40007000 	.word	0x40007000

080010c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010c8:	b672      	cpsid	i
}
 80010ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010cc:	bf00      	nop
 80010ce:	e7fd      	b.n	80010cc <Error_Handler+0x8>

080010d0 <map>:
 *      Author: Khalil
 */

#include "servo_control.h"

int map(int value, int in_min, int in_max, int out_min, int out_max) {
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
 80010dc:	603b      	str	r3, [r7, #0]
    return (value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	69b9      	ldr	r1, [r7, #24]
 80010e6:	683a      	ldr	r2, [r7, #0]
 80010e8:	1a8a      	subs	r2, r1, r2
 80010ea:	fb03 f202 	mul.w	r2, r3, r2
 80010ee:	6879      	ldr	r1, [r7, #4]
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	1acb      	subs	r3, r1, r3
 80010f4:	fb92 f2f3 	sdiv	r2, r2, r3
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	4413      	add	r3, r2
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3714      	adds	r7, #20
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <ServoControl_Init>:

void ServoControl_Init(void) {
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
    // Start all configured PWM channels
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);  // Throttle
 800110c:	2104      	movs	r1, #4
 800110e:	4808      	ldr	r0, [pc, #32]	@ (8001130 <ServoControl_Init+0x28>)
 8001110:	f002 fc08 	bl	8003924 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);  // Rudder
 8001114:	2108      	movs	r1, #8
 8001116:	4806      	ldr	r0, [pc, #24]	@ (8001130 <ServoControl_Init+0x28>)
 8001118:	f002 fc04 	bl	8003924 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);  // Elevator
 800111c:	2100      	movs	r1, #0
 800111e:	4805      	ldr	r0, [pc, #20]	@ (8001134 <ServoControl_Init+0x2c>)
 8001120:	f002 fc00 	bl	8003924 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);  // Aileron
 8001124:	2104      	movs	r1, #4
 8001126:	4803      	ldr	r0, [pc, #12]	@ (8001134 <ServoControl_Init+0x2c>)
 8001128:	f002 fbfc 	bl	8003924 <HAL_TIM_PWM_Start>
}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000310 	.word	0x20000310
 8001134:	20000358 	.word	0x20000358

08001138 <ServoControl_Update>:

//void ServoControl_Update(const int *channels) {
void ServoControl_Update(const int *channels, bool failsafeActive) {
 8001138:	b580      	push	{r7, lr}
 800113a:	b088      	sub	sp, #32
 800113c:	af02      	add	r7, sp, #8
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	460b      	mov	r3, r1
 8001142:	70fb      	strb	r3, [r7, #3]

    int throttle_us = map(channels[CHANNEL_THROTTLE], 172, 1811, 1000, 2000); // 450, 1100
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3304      	adds	r3, #4
 8001148:	6818      	ldr	r0, [r3, #0]
 800114a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001154:	f240 7213 	movw	r2, #1811	@ 0x713
 8001158:	21ac      	movs	r1, #172	@ 0xac
 800115a:	f7ff ffb9 	bl	80010d0 <map>
 800115e:	6178      	str	r0, [r7, #20]
    int rudder_us, elevator_us, aileron_us;

    if (failsafeActive) {
 8001160:	78fb      	ldrb	r3, [r7, #3]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d009      	beq.n	800117a <ServoControl_Update+0x42>
        // Failsafe: hold throttle, center others
        rudder_us   = 1500;
 8001166:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800116a:	613b      	str	r3, [r7, #16]
        elevator_us = 1500;
 800116c:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001170:	60fb      	str	r3, [r7, #12]
        aileron_us  = 1500;
 8001172:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	e028      	b.n	80011cc <ServoControl_Update+0x94>
    } else {
        rudder_us   = map(channels[CHANNEL_RUDDER], 172, 1811, 1000, 2000);   // 600, 900
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6818      	ldr	r0, [r3, #0]
 800117e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001188:	f240 7213 	movw	r2, #1811	@ 0x713
 800118c:	21ac      	movs	r1, #172	@ 0xac
 800118e:	f7ff ff9f 	bl	80010d0 <map>
 8001192:	6138      	str	r0, [r7, #16]
        elevator_us = map(channels[CHANNEL_ELEVATOR], 172, 1811, 1000, 2000);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3308      	adds	r3, #8
 8001198:	6818      	ldr	r0, [r3, #0]
 800119a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011a4:	f240 7213 	movw	r2, #1811	@ 0x713
 80011a8:	21ac      	movs	r1, #172	@ 0xac
 80011aa:	f7ff ff91 	bl	80010d0 <map>
 80011ae:	60f8      	str	r0, [r7, #12]
        aileron_us  = map(channels[CHANNEL_AILERON], 172, 1811, 1000, 2000);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	330c      	adds	r3, #12
 80011b4:	6818      	ldr	r0, [r3, #0]
 80011b6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011c0:	f240 7213 	movw	r2, #1811	@ 0x713
 80011c4:	21ac      	movs	r1, #172	@ 0xac
 80011c6:	f7ff ff83 	bl	80010d0 <map>
 80011ca:	60b8      	str	r0, [r7, #8]
    }

    // Clamp values to safe servo range
    if (throttle_us < SERVO_MIN_US) throttle_us = SERVO_MIN_US;
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80011d2:	da02      	bge.n	80011da <ServoControl_Update+0xa2>
 80011d4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011d8:	617b      	str	r3, [r7, #20]
    if (throttle_us > SERVO_MAX_US) throttle_us = SERVO_MAX_US;
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80011e0:	dd02      	ble.n	80011e8 <ServoControl_Update+0xb0>
 80011e2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80011e6:	617b      	str	r3, [r7, #20]

    if (rudder_us < SERVO_MIN_US) rudder_us = SERVO_MIN_US;
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80011ee:	da02      	bge.n	80011f6 <ServoControl_Update+0xbe>
 80011f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011f4:	613b      	str	r3, [r7, #16]
    if (rudder_us > SERVO_MAX_US) rudder_us = SERVO_MAX_US;
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80011fc:	dd02      	ble.n	8001204 <ServoControl_Update+0xcc>
 80011fe:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001202:	613b      	str	r3, [r7, #16]

    if (elevator_us < SERVO_MIN_US) elevator_us = SERVO_MIN_US;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800120a:	da02      	bge.n	8001212 <ServoControl_Update+0xda>
 800120c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001210:	60fb      	str	r3, [r7, #12]
    if (elevator_us > SERVO_MAX_US) elevator_us = SERVO_MAX_US;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001218:	dd02      	ble.n	8001220 <ServoControl_Update+0xe8>
 800121a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800121e:	60fb      	str	r3, [r7, #12]

    if (aileron_us < SERVO_MIN_US) aileron_us = SERVO_MIN_US;
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001226:	da02      	bge.n	800122e <ServoControl_Update+0xf6>
 8001228:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800122c:	60bb      	str	r3, [r7, #8]
    if (aileron_us > SERVO_MAX_US) aileron_us = SERVO_MAX_US;
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001234:	dd02      	ble.n	800123c <ServoControl_Update+0x104>
 8001236:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800123a:	60bb      	str	r3, [r7, #8]

    // Update PWM pulse widths
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, throttle_us);
 800123c:	4b09      	ldr	r3, [pc, #36]	@ (8001264 <ServoControl_Update+0x12c>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	697a      	ldr	r2, [r7, #20]
 8001242:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, rudder_us);
 8001244:	4b07      	ldr	r3, [pc, #28]	@ (8001264 <ServoControl_Update+0x12c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, elevator_us);
 800124c:	4b06      	ldr	r3, [pc, #24]	@ (8001268 <ServoControl_Update+0x130>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	68fa      	ldr	r2, [r7, #12]
 8001252:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, aileron_us);
 8001254:	4b04      	ldr	r3, [pc, #16]	@ (8001268 <ServoControl_Update+0x130>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	68ba      	ldr	r2, [r7, #8]
 800125a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800125c:	bf00      	nop
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000310 	.word	0x20000310
 8001268:	20000358 	.word	0x20000358

0800126c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	4b10      	ldr	r3, [pc, #64]	@ (80012b8 <HAL_MspInit+0x4c>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800127a:	4a0f      	ldr	r2, [pc, #60]	@ (80012b8 <HAL_MspInit+0x4c>)
 800127c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001280:	6453      	str	r3, [r2, #68]	@ 0x44
 8001282:	4b0d      	ldr	r3, [pc, #52]	@ (80012b8 <HAL_MspInit+0x4c>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001286:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	603b      	str	r3, [r7, #0]
 8001292:	4b09      	ldr	r3, [pc, #36]	@ (80012b8 <HAL_MspInit+0x4c>)
 8001294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001296:	4a08      	ldr	r2, [pc, #32]	@ (80012b8 <HAL_MspInit+0x4c>)
 8001298:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800129c:	6413      	str	r3, [r2, #64]	@ 0x40
 800129e:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <HAL_MspInit+0x4c>)
 80012a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012a6:	603b      	str	r3, [r7, #0]
 80012a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	40023800 	.word	0x40023800

080012bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012c0:	bf00      	nop
 80012c2:	e7fd      	b.n	80012c0 <NMI_Handler+0x4>

080012c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012c8:	bf00      	nop
 80012ca:	e7fd      	b.n	80012c8 <HardFault_Handler+0x4>

080012cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d0:	bf00      	nop
 80012d2:	e7fd      	b.n	80012d0 <MemManage_Handler+0x4>

080012d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012d8:	bf00      	nop
 80012da:	e7fd      	b.n	80012d8 <BusFault_Handler+0x4>

080012dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e0:	bf00      	nop
 80012e2:	e7fd      	b.n	80012e0 <UsageFault_Handler+0x4>

080012e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001312:	f000 fb43 	bl	800199c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001322:	480e      	ldr	r0, [pc, #56]	@ (800135c <USART1_IRQHandler+0x40>)
 8001324:	f003 f8f4 	bl	8004510 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE)) {
 8001328:	4b0c      	ldr	r3, [pc, #48]	@ (800135c <USART1_IRQHandler+0x40>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0310 	and.w	r3, r3, #16
 8001332:	2b10      	cmp	r3, #16
 8001334:	d10d      	bne.n	8001352 <USART1_IRQHandler+0x36>
      __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8001336:	2300      	movs	r3, #0
 8001338:	607b      	str	r3, [r7, #4]
 800133a:	4b08      	ldr	r3, [pc, #32]	@ (800135c <USART1_IRQHandler+0x40>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	4b06      	ldr	r3, [pc, #24]	@ (800135c <USART1_IRQHandler+0x40>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	607b      	str	r3, [r7, #4]
 800134a:	687b      	ldr	r3, [r7, #4]
      CrsfSerial_UART_IdleCallback(&hcrsf);
 800134c:	4804      	ldr	r0, [pc, #16]	@ (8001360 <USART1_IRQHandler+0x44>)
 800134e:	f7ff fc7f 	bl	8000c50 <CrsfSerial_UART_IdleCallback>
  }

  /* USER CODE END USART1_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	200003a0 	.word	0x200003a0
 8001360:	200000f4 	.word	0x200000f4

08001364 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001368:	4802      	ldr	r0, [pc, #8]	@ (8001374 <DMA2_Stream2_IRQHandler+0x10>)
 800136a:	f001 f9d3 	bl	8002714 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	200003e8 	.word	0x200003e8

08001378 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800137c:	4802      	ldr	r0, [pc, #8]	@ (8001388 <DMA2_Stream7_IRQHandler+0x10>)
 800137e:	f001 f9c9 	bl	8002714 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000448 	.word	0x20000448

0800138c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001390:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <SystemInit+0x20>)
 8001392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001396:	4a05      	ldr	r2, [pc, #20]	@ (80013ac <SystemInit+0x20>)
 8001398:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800139c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08e      	sub	sp, #56	@ 0x38
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c4:	f107 0320 	add.w	r3, r7, #32
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
 80013dc:	615a      	str	r2, [r3, #20]
 80013de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013e0:	4b32      	ldr	r3, [pc, #200]	@ (80014ac <MX_TIM2_Init+0xfc>)
 80013e2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100 - 1;
 80013e8:	4b30      	ldr	r3, [pc, #192]	@ (80014ac <MX_TIM2_Init+0xfc>)
 80013ea:	2263      	movs	r2, #99	@ 0x63
 80013ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ee:	4b2f      	ldr	r3, [pc, #188]	@ (80014ac <MX_TIM2_Init+0xfc>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000 - 1;
 80013f4:	4b2d      	ldr	r3, [pc, #180]	@ (80014ac <MX_TIM2_Init+0xfc>)
 80013f6:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80013fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013fc:	4b2b      	ldr	r3, [pc, #172]	@ (80014ac <MX_TIM2_Init+0xfc>)
 80013fe:	2200      	movs	r2, #0
 8001400:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001402:	4b2a      	ldr	r3, [pc, #168]	@ (80014ac <MX_TIM2_Init+0xfc>)
 8001404:	2280      	movs	r2, #128	@ 0x80
 8001406:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001408:	4828      	ldr	r0, [pc, #160]	@ (80014ac <MX_TIM2_Init+0xfc>)
 800140a:	f002 f9e3 	bl	80037d4 <HAL_TIM_Base_Init>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001414:	f7ff fe56 	bl	80010c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001418:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800141c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800141e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001422:	4619      	mov	r1, r3
 8001424:	4821      	ldr	r0, [pc, #132]	@ (80014ac <MX_TIM2_Init+0xfc>)
 8001426:	f002 fbef 	bl	8003c08 <HAL_TIM_ConfigClockSource>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001430:	f7ff fe48 	bl	80010c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001434:	481d      	ldr	r0, [pc, #116]	@ (80014ac <MX_TIM2_Init+0xfc>)
 8001436:	f002 fa1c 	bl	8003872 <HAL_TIM_PWM_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001440:	f7ff fe40 	bl	80010c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001444:	2300      	movs	r3, #0
 8001446:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001448:	2300      	movs	r3, #0
 800144a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800144c:	f107 0320 	add.w	r3, r7, #32
 8001450:	4619      	mov	r1, r3
 8001452:	4816      	ldr	r0, [pc, #88]	@ (80014ac <MX_TIM2_Init+0xfc>)
 8001454:	f002 ff78 	bl	8004348 <HAL_TIMEx_MasterConfigSynchronization>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800145e:	f7ff fe31 	bl	80010c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001462:	2360      	movs	r3, #96	@ 0x60
 8001464:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800146e:	2300      	movs	r3, #0
 8001470:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001472:	1d3b      	adds	r3, r7, #4
 8001474:	2204      	movs	r2, #4
 8001476:	4619      	mov	r1, r3
 8001478:	480c      	ldr	r0, [pc, #48]	@ (80014ac <MX_TIM2_Init+0xfc>)
 800147a:	f002 fb03 	bl	8003a84 <HAL_TIM_PWM_ConfigChannel>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001484:	f7ff fe1e 	bl	80010c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001488:	1d3b      	adds	r3, r7, #4
 800148a:	2208      	movs	r2, #8
 800148c:	4619      	mov	r1, r3
 800148e:	4807      	ldr	r0, [pc, #28]	@ (80014ac <MX_TIM2_Init+0xfc>)
 8001490:	f002 faf8 	bl	8003a84 <HAL_TIM_PWM_ConfigChannel>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800149a:	f7ff fe13 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800149e:	4803      	ldr	r0, [pc, #12]	@ (80014ac <MX_TIM2_Init+0xfc>)
 80014a0:	f000 f8be 	bl	8001620 <HAL_TIM_MspPostInit>

}
 80014a4:	bf00      	nop
 80014a6:	3738      	adds	r7, #56	@ 0x38
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20000310 	.word	0x20000310

080014b0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08e      	sub	sp, #56	@ 0x38
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c4:	f107 0320 	add.w	r3, r7, #32
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014ce:	1d3b      	adds	r3, r7, #4
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
 80014dc:	615a      	str	r2, [r3, #20]
 80014de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014e0:	4b32      	ldr	r3, [pc, #200]	@ (80015ac <MX_TIM3_Init+0xfc>)
 80014e2:	4a33      	ldr	r2, [pc, #204]	@ (80015b0 <MX_TIM3_Init+0x100>)
 80014e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100 - 1;
 80014e6:	4b31      	ldr	r3, [pc, #196]	@ (80015ac <MX_TIM3_Init+0xfc>)
 80014e8:	2263      	movs	r2, #99	@ 0x63
 80014ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ec:	4b2f      	ldr	r3, [pc, #188]	@ (80015ac <MX_TIM3_Init+0xfc>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000 - 1;
 80014f2:	4b2e      	ldr	r3, [pc, #184]	@ (80015ac <MX_TIM3_Init+0xfc>)
 80014f4:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80014f8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014fa:	4b2c      	ldr	r3, [pc, #176]	@ (80015ac <MX_TIM3_Init+0xfc>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001500:	4b2a      	ldr	r3, [pc, #168]	@ (80015ac <MX_TIM3_Init+0xfc>)
 8001502:	2280      	movs	r2, #128	@ 0x80
 8001504:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001506:	4829      	ldr	r0, [pc, #164]	@ (80015ac <MX_TIM3_Init+0xfc>)
 8001508:	f002 f964 	bl	80037d4 <HAL_TIM_Base_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001512:	f7ff fdd7 	bl	80010c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001516:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800151a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800151c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001520:	4619      	mov	r1, r3
 8001522:	4822      	ldr	r0, [pc, #136]	@ (80015ac <MX_TIM3_Init+0xfc>)
 8001524:	f002 fb70 	bl	8003c08 <HAL_TIM_ConfigClockSource>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800152e:	f7ff fdc9 	bl	80010c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001532:	481e      	ldr	r0, [pc, #120]	@ (80015ac <MX_TIM3_Init+0xfc>)
 8001534:	f002 f99d 	bl	8003872 <HAL_TIM_PWM_Init>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800153e:	f7ff fdc1 	bl	80010c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001542:	2300      	movs	r3, #0
 8001544:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001546:	2300      	movs	r3, #0
 8001548:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800154a:	f107 0320 	add.w	r3, r7, #32
 800154e:	4619      	mov	r1, r3
 8001550:	4816      	ldr	r0, [pc, #88]	@ (80015ac <MX_TIM3_Init+0xfc>)
 8001552:	f002 fef9 	bl	8004348 <HAL_TIMEx_MasterConfigSynchronization>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800155c:	f7ff fdb2 	bl	80010c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001560:	2360      	movs	r3, #96	@ 0x60
 8001562:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001568:	2300      	movs	r3, #0
 800156a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	2200      	movs	r2, #0
 8001574:	4619      	mov	r1, r3
 8001576:	480d      	ldr	r0, [pc, #52]	@ (80015ac <MX_TIM3_Init+0xfc>)
 8001578:	f002 fa84 	bl	8003a84 <HAL_TIM_PWM_ConfigChannel>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001582:	f7ff fd9f 	bl	80010c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	2204      	movs	r2, #4
 800158a:	4619      	mov	r1, r3
 800158c:	4807      	ldr	r0, [pc, #28]	@ (80015ac <MX_TIM3_Init+0xfc>)
 800158e:	f002 fa79 	bl	8003a84 <HAL_TIM_PWM_ConfigChannel>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001598:	f7ff fd94 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800159c:	4803      	ldr	r0, [pc, #12]	@ (80015ac <MX_TIM3_Init+0xfc>)
 800159e:	f000 f83f 	bl	8001620 <HAL_TIM_MspPostInit>

}
 80015a2:	bf00      	nop
 80015a4:	3738      	adds	r7, #56	@ 0x38
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000358 	.word	0x20000358
 80015b0:	40000400 	.word	0x40000400

080015b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015c4:	d10e      	bne.n	80015e4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	4b13      	ldr	r3, [pc, #76]	@ (8001618 <HAL_TIM_Base_MspInit+0x64>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ce:	4a12      	ldr	r2, [pc, #72]	@ (8001618 <HAL_TIM_Base_MspInit+0x64>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015d6:	4b10      	ldr	r3, [pc, #64]	@ (8001618 <HAL_TIM_Base_MspInit+0x64>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80015e2:	e012      	b.n	800160a <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM3)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a0c      	ldr	r2, [pc, #48]	@ (800161c <HAL_TIM_Base_MspInit+0x68>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d10d      	bne.n	800160a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	60bb      	str	r3, [r7, #8]
 80015f2:	4b09      	ldr	r3, [pc, #36]	@ (8001618 <HAL_TIM_Base_MspInit+0x64>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f6:	4a08      	ldr	r2, [pc, #32]	@ (8001618 <HAL_TIM_Base_MspInit+0x64>)
 80015f8:	f043 0302 	orr.w	r3, r3, #2
 80015fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80015fe:	4b06      	ldr	r3, [pc, #24]	@ (8001618 <HAL_TIM_Base_MspInit+0x64>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	68bb      	ldr	r3, [r7, #8]
}
 800160a:	bf00      	nop
 800160c:	3714      	adds	r7, #20
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	40023800 	.word	0x40023800
 800161c:	40000400 	.word	0x40000400

08001620 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08a      	sub	sp, #40	@ 0x28
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001628:	f107 0314 	add.w	r3, r7, #20
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001640:	d11f      	bne.n	8001682 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	613b      	str	r3, [r7, #16]
 8001646:	4b22      	ldr	r3, [pc, #136]	@ (80016d0 <HAL_TIM_MspPostInit+0xb0>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164a:	4a21      	ldr	r2, [pc, #132]	@ (80016d0 <HAL_TIM_MspPostInit+0xb0>)
 800164c:	f043 0302 	orr.w	r3, r3, #2
 8001650:	6313      	str	r3, [r2, #48]	@ 0x30
 8001652:	4b1f      	ldr	r3, [pc, #124]	@ (80016d0 <HAL_TIM_MspPostInit+0xb0>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	613b      	str	r3, [r7, #16]
 800165c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = Rudder_Pin|Throttle_Pin;
 800165e:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 8001662:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001664:	2302      	movs	r3, #2
 8001666:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001668:	2300      	movs	r3, #0
 800166a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166c:	2300      	movs	r3, #0
 800166e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001670:	2301      	movs	r3, #1
 8001672:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	4619      	mov	r1, r3
 800167a:	4816      	ldr	r0, [pc, #88]	@ (80016d4 <HAL_TIM_MspPostInit+0xb4>)
 800167c:	f001 fab4 	bl	8002be8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001680:	e022      	b.n	80016c8 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM3)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a14      	ldr	r2, [pc, #80]	@ (80016d8 <HAL_TIM_MspPostInit+0xb8>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d11d      	bne.n	80016c8 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800168c:	2300      	movs	r3, #0
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	4b0f      	ldr	r3, [pc, #60]	@ (80016d0 <HAL_TIM_MspPostInit+0xb0>)
 8001692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001694:	4a0e      	ldr	r2, [pc, #56]	@ (80016d0 <HAL_TIM_MspPostInit+0xb0>)
 8001696:	f043 0302 	orr.w	r3, r3, #2
 800169a:	6313      	str	r3, [r2, #48]	@ 0x30
 800169c:	4b0c      	ldr	r3, [pc, #48]	@ (80016d0 <HAL_TIM_MspPostInit+0xb0>)
 800169e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Elevator_Pin|Aileron_Pin;
 80016a8:	2330      	movs	r3, #48	@ 0x30
 80016aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ac:	2302      	movs	r3, #2
 80016ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b4:	2300      	movs	r3, #0
 80016b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016b8:	2302      	movs	r3, #2
 80016ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	4619      	mov	r1, r3
 80016c2:	4804      	ldr	r0, [pc, #16]	@ (80016d4 <HAL_TIM_MspPostInit+0xb4>)
 80016c4:	f001 fa90 	bl	8002be8 <HAL_GPIO_Init>
}
 80016c8:	bf00      	nop
 80016ca:	3728      	adds	r7, #40	@ 0x28
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40023800 	.word	0x40023800
 80016d4:	40020400 	.word	0x40020400
 80016d8:	40000400 	.word	0x40000400

080016dc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016e0:	4b10      	ldr	r3, [pc, #64]	@ (8001724 <MX_USART1_UART_Init+0x48>)
 80016e2:	4a11      	ldr	r2, [pc, #68]	@ (8001728 <MX_USART1_UART_Init+0x4c>)
 80016e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 420000;
 80016e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001724 <MX_USART1_UART_Init+0x48>)
 80016e8:	4a10      	ldr	r2, [pc, #64]	@ (800172c <MX_USART1_UART_Init+0x50>)
 80016ea:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001724 <MX_USART1_UART_Init+0x48>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001724 <MX_USART1_UART_Init+0x48>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001724 <MX_USART1_UART_Init+0x48>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016fe:	4b09      	ldr	r3, [pc, #36]	@ (8001724 <MX_USART1_UART_Init+0x48>)
 8001700:	220c      	movs	r2, #12
 8001702:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001704:	4b07      	ldr	r3, [pc, #28]	@ (8001724 <MX_USART1_UART_Init+0x48>)
 8001706:	2200      	movs	r2, #0
 8001708:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800170a:	4b06      	ldr	r3, [pc, #24]	@ (8001724 <MX_USART1_UART_Init+0x48>)
 800170c:	2200      	movs	r2, #0
 800170e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001710:	4804      	ldr	r0, [pc, #16]	@ (8001724 <MX_USART1_UART_Init+0x48>)
 8001712:	f002 fe87 	bl	8004424 <HAL_UART_Init>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 800171c:	f7ff fcd2 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}
 8001724:	200003a0 	.word	0x200003a0
 8001728:	40011000 	.word	0x40011000
 800172c:	000668a0 	.word	0x000668a0

08001730 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b08a      	sub	sp, #40	@ 0x28
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001738:	f107 0314 	add.w	r3, r7, #20
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]
 8001746:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a4e      	ldr	r2, [pc, #312]	@ (8001888 <HAL_UART_MspInit+0x158>)
 800174e:	4293      	cmp	r3, r2
 8001750:	f040 8095 	bne.w	800187e <HAL_UART_MspInit+0x14e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001754:	2300      	movs	r3, #0
 8001756:	613b      	str	r3, [r7, #16]
 8001758:	4b4c      	ldr	r3, [pc, #304]	@ (800188c <HAL_UART_MspInit+0x15c>)
 800175a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800175c:	4a4b      	ldr	r2, [pc, #300]	@ (800188c <HAL_UART_MspInit+0x15c>)
 800175e:	f043 0310 	orr.w	r3, r3, #16
 8001762:	6453      	str	r3, [r2, #68]	@ 0x44
 8001764:	4b49      	ldr	r3, [pc, #292]	@ (800188c <HAL_UART_MspInit+0x15c>)
 8001766:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001768:	f003 0310 	and.w	r3, r3, #16
 800176c:	613b      	str	r3, [r7, #16]
 800176e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001770:	2300      	movs	r3, #0
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	4b45      	ldr	r3, [pc, #276]	@ (800188c <HAL_UART_MspInit+0x15c>)
 8001776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001778:	4a44      	ldr	r2, [pc, #272]	@ (800188c <HAL_UART_MspInit+0x15c>)
 800177a:	f043 0301 	orr.w	r3, r3, #1
 800177e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001780:	4b42      	ldr	r3, [pc, #264]	@ (800188c <HAL_UART_MspInit+0x15c>)
 8001782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001784:	f003 0301 	and.w	r3, r3, #1
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800178c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001790:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001792:	2302      	movs	r3, #2
 8001794:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800179a:	2303      	movs	r3, #3
 800179c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800179e:	2307      	movs	r3, #7
 80017a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a2:	f107 0314 	add.w	r3, r7, #20
 80017a6:	4619      	mov	r1, r3
 80017a8:	4839      	ldr	r0, [pc, #228]	@ (8001890 <HAL_UART_MspInit+0x160>)
 80017aa:	f001 fa1d 	bl	8002be8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80017ae:	4b39      	ldr	r3, [pc, #228]	@ (8001894 <HAL_UART_MspInit+0x164>)
 80017b0:	4a39      	ldr	r2, [pc, #228]	@ (8001898 <HAL_UART_MspInit+0x168>)
 80017b2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80017b4:	4b37      	ldr	r3, [pc, #220]	@ (8001894 <HAL_UART_MspInit+0x164>)
 80017b6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80017ba:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017bc:	4b35      	ldr	r3, [pc, #212]	@ (8001894 <HAL_UART_MspInit+0x164>)
 80017be:	2200      	movs	r2, #0
 80017c0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017c2:	4b34      	ldr	r3, [pc, #208]	@ (8001894 <HAL_UART_MspInit+0x164>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017c8:	4b32      	ldr	r3, [pc, #200]	@ (8001894 <HAL_UART_MspInit+0x164>)
 80017ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017ce:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017d0:	4b30      	ldr	r3, [pc, #192]	@ (8001894 <HAL_UART_MspInit+0x164>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001894 <HAL_UART_MspInit+0x164>)
 80017d8:	2200      	movs	r2, #0
 80017da:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80017dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001894 <HAL_UART_MspInit+0x164>)
 80017de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017e2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80017e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001894 <HAL_UART_MspInit+0x164>)
 80017e6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80017ea:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017ec:	4b29      	ldr	r3, [pc, #164]	@ (8001894 <HAL_UART_MspInit+0x164>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80017f2:	4828      	ldr	r0, [pc, #160]	@ (8001894 <HAL_UART_MspInit+0x164>)
 80017f4:	f000 fdf6 	bl	80023e4 <HAL_DMA_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 80017fe:	f7ff fc61 	bl	80010c4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a23      	ldr	r2, [pc, #140]	@ (8001894 <HAL_UART_MspInit+0x164>)
 8001806:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001808:	4a22      	ldr	r2, [pc, #136]	@ (8001894 <HAL_UART_MspInit+0x164>)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800180e:	4b23      	ldr	r3, [pc, #140]	@ (800189c <HAL_UART_MspInit+0x16c>)
 8001810:	4a23      	ldr	r2, [pc, #140]	@ (80018a0 <HAL_UART_MspInit+0x170>)
 8001812:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001814:	4b21      	ldr	r3, [pc, #132]	@ (800189c <HAL_UART_MspInit+0x16c>)
 8001816:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800181a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800181c:	4b1f      	ldr	r3, [pc, #124]	@ (800189c <HAL_UART_MspInit+0x16c>)
 800181e:	2240      	movs	r2, #64	@ 0x40
 8001820:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001822:	4b1e      	ldr	r3, [pc, #120]	@ (800189c <HAL_UART_MspInit+0x16c>)
 8001824:	2200      	movs	r2, #0
 8001826:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001828:	4b1c      	ldr	r3, [pc, #112]	@ (800189c <HAL_UART_MspInit+0x16c>)
 800182a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800182e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001830:	4b1a      	ldr	r3, [pc, #104]	@ (800189c <HAL_UART_MspInit+0x16c>)
 8001832:	2200      	movs	r2, #0
 8001834:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001836:	4b19      	ldr	r3, [pc, #100]	@ (800189c <HAL_UART_MspInit+0x16c>)
 8001838:	2200      	movs	r2, #0
 800183a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 800183c:	4b17      	ldr	r3, [pc, #92]	@ (800189c <HAL_UART_MspInit+0x16c>)
 800183e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001842:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001844:	4b15      	ldr	r3, [pc, #84]	@ (800189c <HAL_UART_MspInit+0x16c>)
 8001846:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800184a:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800184c:	4b13      	ldr	r3, [pc, #76]	@ (800189c <HAL_UART_MspInit+0x16c>)
 800184e:	2200      	movs	r2, #0
 8001850:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001852:	4812      	ldr	r0, [pc, #72]	@ (800189c <HAL_UART_MspInit+0x16c>)
 8001854:	f000 fdc6 	bl	80023e4 <HAL_DMA_Init>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <HAL_UART_MspInit+0x132>
    {
      Error_Handler();
 800185e:	f7ff fc31 	bl	80010c4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a0d      	ldr	r2, [pc, #52]	@ (800189c <HAL_UART_MspInit+0x16c>)
 8001866:	639a      	str	r2, [r3, #56]	@ 0x38
 8001868:	4a0c      	ldr	r2, [pc, #48]	@ (800189c <HAL_UART_MspInit+0x16c>)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800186e:	2200      	movs	r2, #0
 8001870:	2100      	movs	r1, #0
 8001872:	2025      	movs	r0, #37	@ 0x25
 8001874:	f000 fd7f 	bl	8002376 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001878:	2025      	movs	r0, #37	@ 0x25
 800187a:	f000 fd98 	bl	80023ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800187e:	bf00      	nop
 8001880:	3728      	adds	r7, #40	@ 0x28
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40011000 	.word	0x40011000
 800188c:	40023800 	.word	0x40023800
 8001890:	40020000 	.word	0x40020000
 8001894:	200003e8 	.word	0x200003e8
 8001898:	40026440 	.word	0x40026440
 800189c:	20000448 	.word	0x20000448
 80018a0:	400264b8 	.word	0x400264b8

080018a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80018a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018a8:	f7ff fd70 	bl	800138c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018ac:	480c      	ldr	r0, [pc, #48]	@ (80018e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018ae:	490d      	ldr	r1, [pc, #52]	@ (80018e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018b0:	4a0d      	ldr	r2, [pc, #52]	@ (80018e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018b4:	e002      	b.n	80018bc <LoopCopyDataInit>

080018b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ba:	3304      	adds	r3, #4

080018bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018c0:	d3f9      	bcc.n	80018b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018c2:	4a0a      	ldr	r2, [pc, #40]	@ (80018ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018c4:	4c0a      	ldr	r4, [pc, #40]	@ (80018f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018c8:	e001      	b.n	80018ce <LoopFillZerobss>

080018ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018cc:	3204      	adds	r2, #4

080018ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018d0:	d3fb      	bcc.n	80018ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018d2:	f003 fed7 	bl	8005684 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018d6:	f7ff fb19 	bl	8000f0c <main>
  bx  lr    
 80018da:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80018dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018e4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80018e8:	08005730 	.word	0x08005730
  ldr r2, =_sbss
 80018ec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80018f0:	200004ac 	.word	0x200004ac

080018f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018f4:	e7fe      	b.n	80018f4 <ADC_IRQHandler>
	...

080018f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001938 <HAL_Init+0x40>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a0d      	ldr	r2, [pc, #52]	@ (8001938 <HAL_Init+0x40>)
 8001902:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001906:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001908:	4b0b      	ldr	r3, [pc, #44]	@ (8001938 <HAL_Init+0x40>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a0a      	ldr	r2, [pc, #40]	@ (8001938 <HAL_Init+0x40>)
 800190e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001912:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001914:	4b08      	ldr	r3, [pc, #32]	@ (8001938 <HAL_Init+0x40>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a07      	ldr	r2, [pc, #28]	@ (8001938 <HAL_Init+0x40>)
 800191a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800191e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001920:	2003      	movs	r0, #3
 8001922:	f000 fd1d 	bl	8002360 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001926:	200f      	movs	r0, #15
 8001928:	f000 f808 	bl	800193c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800192c:	f7ff fc9e 	bl	800126c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40023c00 	.word	0x40023c00

0800193c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001944:	4b12      	ldr	r3, [pc, #72]	@ (8001990 <HAL_InitTick+0x54>)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	4b12      	ldr	r3, [pc, #72]	@ (8001994 <HAL_InitTick+0x58>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	4619      	mov	r1, r3
 800194e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001952:	fbb3 f3f1 	udiv	r3, r3, r1
 8001956:	fbb2 f3f3 	udiv	r3, r2, r3
 800195a:	4618      	mov	r0, r3
 800195c:	f000 fd35 	bl	80023ca <HAL_SYSTICK_Config>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e00e      	b.n	8001988 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b0f      	cmp	r3, #15
 800196e:	d80a      	bhi.n	8001986 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001970:	2200      	movs	r2, #0
 8001972:	6879      	ldr	r1, [r7, #4]
 8001974:	f04f 30ff 	mov.w	r0, #4294967295
 8001978:	f000 fcfd 	bl	8002376 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800197c:	4a06      	ldr	r2, [pc, #24]	@ (8001998 <HAL_InitTick+0x5c>)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001982:	2300      	movs	r3, #0
 8001984:	e000      	b.n	8001988 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
}
 8001988:	4618      	mov	r0, r3
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20000000 	.word	0x20000000
 8001994:	20000008 	.word	0x20000008
 8001998:	20000004 	.word	0x20000004

0800199c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019a0:	4b06      	ldr	r3, [pc, #24]	@ (80019bc <HAL_IncTick+0x20>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	461a      	mov	r2, r3
 80019a6:	4b06      	ldr	r3, [pc, #24]	@ (80019c0 <HAL_IncTick+0x24>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4413      	add	r3, r2
 80019ac:	4a04      	ldr	r2, [pc, #16]	@ (80019c0 <HAL_IncTick+0x24>)
 80019ae:	6013      	str	r3, [r2, #0]
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	20000008 	.word	0x20000008
 80019c0:	200004a8 	.word	0x200004a8

080019c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  return uwTick;
 80019c8:	4b03      	ldr	r3, [pc, #12]	@ (80019d8 <HAL_GetTick+0x14>)
 80019ca:	681b      	ldr	r3, [r3, #0]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	200004a8 	.word	0x200004a8

080019dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019e4:	2300      	movs	r3, #0
 80019e6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e033      	b.n	8001a5a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d109      	bne.n	8001a0e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7fe fdd4 	bl	80005a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a12:	f003 0310 	and.w	r3, r3, #16
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d118      	bne.n	8001a4c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a22:	f023 0302 	bic.w	r3, r3, #2
 8001a26:	f043 0202 	orr.w	r2, r3, #2
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 faca 	bl	8001fc8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3e:	f023 0303 	bic.w	r3, r3, #3
 8001a42:	f043 0201 	orr.w	r2, r3, #1
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a4a:	e001      	b.n	8001a50 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
	...

08001a64 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d101      	bne.n	8001a7e <HAL_ADC_Start+0x1a>
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	e097      	b.n	8001bae <HAL_ADC_Start+0x14a>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2201      	movs	r2, #1
 8001a82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d018      	beq.n	8001ac6 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	689a      	ldr	r2, [r3, #8]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f042 0201 	orr.w	r2, r2, #1
 8001aa2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001aa4:	4b45      	ldr	r3, [pc, #276]	@ (8001bbc <HAL_ADC_Start+0x158>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a45      	ldr	r2, [pc, #276]	@ (8001bc0 <HAL_ADC_Start+0x15c>)
 8001aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8001aae:	0c9a      	lsrs	r2, r3, #18
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	4413      	add	r3, r2
 8001ab6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001ab8:	e002      	b.n	8001ac0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	3b01      	subs	r3, #1
 8001abe:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1f9      	bne.n	8001aba <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d15f      	bne.n	8001b94 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001adc:	f023 0301 	bic.w	r3, r3, #1
 8001ae0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d007      	beq.n	8001b06 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001afe:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b12:	d106      	bne.n	8001b22 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b18:	f023 0206 	bic.w	r2, r3, #6
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	645a      	str	r2, [r3, #68]	@ 0x44
 8001b20:	e002      	b.n	8001b28 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b30:	4b24      	ldr	r3, [pc, #144]	@ (8001bc4 <HAL_ADC_Start+0x160>)
 8001b32:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001b3c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f003 031f 	and.w	r3, r3, #31
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d10f      	bne.n	8001b6a <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d129      	bne.n	8001bac <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	689a      	ldr	r2, [r3, #8]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	e020      	b.n	8001bac <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a16      	ldr	r2, [pc, #88]	@ (8001bc8 <HAL_ADC_Start+0x164>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d11b      	bne.n	8001bac <HAL_ADC_Start+0x148>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d114      	bne.n	8001bac <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001b90:	609a      	str	r2, [r3, #8]
 8001b92:	e00b      	b.n	8001bac <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b98:	f043 0210 	orr.w	r2, r3, #16
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba4:	f043 0201 	orr.w	r2, r3, #1
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3714      	adds	r7, #20
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	20000000 	.word	0x20000000
 8001bc0:	431bde83 	.word	0x431bde83
 8001bc4:	40012300 	.word	0x40012300
 8001bc8:	40012000 	.word	0x40012000

08001bcc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d101      	bne.n	8001be2 <HAL_ADC_Stop+0x16>
 8001bde:	2302      	movs	r3, #2
 8001be0:	e021      	b.n	8001c26 <HAL_ADC_Stop+0x5a>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2201      	movs	r2, #1
 8001be6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 0201 	bic.w	r2, r2, #1
 8001bf8:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d109      	bne.n	8001c1c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001c10:	f023 0301 	bic.w	r3, r3, #1
 8001c14:	f043 0201 	orr.w	r2, r3, #1
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b084      	sub	sp, #16
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
 8001c3a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c4e:	d113      	bne.n	8001c78 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c5e:	d10b      	bne.n	8001c78 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c64:	f043 0220 	orr.w	r2, r3, #32
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e063      	b.n	8001d40 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c78:	f7ff fea4 	bl	80019c4 <HAL_GetTick>
 8001c7c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c7e:	e021      	b.n	8001cc4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c86:	d01d      	beq.n	8001cc4 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d007      	beq.n	8001c9e <HAL_ADC_PollForConversion+0x6c>
 8001c8e:	f7ff fe99 	bl	80019c4 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d212      	bcs.n	8001cc4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d00b      	beq.n	8001cc4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb0:	f043 0204 	orr.w	r2, r3, #4
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e03d      	b.n	8001d40 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d1d6      	bne.n	8001c80 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f06f 0212 	mvn.w	r2, #18
 8001cda:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d123      	bne.n	8001d3e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d11f      	bne.n	8001d3e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d04:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d006      	beq.n	8001d1a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d111      	bne.n	8001d3e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d105      	bne.n	8001d3e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d36:	f043 0201 	orr.w	r2, r3, #1
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3710      	adds	r7, #16
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
	...

08001d64 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d101      	bne.n	8001d80 <HAL_ADC_ConfigChannel+0x1c>
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	e113      	b.n	8001fa8 <HAL_ADC_ConfigChannel+0x244>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2b09      	cmp	r3, #9
 8001d8e:	d925      	bls.n	8001ddc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68d9      	ldr	r1, [r3, #12]
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	4613      	mov	r3, r2
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	4413      	add	r3, r2
 8001da4:	3b1e      	subs	r3, #30
 8001da6:	2207      	movs	r2, #7
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43da      	mvns	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	400a      	ands	r2, r1
 8001db4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68d9      	ldr	r1, [r3, #12]
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	689a      	ldr	r2, [r3, #8]
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	4603      	mov	r3, r0
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	4403      	add	r3, r0
 8001dce:	3b1e      	subs	r3, #30
 8001dd0:	409a      	lsls	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	60da      	str	r2, [r3, #12]
 8001dda:	e022      	b.n	8001e22 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6919      	ldr	r1, [r3, #16]
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	461a      	mov	r2, r3
 8001dea:	4613      	mov	r3, r2
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	4413      	add	r3, r2
 8001df0:	2207      	movs	r2, #7
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	43da      	mvns	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	400a      	ands	r2, r1
 8001dfe:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6919      	ldr	r1, [r3, #16]
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	689a      	ldr	r2, [r3, #8]
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	4618      	mov	r0, r3
 8001e12:	4603      	mov	r3, r0
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	4403      	add	r3, r0
 8001e18:	409a      	lsls	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b06      	cmp	r3, #6
 8001e28:	d824      	bhi.n	8001e74 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	4613      	mov	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4413      	add	r3, r2
 8001e3a:	3b05      	subs	r3, #5
 8001e3c:	221f      	movs	r2, #31
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	43da      	mvns	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	400a      	ands	r2, r1
 8001e4a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	4618      	mov	r0, r3
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685a      	ldr	r2, [r3, #4]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4413      	add	r3, r2
 8001e64:	3b05      	subs	r3, #5
 8001e66:	fa00 f203 	lsl.w	r2, r0, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e72:	e04c      	b.n	8001f0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	2b0c      	cmp	r3, #12
 8001e7a:	d824      	bhi.n	8001ec6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685a      	ldr	r2, [r3, #4]
 8001e86:	4613      	mov	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	4413      	add	r3, r2
 8001e8c:	3b23      	subs	r3, #35	@ 0x23
 8001e8e:	221f      	movs	r2, #31
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43da      	mvns	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	400a      	ands	r2, r1
 8001e9c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	4618      	mov	r0, r3
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685a      	ldr	r2, [r3, #4]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4413      	add	r3, r2
 8001eb6:	3b23      	subs	r3, #35	@ 0x23
 8001eb8:	fa00 f203 	lsl.w	r2, r0, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ec4:	e023      	b.n	8001f0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	4413      	add	r3, r2
 8001ed6:	3b41      	subs	r3, #65	@ 0x41
 8001ed8:	221f      	movs	r2, #31
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43da      	mvns	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	400a      	ands	r2, r1
 8001ee6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685a      	ldr	r2, [r3, #4]
 8001efa:	4613      	mov	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	3b41      	subs	r3, #65	@ 0x41
 8001f02:	fa00 f203 	lsl.w	r2, r0, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f0e:	4b29      	ldr	r3, [pc, #164]	@ (8001fb4 <HAL_ADC_ConfigChannel+0x250>)
 8001f10:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a28      	ldr	r2, [pc, #160]	@ (8001fb8 <HAL_ADC_ConfigChannel+0x254>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d10f      	bne.n	8001f3c <HAL_ADC_ConfigChannel+0x1d8>
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2b12      	cmp	r3, #18
 8001f22:	d10b      	bne.n	8001f3c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a1d      	ldr	r2, [pc, #116]	@ (8001fb8 <HAL_ADC_ConfigChannel+0x254>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d12b      	bne.n	8001f9e <HAL_ADC_ConfigChannel+0x23a>
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a1c      	ldr	r2, [pc, #112]	@ (8001fbc <HAL_ADC_ConfigChannel+0x258>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d003      	beq.n	8001f58 <HAL_ADC_ConfigChannel+0x1f4>
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2b11      	cmp	r3, #17
 8001f56:	d122      	bne.n	8001f9e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a11      	ldr	r2, [pc, #68]	@ (8001fbc <HAL_ADC_ConfigChannel+0x258>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d111      	bne.n	8001f9e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f7a:	4b11      	ldr	r3, [pc, #68]	@ (8001fc0 <HAL_ADC_ConfigChannel+0x25c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a11      	ldr	r2, [pc, #68]	@ (8001fc4 <HAL_ADC_ConfigChannel+0x260>)
 8001f80:	fba2 2303 	umull	r2, r3, r2, r3
 8001f84:	0c9a      	lsrs	r2, r3, #18
 8001f86:	4613      	mov	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4413      	add	r3, r2
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001f90:	e002      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	3b01      	subs	r3, #1
 8001f96:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f9      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3714      	adds	r7, #20
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	40012300 	.word	0x40012300
 8001fb8:	40012000 	.word	0x40012000
 8001fbc:	10000012 	.word	0x10000012
 8001fc0:	20000000 	.word	0x20000000
 8001fc4:	431bde83 	.word	0x431bde83

08001fc8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fd0:	4b79      	ldr	r3, [pc, #484]	@ (80021b8 <ADC_Init+0x1f0>)
 8001fd2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ffc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	6859      	ldr	r1, [r3, #4]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	021a      	lsls	r2, r3, #8
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	430a      	orrs	r2, r1
 8002010:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002020:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6859      	ldr	r1, [r3, #4]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	430a      	orrs	r2, r1
 8002032:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	689a      	ldr	r2, [r3, #8]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002042:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6899      	ldr	r1, [r3, #8]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	68da      	ldr	r2, [r3, #12]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	430a      	orrs	r2, r1
 8002054:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800205a:	4a58      	ldr	r2, [pc, #352]	@ (80021bc <ADC_Init+0x1f4>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d022      	beq.n	80020a6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800206e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6899      	ldr	r1, [r3, #8]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	430a      	orrs	r2, r1
 8002080:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002090:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6899      	ldr	r1, [r3, #8]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	430a      	orrs	r2, r1
 80020a2:	609a      	str	r2, [r3, #8]
 80020a4:	e00f      	b.n	80020c6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80020b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80020c4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 0202 	bic.w	r2, r2, #2
 80020d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6899      	ldr	r1, [r3, #8]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	7e1b      	ldrb	r3, [r3, #24]
 80020e0:	005a      	lsls	r2, r3, #1
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	430a      	orrs	r2, r1
 80020e8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d01b      	beq.n	800212c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	685a      	ldr	r2, [r3, #4]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002102:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	685a      	ldr	r2, [r3, #4]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002112:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6859      	ldr	r1, [r3, #4]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800211e:	3b01      	subs	r3, #1
 8002120:	035a      	lsls	r2, r3, #13
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	430a      	orrs	r2, r1
 8002128:	605a      	str	r2, [r3, #4]
 800212a:	e007      	b.n	800213c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800213a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800214a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	3b01      	subs	r3, #1
 8002158:	051a      	lsls	r2, r3, #20
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	430a      	orrs	r2, r1
 8002160:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002170:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6899      	ldr	r1, [r3, #8]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800217e:	025a      	lsls	r2, r3, #9
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	430a      	orrs	r2, r1
 8002186:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	689a      	ldr	r2, [r3, #8]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002196:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6899      	ldr	r1, [r3, #8]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	029a      	lsls	r2, r3, #10
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	430a      	orrs	r2, r1
 80021aa:	609a      	str	r2, [r3, #8]
}
 80021ac:	bf00      	nop
 80021ae:	3714      	adds	r7, #20
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	40012300 	.word	0x40012300
 80021bc:	0f000001 	.word	0x0f000001

080021c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f003 0307 	and.w	r3, r3, #7
 80021ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002204 <__NVIC_SetPriorityGrouping+0x44>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021d6:	68ba      	ldr	r2, [r7, #8]
 80021d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021dc:	4013      	ands	r3, r2
 80021de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021f2:	4a04      	ldr	r2, [pc, #16]	@ (8002204 <__NVIC_SetPriorityGrouping+0x44>)
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	60d3      	str	r3, [r2, #12]
}
 80021f8:	bf00      	nop
 80021fa:	3714      	adds	r7, #20
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	e000ed00 	.word	0xe000ed00

08002208 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800220c:	4b04      	ldr	r3, [pc, #16]	@ (8002220 <__NVIC_GetPriorityGrouping+0x18>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	0a1b      	lsrs	r3, r3, #8
 8002212:	f003 0307 	and.w	r3, r3, #7
}
 8002216:	4618      	mov	r0, r3
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	e000ed00 	.word	0xe000ed00

08002224 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800222e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002232:	2b00      	cmp	r3, #0
 8002234:	db0b      	blt.n	800224e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002236:	79fb      	ldrb	r3, [r7, #7]
 8002238:	f003 021f 	and.w	r2, r3, #31
 800223c:	4907      	ldr	r1, [pc, #28]	@ (800225c <__NVIC_EnableIRQ+0x38>)
 800223e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002242:	095b      	lsrs	r3, r3, #5
 8002244:	2001      	movs	r0, #1
 8002246:	fa00 f202 	lsl.w	r2, r0, r2
 800224a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800224e:	bf00      	nop
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	e000e100 	.word	0xe000e100

08002260 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	6039      	str	r1, [r7, #0]
 800226a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800226c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002270:	2b00      	cmp	r3, #0
 8002272:	db0a      	blt.n	800228a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	b2da      	uxtb	r2, r3
 8002278:	490c      	ldr	r1, [pc, #48]	@ (80022ac <__NVIC_SetPriority+0x4c>)
 800227a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227e:	0112      	lsls	r2, r2, #4
 8002280:	b2d2      	uxtb	r2, r2
 8002282:	440b      	add	r3, r1
 8002284:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002288:	e00a      	b.n	80022a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	b2da      	uxtb	r2, r3
 800228e:	4908      	ldr	r1, [pc, #32]	@ (80022b0 <__NVIC_SetPriority+0x50>)
 8002290:	79fb      	ldrb	r3, [r7, #7]
 8002292:	f003 030f 	and.w	r3, r3, #15
 8002296:	3b04      	subs	r3, #4
 8002298:	0112      	lsls	r2, r2, #4
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	440b      	add	r3, r1
 800229e:	761a      	strb	r2, [r3, #24]
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	e000e100 	.word	0xe000e100
 80022b0:	e000ed00 	.word	0xe000ed00

080022b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b089      	sub	sp, #36	@ 0x24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	f1c3 0307 	rsb	r3, r3, #7
 80022ce:	2b04      	cmp	r3, #4
 80022d0:	bf28      	it	cs
 80022d2:	2304      	movcs	r3, #4
 80022d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	3304      	adds	r3, #4
 80022da:	2b06      	cmp	r3, #6
 80022dc:	d902      	bls.n	80022e4 <NVIC_EncodePriority+0x30>
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	3b03      	subs	r3, #3
 80022e2:	e000      	b.n	80022e6 <NVIC_EncodePriority+0x32>
 80022e4:	2300      	movs	r3, #0
 80022e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e8:	f04f 32ff 	mov.w	r2, #4294967295
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43da      	mvns	r2, r3
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	401a      	ands	r2, r3
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	fa01 f303 	lsl.w	r3, r1, r3
 8002306:	43d9      	mvns	r1, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800230c:	4313      	orrs	r3, r2
         );
}
 800230e:	4618      	mov	r0, r3
 8002310:	3724      	adds	r7, #36	@ 0x24
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
	...

0800231c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3b01      	subs	r3, #1
 8002328:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800232c:	d301      	bcc.n	8002332 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800232e:	2301      	movs	r3, #1
 8002330:	e00f      	b.n	8002352 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002332:	4a0a      	ldr	r2, [pc, #40]	@ (800235c <SysTick_Config+0x40>)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3b01      	subs	r3, #1
 8002338:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800233a:	210f      	movs	r1, #15
 800233c:	f04f 30ff 	mov.w	r0, #4294967295
 8002340:	f7ff ff8e 	bl	8002260 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002344:	4b05      	ldr	r3, [pc, #20]	@ (800235c <SysTick_Config+0x40>)
 8002346:	2200      	movs	r2, #0
 8002348:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800234a:	4b04      	ldr	r3, [pc, #16]	@ (800235c <SysTick_Config+0x40>)
 800234c:	2207      	movs	r2, #7
 800234e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	e000e010 	.word	0xe000e010

08002360 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f7ff ff29 	bl	80021c0 <__NVIC_SetPriorityGrouping>
}
 800236e:	bf00      	nop
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002376:	b580      	push	{r7, lr}
 8002378:	b086      	sub	sp, #24
 800237a:	af00      	add	r7, sp, #0
 800237c:	4603      	mov	r3, r0
 800237e:	60b9      	str	r1, [r7, #8]
 8002380:	607a      	str	r2, [r7, #4]
 8002382:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002388:	f7ff ff3e 	bl	8002208 <__NVIC_GetPriorityGrouping>
 800238c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	68b9      	ldr	r1, [r7, #8]
 8002392:	6978      	ldr	r0, [r7, #20]
 8002394:	f7ff ff8e 	bl	80022b4 <NVIC_EncodePriority>
 8002398:	4602      	mov	r2, r0
 800239a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800239e:	4611      	mov	r1, r2
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff ff5d 	bl	8002260 <__NVIC_SetPriority>
}
 80023a6:	bf00      	nop
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b082      	sub	sp, #8
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	4603      	mov	r3, r0
 80023b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff ff31 	bl	8002224 <__NVIC_EnableIRQ>
}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b082      	sub	sp, #8
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7ff ffa2 	bl	800231c <SysTick_Config>
 80023d8:	4603      	mov	r3, r0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
	...

080023e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023ec:	2300      	movs	r3, #0
 80023ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80023f0:	f7ff fae8 	bl	80019c4 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d101      	bne.n	8002400 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e099      	b.n	8002534 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2202      	movs	r2, #2
 8002404:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f022 0201 	bic.w	r2, r2, #1
 800241e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002420:	e00f      	b.n	8002442 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002422:	f7ff facf 	bl	80019c4 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b05      	cmp	r3, #5
 800242e:	d908      	bls.n	8002442 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2220      	movs	r2, #32
 8002434:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2203      	movs	r2, #3
 800243a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e078      	b.n	8002534 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1e8      	bne.n	8002422 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002458:	697a      	ldr	r2, [r7, #20]
 800245a:	4b38      	ldr	r3, [pc, #224]	@ (800253c <HAL_DMA_Init+0x158>)
 800245c:	4013      	ands	r3, r2
 800245e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800246e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800247a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002486:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	4313      	orrs	r3, r2
 8002492:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002498:	2b04      	cmp	r3, #4
 800249a:	d107      	bne.n	80024ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a4:	4313      	orrs	r3, r2
 80024a6:	697a      	ldr	r2, [r7, #20]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	f023 0307 	bic.w	r3, r3, #7
 80024c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d2:	2b04      	cmp	r3, #4
 80024d4:	d117      	bne.n	8002506 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	4313      	orrs	r3, r2
 80024de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d00e      	beq.n	8002506 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f000 fb01 	bl	8002af0 <DMA_CheckFifoParam>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d008      	beq.n	8002506 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2240      	movs	r2, #64	@ 0x40
 80024f8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002502:	2301      	movs	r3, #1
 8002504:	e016      	b.n	8002534 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 fab8 	bl	8002a84 <DMA_CalcBaseAndBitshift>
 8002514:	4603      	mov	r3, r0
 8002516:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800251c:	223f      	movs	r2, #63	@ 0x3f
 800251e:	409a      	lsls	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3718      	adds	r7, #24
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	f010803f 	.word	0xf010803f

08002540 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	607a      	str	r2, [r7, #4]
 800254c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800254e:	2300      	movs	r3, #0
 8002550:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002556:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800255e:	2b01      	cmp	r3, #1
 8002560:	d101      	bne.n	8002566 <HAL_DMA_Start_IT+0x26>
 8002562:	2302      	movs	r3, #2
 8002564:	e040      	b.n	80025e8 <HAL_DMA_Start_IT+0xa8>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2201      	movs	r2, #1
 800256a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b01      	cmp	r3, #1
 8002578:	d12f      	bne.n	80025da <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2202      	movs	r2, #2
 800257e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	68b9      	ldr	r1, [r7, #8]
 800258e:	68f8      	ldr	r0, [r7, #12]
 8002590:	f000 fa4a 	bl	8002a28 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002598:	223f      	movs	r2, #63	@ 0x3f
 800259a:	409a      	lsls	r2, r3
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f042 0216 	orr.w	r2, r2, #22
 80025ae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d007      	beq.n	80025c8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f042 0208 	orr.w	r2, r2, #8
 80025c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f042 0201 	orr.w	r2, r2, #1
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	e005      	b.n	80025e6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80025e2:	2302      	movs	r3, #2
 80025e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80025e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3718      	adds	r7, #24
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025fc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80025fe:	f7ff f9e1 	bl	80019c4 <HAL_GetTick>
 8002602:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d008      	beq.n	8002622 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2280      	movs	r2, #128	@ 0x80
 8002614:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e052      	b.n	80026c8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 0216 	bic.w	r2, r2, #22
 8002630:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	695a      	ldr	r2, [r3, #20]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002640:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002646:	2b00      	cmp	r3, #0
 8002648:	d103      	bne.n	8002652 <HAL_DMA_Abort+0x62>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800264e:	2b00      	cmp	r3, #0
 8002650:	d007      	beq.n	8002662 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 0208 	bic.w	r2, r2, #8
 8002660:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 0201 	bic.w	r2, r2, #1
 8002670:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002672:	e013      	b.n	800269c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002674:	f7ff f9a6 	bl	80019c4 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b05      	cmp	r3, #5
 8002680:	d90c      	bls.n	800269c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2220      	movs	r2, #32
 8002686:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2203      	movs	r2, #3
 800268c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e015      	b.n	80026c8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1e4      	bne.n	8002674 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ae:	223f      	movs	r2, #63	@ 0x3f
 80026b0:	409a      	lsls	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d004      	beq.n	80026ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2280      	movs	r2, #128	@ 0x80
 80026e8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e00c      	b.n	8002708 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2205      	movs	r2, #5
 80026f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f022 0201 	bic.w	r2, r2, #1
 8002704:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800271c:	2300      	movs	r3, #0
 800271e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002720:	4b8e      	ldr	r3, [pc, #568]	@ (800295c <HAL_DMA_IRQHandler+0x248>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a8e      	ldr	r2, [pc, #568]	@ (8002960 <HAL_DMA_IRQHandler+0x24c>)
 8002726:	fba2 2303 	umull	r2, r3, r2, r3
 800272a:	0a9b      	lsrs	r3, r3, #10
 800272c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002732:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800273e:	2208      	movs	r2, #8
 8002740:	409a      	lsls	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	4013      	ands	r3, r2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d01a      	beq.n	8002780 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	2b00      	cmp	r3, #0
 8002756:	d013      	beq.n	8002780 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 0204 	bic.w	r2, r2, #4
 8002766:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800276c:	2208      	movs	r2, #8
 800276e:	409a      	lsls	r2, r3
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002778:	f043 0201 	orr.w	r2, r3, #1
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002784:	2201      	movs	r2, #1
 8002786:	409a      	lsls	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	4013      	ands	r3, r2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d012      	beq.n	80027b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00b      	beq.n	80027b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027a2:	2201      	movs	r2, #1
 80027a4:	409a      	lsls	r2, r3
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ae:	f043 0202 	orr.w	r2, r3, #2
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ba:	2204      	movs	r2, #4
 80027bc:	409a      	lsls	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	4013      	ands	r3, r2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d012      	beq.n	80027ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00b      	beq.n	80027ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027d8:	2204      	movs	r2, #4
 80027da:	409a      	lsls	r2, r3
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027e4:	f043 0204 	orr.w	r2, r3, #4
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027f0:	2210      	movs	r2, #16
 80027f2:	409a      	lsls	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	4013      	ands	r3, r2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d043      	beq.n	8002884 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0308 	and.w	r3, r3, #8
 8002806:	2b00      	cmp	r3, #0
 8002808:	d03c      	beq.n	8002884 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800280e:	2210      	movs	r2, #16
 8002810:	409a      	lsls	r2, r3
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d018      	beq.n	8002856 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d108      	bne.n	8002844 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002836:	2b00      	cmp	r3, #0
 8002838:	d024      	beq.n	8002884 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	4798      	blx	r3
 8002842:	e01f      	b.n	8002884 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002848:	2b00      	cmp	r3, #0
 800284a:	d01b      	beq.n	8002884 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	4798      	blx	r3
 8002854:	e016      	b.n	8002884 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002860:	2b00      	cmp	r3, #0
 8002862:	d107      	bne.n	8002874 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 0208 	bic.w	r2, r2, #8
 8002872:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002878:	2b00      	cmp	r3, #0
 800287a:	d003      	beq.n	8002884 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002888:	2220      	movs	r2, #32
 800288a:	409a      	lsls	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	4013      	ands	r3, r2
 8002890:	2b00      	cmp	r3, #0
 8002892:	f000 808f 	beq.w	80029b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0310 	and.w	r3, r3, #16
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 8087 	beq.w	80029b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028aa:	2220      	movs	r2, #32
 80028ac:	409a      	lsls	r2, r3
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b05      	cmp	r3, #5
 80028bc:	d136      	bne.n	800292c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f022 0216 	bic.w	r2, r2, #22
 80028cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	695a      	ldr	r2, [r3, #20]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80028dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d103      	bne.n	80028ee <HAL_DMA_IRQHandler+0x1da>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d007      	beq.n	80028fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 0208 	bic.w	r2, r2, #8
 80028fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002902:	223f      	movs	r2, #63	@ 0x3f
 8002904:	409a      	lsls	r2, r3
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800291e:	2b00      	cmp	r3, #0
 8002920:	d07e      	beq.n	8002a20 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	4798      	blx	r3
        }
        return;
 800292a:	e079      	b.n	8002a20 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d01d      	beq.n	8002976 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d10d      	bne.n	8002964 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800294c:	2b00      	cmp	r3, #0
 800294e:	d031      	beq.n	80029b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	4798      	blx	r3
 8002958:	e02c      	b.n	80029b4 <HAL_DMA_IRQHandler+0x2a0>
 800295a:	bf00      	nop
 800295c:	20000000 	.word	0x20000000
 8002960:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002968:	2b00      	cmp	r3, #0
 800296a:	d023      	beq.n	80029b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	4798      	blx	r3
 8002974:	e01e      	b.n	80029b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002980:	2b00      	cmp	r3, #0
 8002982:	d10f      	bne.n	80029a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 0210 	bic.w	r2, r2, #16
 8002992:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d003      	beq.n	80029b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d032      	beq.n	8002a22 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029c0:	f003 0301 	and.w	r3, r3, #1
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d022      	beq.n	8002a0e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2205      	movs	r2, #5
 80029cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 0201 	bic.w	r2, r2, #1
 80029de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	3301      	adds	r3, #1
 80029e4:	60bb      	str	r3, [r7, #8]
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d307      	bcc.n	80029fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1f2      	bne.n	80029e0 <HAL_DMA_IRQHandler+0x2cc>
 80029fa:	e000      	b.n	80029fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80029fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d005      	beq.n	8002a22 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	4798      	blx	r3
 8002a1e:	e000      	b.n	8002a22 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002a20:	bf00      	nop
    }
  }
}
 8002a22:	3718      	adds	r7, #24
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
 8002a34:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002a44:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	2b40      	cmp	r3, #64	@ 0x40
 8002a54:	d108      	bne.n	8002a68 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a66:	e007      	b.n	8002a78 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68ba      	ldr	r2, [r7, #8]
 8002a6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	60da      	str	r2, [r3, #12]
}
 8002a78:	bf00      	nop
 8002a7a:	3714      	adds	r7, #20
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	3b10      	subs	r3, #16
 8002a94:	4a14      	ldr	r2, [pc, #80]	@ (8002ae8 <DMA_CalcBaseAndBitshift+0x64>)
 8002a96:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9a:	091b      	lsrs	r3, r3, #4
 8002a9c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a9e:	4a13      	ldr	r2, [pc, #76]	@ (8002aec <DMA_CalcBaseAndBitshift+0x68>)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2b03      	cmp	r3, #3
 8002ab0:	d909      	bls.n	8002ac6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002aba:	f023 0303 	bic.w	r3, r3, #3
 8002abe:	1d1a      	adds	r2, r3, #4
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	659a      	str	r2, [r3, #88]	@ 0x58
 8002ac4:	e007      	b.n	8002ad6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002ace:	f023 0303 	bic.w	r3, r3, #3
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	aaaaaaab 	.word	0xaaaaaaab
 8002aec:	08005718 	.word	0x08005718

08002af0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002af8:	2300      	movs	r3, #0
 8002afa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b00:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d11f      	bne.n	8002b4a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	2b03      	cmp	r3, #3
 8002b0e:	d856      	bhi.n	8002bbe <DMA_CheckFifoParam+0xce>
 8002b10:	a201      	add	r2, pc, #4	@ (adr r2, 8002b18 <DMA_CheckFifoParam+0x28>)
 8002b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b16:	bf00      	nop
 8002b18:	08002b29 	.word	0x08002b29
 8002b1c:	08002b3b 	.word	0x08002b3b
 8002b20:	08002b29 	.word	0x08002b29
 8002b24:	08002bbf 	.word	0x08002bbf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d046      	beq.n	8002bc2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b38:	e043      	b.n	8002bc2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b3e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002b42:	d140      	bne.n	8002bc6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b48:	e03d      	b.n	8002bc6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b52:	d121      	bne.n	8002b98 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2b03      	cmp	r3, #3
 8002b58:	d837      	bhi.n	8002bca <DMA_CheckFifoParam+0xda>
 8002b5a:	a201      	add	r2, pc, #4	@ (adr r2, 8002b60 <DMA_CheckFifoParam+0x70>)
 8002b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b60:	08002b71 	.word	0x08002b71
 8002b64:	08002b77 	.word	0x08002b77
 8002b68:	08002b71 	.word	0x08002b71
 8002b6c:	08002b89 	.word	0x08002b89
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	73fb      	strb	r3, [r7, #15]
      break;
 8002b74:	e030      	b.n	8002bd8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b7a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d025      	beq.n	8002bce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b86:	e022      	b.n	8002bce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b8c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002b90:	d11f      	bne.n	8002bd2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b96:	e01c      	b.n	8002bd2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d903      	bls.n	8002ba6 <DMA_CheckFifoParam+0xb6>
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	2b03      	cmp	r3, #3
 8002ba2:	d003      	beq.n	8002bac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ba4:	e018      	b.n	8002bd8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	73fb      	strb	r3, [r7, #15]
      break;
 8002baa:	e015      	b.n	8002bd8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00e      	beq.n	8002bd6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	73fb      	strb	r3, [r7, #15]
      break;
 8002bbc:	e00b      	b.n	8002bd6 <DMA_CheckFifoParam+0xe6>
      break;
 8002bbe:	bf00      	nop
 8002bc0:	e00a      	b.n	8002bd8 <DMA_CheckFifoParam+0xe8>
      break;
 8002bc2:	bf00      	nop
 8002bc4:	e008      	b.n	8002bd8 <DMA_CheckFifoParam+0xe8>
      break;
 8002bc6:	bf00      	nop
 8002bc8:	e006      	b.n	8002bd8 <DMA_CheckFifoParam+0xe8>
      break;
 8002bca:	bf00      	nop
 8002bcc:	e004      	b.n	8002bd8 <DMA_CheckFifoParam+0xe8>
      break;
 8002bce:	bf00      	nop
 8002bd0:	e002      	b.n	8002bd8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002bd2:	bf00      	nop
 8002bd4:	e000      	b.n	8002bd8 <DMA_CheckFifoParam+0xe8>
      break;
 8002bd6:	bf00      	nop
    }
  } 
  
  return status; 
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3714      	adds	r7, #20
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop

08002be8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b089      	sub	sp, #36	@ 0x24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bfe:	2300      	movs	r3, #0
 8002c00:	61fb      	str	r3, [r7, #28]
 8002c02:	e159      	b.n	8002eb8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c04:	2201      	movs	r2, #1
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	4013      	ands	r3, r2
 8002c16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	f040 8148 	bne.w	8002eb2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f003 0303 	and.w	r3, r3, #3
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d005      	beq.n	8002c3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d130      	bne.n	8002c9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	2203      	movs	r2, #3
 8002c46:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4a:	43db      	mvns	r3, r3
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	68da      	ldr	r2, [r3, #12]
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c70:	2201      	movs	r2, #1
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	091b      	lsrs	r3, r3, #4
 8002c86:	f003 0201 	and.w	r2, r3, #1
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f003 0303 	and.w	r3, r3, #3
 8002ca4:	2b03      	cmp	r3, #3
 8002ca6:	d017      	beq.n	8002cd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	2203      	movs	r2, #3
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f003 0303 	and.w	r3, r3, #3
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d123      	bne.n	8002d2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	08da      	lsrs	r2, r3, #3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	3208      	adds	r2, #8
 8002cec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	f003 0307 	and.w	r3, r3, #7
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	220f      	movs	r2, #15
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	43db      	mvns	r3, r3
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	4013      	ands	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	691a      	ldr	r2, [r3, #16]
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	08da      	lsrs	r2, r3, #3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	3208      	adds	r2, #8
 8002d26:	69b9      	ldr	r1, [r7, #24]
 8002d28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	2203      	movs	r2, #3
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	4013      	ands	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f003 0203 	and.w	r2, r3, #3
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f000 80a2 	beq.w	8002eb2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60fb      	str	r3, [r7, #12]
 8002d72:	4b57      	ldr	r3, [pc, #348]	@ (8002ed0 <HAL_GPIO_Init+0x2e8>)
 8002d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d76:	4a56      	ldr	r2, [pc, #344]	@ (8002ed0 <HAL_GPIO_Init+0x2e8>)
 8002d78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d7e:	4b54      	ldr	r3, [pc, #336]	@ (8002ed0 <HAL_GPIO_Init+0x2e8>)
 8002d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d8a:	4a52      	ldr	r2, [pc, #328]	@ (8002ed4 <HAL_GPIO_Init+0x2ec>)
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	089b      	lsrs	r3, r3, #2
 8002d90:	3302      	adds	r3, #2
 8002d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	f003 0303 	and.w	r3, r3, #3
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	220f      	movs	r2, #15
 8002da2:	fa02 f303 	lsl.w	r3, r2, r3
 8002da6:	43db      	mvns	r3, r3
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	4013      	ands	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a49      	ldr	r2, [pc, #292]	@ (8002ed8 <HAL_GPIO_Init+0x2f0>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d019      	beq.n	8002dea <HAL_GPIO_Init+0x202>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a48      	ldr	r2, [pc, #288]	@ (8002edc <HAL_GPIO_Init+0x2f4>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d013      	beq.n	8002de6 <HAL_GPIO_Init+0x1fe>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a47      	ldr	r2, [pc, #284]	@ (8002ee0 <HAL_GPIO_Init+0x2f8>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d00d      	beq.n	8002de2 <HAL_GPIO_Init+0x1fa>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a46      	ldr	r2, [pc, #280]	@ (8002ee4 <HAL_GPIO_Init+0x2fc>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d007      	beq.n	8002dde <HAL_GPIO_Init+0x1f6>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a45      	ldr	r2, [pc, #276]	@ (8002ee8 <HAL_GPIO_Init+0x300>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d101      	bne.n	8002dda <HAL_GPIO_Init+0x1f2>
 8002dd6:	2304      	movs	r3, #4
 8002dd8:	e008      	b.n	8002dec <HAL_GPIO_Init+0x204>
 8002dda:	2307      	movs	r3, #7
 8002ddc:	e006      	b.n	8002dec <HAL_GPIO_Init+0x204>
 8002dde:	2303      	movs	r3, #3
 8002de0:	e004      	b.n	8002dec <HAL_GPIO_Init+0x204>
 8002de2:	2302      	movs	r3, #2
 8002de4:	e002      	b.n	8002dec <HAL_GPIO_Init+0x204>
 8002de6:	2301      	movs	r3, #1
 8002de8:	e000      	b.n	8002dec <HAL_GPIO_Init+0x204>
 8002dea:	2300      	movs	r3, #0
 8002dec:	69fa      	ldr	r2, [r7, #28]
 8002dee:	f002 0203 	and.w	r2, r2, #3
 8002df2:	0092      	lsls	r2, r2, #2
 8002df4:	4093      	lsls	r3, r2
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dfc:	4935      	ldr	r1, [pc, #212]	@ (8002ed4 <HAL_GPIO_Init+0x2ec>)
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	089b      	lsrs	r3, r3, #2
 8002e02:	3302      	adds	r3, #2
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e0a:	4b38      	ldr	r3, [pc, #224]	@ (8002eec <HAL_GPIO_Init+0x304>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	43db      	mvns	r3, r3
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	4013      	ands	r3, r2
 8002e18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d003      	beq.n	8002e2e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e2e:	4a2f      	ldr	r2, [pc, #188]	@ (8002eec <HAL_GPIO_Init+0x304>)
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e34:	4b2d      	ldr	r3, [pc, #180]	@ (8002eec <HAL_GPIO_Init+0x304>)
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	4013      	ands	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d003      	beq.n	8002e58 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e58:	4a24      	ldr	r2, [pc, #144]	@ (8002eec <HAL_GPIO_Init+0x304>)
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e5e:	4b23      	ldr	r3, [pc, #140]	@ (8002eec <HAL_GPIO_Init+0x304>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	43db      	mvns	r3, r3
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d003      	beq.n	8002e82 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e82:	4a1a      	ldr	r2, [pc, #104]	@ (8002eec <HAL_GPIO_Init+0x304>)
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e88:	4b18      	ldr	r3, [pc, #96]	@ (8002eec <HAL_GPIO_Init+0x304>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	43db      	mvns	r3, r3
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	4013      	ands	r3, r2
 8002e96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d003      	beq.n	8002eac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002eac:	4a0f      	ldr	r2, [pc, #60]	@ (8002eec <HAL_GPIO_Init+0x304>)
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	61fb      	str	r3, [r7, #28]
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	2b0f      	cmp	r3, #15
 8002ebc:	f67f aea2 	bls.w	8002c04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ec0:	bf00      	nop
 8002ec2:	bf00      	nop
 8002ec4:	3724      	adds	r7, #36	@ 0x24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	40013800 	.word	0x40013800
 8002ed8:	40020000 	.word	0x40020000
 8002edc:	40020400 	.word	0x40020400
 8002ee0:	40020800 	.word	0x40020800
 8002ee4:	40020c00 	.word	0x40020c00
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	40013c00 	.word	0x40013c00

08002ef0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	460b      	mov	r3, r1
 8002efa:	807b      	strh	r3, [r7, #2]
 8002efc:	4613      	mov	r3, r2
 8002efe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f00:	787b      	ldrb	r3, [r7, #1]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d003      	beq.n	8002f0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f06:	887a      	ldrh	r2, [r7, #2]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f0c:	e003      	b.n	8002f16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f0e:	887b      	ldrh	r3, [r7, #2]
 8002f10:	041a      	lsls	r2, r3, #16
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	619a      	str	r2, [r3, #24]
}
 8002f16:	bf00      	nop
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
	...

08002f24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e267      	b.n	8003406 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d075      	beq.n	800302e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002f42:	4b88      	ldr	r3, [pc, #544]	@ (8003164 <HAL_RCC_OscConfig+0x240>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 030c 	and.w	r3, r3, #12
 8002f4a:	2b04      	cmp	r3, #4
 8002f4c:	d00c      	beq.n	8002f68 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f4e:	4b85      	ldr	r3, [pc, #532]	@ (8003164 <HAL_RCC_OscConfig+0x240>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002f56:	2b08      	cmp	r3, #8
 8002f58:	d112      	bne.n	8002f80 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f5a:	4b82      	ldr	r3, [pc, #520]	@ (8003164 <HAL_RCC_OscConfig+0x240>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f66:	d10b      	bne.n	8002f80 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f68:	4b7e      	ldr	r3, [pc, #504]	@ (8003164 <HAL_RCC_OscConfig+0x240>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d05b      	beq.n	800302c <HAL_RCC_OscConfig+0x108>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d157      	bne.n	800302c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e242      	b.n	8003406 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f88:	d106      	bne.n	8002f98 <HAL_RCC_OscConfig+0x74>
 8002f8a:	4b76      	ldr	r3, [pc, #472]	@ (8003164 <HAL_RCC_OscConfig+0x240>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a75      	ldr	r2, [pc, #468]	@ (8003164 <HAL_RCC_OscConfig+0x240>)
 8002f90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f94:	6013      	str	r3, [r2, #0]
 8002f96:	e01d      	b.n	8002fd4 <HAL_RCC_OscConfig+0xb0>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002fa0:	d10c      	bne.n	8002fbc <HAL_RCC_OscConfig+0x98>
 8002fa2:	4b70      	ldr	r3, [pc, #448]	@ (8003164 <HAL_RCC_OscConfig+0x240>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a6f      	ldr	r2, [pc, #444]	@ (8003164 <HAL_RCC_OscConfig+0x240>)
 8002fa8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fac:	6013      	str	r3, [r2, #0]
 8002fae:	4b6d      	ldr	r3, [pc, #436]	@ (8003164 <HAL_RCC_OscConfig+0x240>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a6c      	ldr	r2, [pc, #432]	@ (8003164 <HAL_RCC_OscConfig+0x240>)
 8002fb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fb8:	6013      	str	r3, [r2, #0]
 8002fba:	e00b      	b.n	8002fd4 <HAL_RCC_OscConfig+0xb0>
 8002fbc:	4b69      	ldr	r3, [pc, #420]	@ (8003164 <HAL_RCC_OscConfig+0x240>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a68      	ldr	r2, [pc, #416]	@ (8003164 <HAL_RCC_OscConfig+0x240>)
 8002fc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fc6:	6013      	str	r3, [r2, #0]
 8002fc8:	4b66      	ldr	r3, [pc, #408]	@ (8003164 <HAL_RCC_OscConfig+0x240>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a65      	ldr	r2, [pc, #404]	@ (8003164 <HAL_RCC_OscConfig+0x240>)
 8002fce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d013      	beq.n	8003004 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fdc:	f7fe fcf2 	bl	80019c4 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe4:	f7fe fcee 	bl	80019c4 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b64      	cmp	r3, #100	@ 0x64
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e207      	b.n	8003406 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ff6:	4b5b      	ldr	r3, [pc, #364]	@ (8003164 <HAL_RCC_OscConfig+0x240>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0f0      	beq.n	8002fe4 <HAL_RCC_OscConfig+0xc0>
 8003002:	e014      	b.n	800302e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003004:	f7fe fcde 	bl	80019c4 <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800300c:	f7fe fcda 	bl	80019c4 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b64      	cmp	r3, #100	@ 0x64
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e1f3      	b.n	8003406 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800301e:	4b51      	ldr	r3, [pc, #324]	@ (8003164 <HAL_RCC_OscConfig+0x240>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1f0      	bne.n	800300c <HAL_RCC_OscConfig+0xe8>
 800302a:	e000      	b.n	800302e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800302c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d063      	beq.n	8003102 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800303a:	4b4a      	ldr	r3, [pc, #296]	@ (8003164 <HAL_RCC_OscConfig+0x240>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 030c 	and.w	r3, r3, #12
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00b      	beq.n	800305e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003046:	4b47      	ldr	r3, [pc, #284]	@ (8003164 <HAL_RCC_OscConfig+0x240>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800304e:	2b08      	cmp	r3, #8
 8003050:	d11c      	bne.n	800308c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003052:	4b44      	ldr	r3, [pc, #272]	@ (8003164 <HAL_RCC_OscConfig+0x240>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d116      	bne.n	800308c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800305e:	4b41      	ldr	r3, [pc, #260]	@ (8003164 <HAL_RCC_OscConfig+0x240>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d005      	beq.n	8003076 <HAL_RCC_OscConfig+0x152>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d001      	beq.n	8003076 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e1c7      	b.n	8003406 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003076:	4b3b      	ldr	r3, [pc, #236]	@ (8003164 <HAL_RCC_OscConfig+0x240>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	4937      	ldr	r1, [pc, #220]	@ (8003164 <HAL_RCC_OscConfig+0x240>)
 8003086:	4313      	orrs	r3, r2
 8003088:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800308a:	e03a      	b.n	8003102 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d020      	beq.n	80030d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003094:	4b34      	ldr	r3, [pc, #208]	@ (8003168 <HAL_RCC_OscConfig+0x244>)
 8003096:	2201      	movs	r2, #1
 8003098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309a:	f7fe fc93 	bl	80019c4 <HAL_GetTick>
 800309e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a0:	e008      	b.n	80030b4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030a2:	f7fe fc8f 	bl	80019c4 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e1a8      	b.n	8003406 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b4:	4b2b      	ldr	r3, [pc, #172]	@ (8003164 <HAL_RCC_OscConfig+0x240>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d0f0      	beq.n	80030a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c0:	4b28      	ldr	r3, [pc, #160]	@ (8003164 <HAL_RCC_OscConfig+0x240>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	4925      	ldr	r1, [pc, #148]	@ (8003164 <HAL_RCC_OscConfig+0x240>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	600b      	str	r3, [r1, #0]
 80030d4:	e015      	b.n	8003102 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030d6:	4b24      	ldr	r3, [pc, #144]	@ (8003168 <HAL_RCC_OscConfig+0x244>)
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030dc:	f7fe fc72 	bl	80019c4 <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030e4:	f7fe fc6e 	bl	80019c4 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e187      	b.n	8003406 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030f6:	4b1b      	ldr	r3, [pc, #108]	@ (8003164 <HAL_RCC_OscConfig+0x240>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1f0      	bne.n	80030e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0308 	and.w	r3, r3, #8
 800310a:	2b00      	cmp	r3, #0
 800310c:	d036      	beq.n	800317c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d016      	beq.n	8003144 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003116:	4b15      	ldr	r3, [pc, #84]	@ (800316c <HAL_RCC_OscConfig+0x248>)
 8003118:	2201      	movs	r2, #1
 800311a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800311c:	f7fe fc52 	bl	80019c4 <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003122:	e008      	b.n	8003136 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003124:	f7fe fc4e 	bl	80019c4 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e167      	b.n	8003406 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003136:	4b0b      	ldr	r3, [pc, #44]	@ (8003164 <HAL_RCC_OscConfig+0x240>)
 8003138:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d0f0      	beq.n	8003124 <HAL_RCC_OscConfig+0x200>
 8003142:	e01b      	b.n	800317c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003144:	4b09      	ldr	r3, [pc, #36]	@ (800316c <HAL_RCC_OscConfig+0x248>)
 8003146:	2200      	movs	r2, #0
 8003148:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800314a:	f7fe fc3b 	bl	80019c4 <HAL_GetTick>
 800314e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003150:	e00e      	b.n	8003170 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003152:	f7fe fc37 	bl	80019c4 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d907      	bls.n	8003170 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e150      	b.n	8003406 <HAL_RCC_OscConfig+0x4e2>
 8003164:	40023800 	.word	0x40023800
 8003168:	42470000 	.word	0x42470000
 800316c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003170:	4b88      	ldr	r3, [pc, #544]	@ (8003394 <HAL_RCC_OscConfig+0x470>)
 8003172:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1ea      	bne.n	8003152 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0304 	and.w	r3, r3, #4
 8003184:	2b00      	cmp	r3, #0
 8003186:	f000 8097 	beq.w	80032b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800318a:	2300      	movs	r3, #0
 800318c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800318e:	4b81      	ldr	r3, [pc, #516]	@ (8003394 <HAL_RCC_OscConfig+0x470>)
 8003190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003192:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10f      	bne.n	80031ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800319a:	2300      	movs	r3, #0
 800319c:	60bb      	str	r3, [r7, #8]
 800319e:	4b7d      	ldr	r3, [pc, #500]	@ (8003394 <HAL_RCC_OscConfig+0x470>)
 80031a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a2:	4a7c      	ldr	r2, [pc, #496]	@ (8003394 <HAL_RCC_OscConfig+0x470>)
 80031a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80031aa:	4b7a      	ldr	r3, [pc, #488]	@ (8003394 <HAL_RCC_OscConfig+0x470>)
 80031ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031b2:	60bb      	str	r3, [r7, #8]
 80031b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031b6:	2301      	movs	r3, #1
 80031b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ba:	4b77      	ldr	r3, [pc, #476]	@ (8003398 <HAL_RCC_OscConfig+0x474>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d118      	bne.n	80031f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031c6:	4b74      	ldr	r3, [pc, #464]	@ (8003398 <HAL_RCC_OscConfig+0x474>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a73      	ldr	r2, [pc, #460]	@ (8003398 <HAL_RCC_OscConfig+0x474>)
 80031cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031d2:	f7fe fbf7 	bl	80019c4 <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d8:	e008      	b.n	80031ec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031da:	f7fe fbf3 	bl	80019c4 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e10c      	b.n	8003406 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ec:	4b6a      	ldr	r3, [pc, #424]	@ (8003398 <HAL_RCC_OscConfig+0x474>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0f0      	beq.n	80031da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d106      	bne.n	800320e <HAL_RCC_OscConfig+0x2ea>
 8003200:	4b64      	ldr	r3, [pc, #400]	@ (8003394 <HAL_RCC_OscConfig+0x470>)
 8003202:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003204:	4a63      	ldr	r2, [pc, #396]	@ (8003394 <HAL_RCC_OscConfig+0x470>)
 8003206:	f043 0301 	orr.w	r3, r3, #1
 800320a:	6713      	str	r3, [r2, #112]	@ 0x70
 800320c:	e01c      	b.n	8003248 <HAL_RCC_OscConfig+0x324>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	2b05      	cmp	r3, #5
 8003214:	d10c      	bne.n	8003230 <HAL_RCC_OscConfig+0x30c>
 8003216:	4b5f      	ldr	r3, [pc, #380]	@ (8003394 <HAL_RCC_OscConfig+0x470>)
 8003218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800321a:	4a5e      	ldr	r2, [pc, #376]	@ (8003394 <HAL_RCC_OscConfig+0x470>)
 800321c:	f043 0304 	orr.w	r3, r3, #4
 8003220:	6713      	str	r3, [r2, #112]	@ 0x70
 8003222:	4b5c      	ldr	r3, [pc, #368]	@ (8003394 <HAL_RCC_OscConfig+0x470>)
 8003224:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003226:	4a5b      	ldr	r2, [pc, #364]	@ (8003394 <HAL_RCC_OscConfig+0x470>)
 8003228:	f043 0301 	orr.w	r3, r3, #1
 800322c:	6713      	str	r3, [r2, #112]	@ 0x70
 800322e:	e00b      	b.n	8003248 <HAL_RCC_OscConfig+0x324>
 8003230:	4b58      	ldr	r3, [pc, #352]	@ (8003394 <HAL_RCC_OscConfig+0x470>)
 8003232:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003234:	4a57      	ldr	r2, [pc, #348]	@ (8003394 <HAL_RCC_OscConfig+0x470>)
 8003236:	f023 0301 	bic.w	r3, r3, #1
 800323a:	6713      	str	r3, [r2, #112]	@ 0x70
 800323c:	4b55      	ldr	r3, [pc, #340]	@ (8003394 <HAL_RCC_OscConfig+0x470>)
 800323e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003240:	4a54      	ldr	r2, [pc, #336]	@ (8003394 <HAL_RCC_OscConfig+0x470>)
 8003242:	f023 0304 	bic.w	r3, r3, #4
 8003246:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d015      	beq.n	800327c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003250:	f7fe fbb8 	bl	80019c4 <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003256:	e00a      	b.n	800326e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003258:	f7fe fbb4 	bl	80019c4 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003266:	4293      	cmp	r3, r2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e0cb      	b.n	8003406 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800326e:	4b49      	ldr	r3, [pc, #292]	@ (8003394 <HAL_RCC_OscConfig+0x470>)
 8003270:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d0ee      	beq.n	8003258 <HAL_RCC_OscConfig+0x334>
 800327a:	e014      	b.n	80032a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800327c:	f7fe fba2 	bl	80019c4 <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003282:	e00a      	b.n	800329a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003284:	f7fe fb9e 	bl	80019c4 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003292:	4293      	cmp	r3, r2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e0b5      	b.n	8003406 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800329a:	4b3e      	ldr	r3, [pc, #248]	@ (8003394 <HAL_RCC_OscConfig+0x470>)
 800329c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1ee      	bne.n	8003284 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032a6:	7dfb      	ldrb	r3, [r7, #23]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d105      	bne.n	80032b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032ac:	4b39      	ldr	r3, [pc, #228]	@ (8003394 <HAL_RCC_OscConfig+0x470>)
 80032ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b0:	4a38      	ldr	r2, [pc, #224]	@ (8003394 <HAL_RCC_OscConfig+0x470>)
 80032b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032b6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f000 80a1 	beq.w	8003404 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032c2:	4b34      	ldr	r3, [pc, #208]	@ (8003394 <HAL_RCC_OscConfig+0x470>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 030c 	and.w	r3, r3, #12
 80032ca:	2b08      	cmp	r3, #8
 80032cc:	d05c      	beq.n	8003388 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d141      	bne.n	800335a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032d6:	4b31      	ldr	r3, [pc, #196]	@ (800339c <HAL_RCC_OscConfig+0x478>)
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032dc:	f7fe fb72 	bl	80019c4 <HAL_GetTick>
 80032e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032e2:	e008      	b.n	80032f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032e4:	f7fe fb6e 	bl	80019c4 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e087      	b.n	8003406 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032f6:	4b27      	ldr	r3, [pc, #156]	@ (8003394 <HAL_RCC_OscConfig+0x470>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1f0      	bne.n	80032e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69da      	ldr	r2, [r3, #28]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a1b      	ldr	r3, [r3, #32]
 800330a:	431a      	orrs	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003310:	019b      	lsls	r3, r3, #6
 8003312:	431a      	orrs	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003318:	085b      	lsrs	r3, r3, #1
 800331a:	3b01      	subs	r3, #1
 800331c:	041b      	lsls	r3, r3, #16
 800331e:	431a      	orrs	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003324:	061b      	lsls	r3, r3, #24
 8003326:	491b      	ldr	r1, [pc, #108]	@ (8003394 <HAL_RCC_OscConfig+0x470>)
 8003328:	4313      	orrs	r3, r2
 800332a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800332c:	4b1b      	ldr	r3, [pc, #108]	@ (800339c <HAL_RCC_OscConfig+0x478>)
 800332e:	2201      	movs	r2, #1
 8003330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003332:	f7fe fb47 	bl	80019c4 <HAL_GetTick>
 8003336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003338:	e008      	b.n	800334c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800333a:	f7fe fb43 	bl	80019c4 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e05c      	b.n	8003406 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800334c:	4b11      	ldr	r3, [pc, #68]	@ (8003394 <HAL_RCC_OscConfig+0x470>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0f0      	beq.n	800333a <HAL_RCC_OscConfig+0x416>
 8003358:	e054      	b.n	8003404 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800335a:	4b10      	ldr	r3, [pc, #64]	@ (800339c <HAL_RCC_OscConfig+0x478>)
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003360:	f7fe fb30 	bl	80019c4 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003368:	f7fe fb2c 	bl	80019c4 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e045      	b.n	8003406 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800337a:	4b06      	ldr	r3, [pc, #24]	@ (8003394 <HAL_RCC_OscConfig+0x470>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1f0      	bne.n	8003368 <HAL_RCC_OscConfig+0x444>
 8003386:	e03d      	b.n	8003404 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d107      	bne.n	80033a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e038      	b.n	8003406 <HAL_RCC_OscConfig+0x4e2>
 8003394:	40023800 	.word	0x40023800
 8003398:	40007000 	.word	0x40007000
 800339c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003410 <HAL_RCC_OscConfig+0x4ec>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d028      	beq.n	8003400 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d121      	bne.n	8003400 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d11a      	bne.n	8003400 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80033d0:	4013      	ands	r3, r2
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80033d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033d8:	4293      	cmp	r3, r2
 80033da:	d111      	bne.n	8003400 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e6:	085b      	lsrs	r3, r3, #1
 80033e8:	3b01      	subs	r3, #1
 80033ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d107      	bne.n	8003400 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d001      	beq.n	8003404 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e000      	b.n	8003406 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3718      	adds	r7, #24
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	40023800 	.word	0x40023800

08003414 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e0cc      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003428:	4b68      	ldr	r3, [pc, #416]	@ (80035cc <HAL_RCC_ClockConfig+0x1b8>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0307 	and.w	r3, r3, #7
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	429a      	cmp	r2, r3
 8003434:	d90c      	bls.n	8003450 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003436:	4b65      	ldr	r3, [pc, #404]	@ (80035cc <HAL_RCC_ClockConfig+0x1b8>)
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	b2d2      	uxtb	r2, r2
 800343c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800343e:	4b63      	ldr	r3, [pc, #396]	@ (80035cc <HAL_RCC_ClockConfig+0x1b8>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0307 	and.w	r3, r3, #7
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	429a      	cmp	r2, r3
 800344a:	d001      	beq.n	8003450 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e0b8      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d020      	beq.n	800349e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b00      	cmp	r3, #0
 8003466:	d005      	beq.n	8003474 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003468:	4b59      	ldr	r3, [pc, #356]	@ (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	4a58      	ldr	r2, [pc, #352]	@ (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 800346e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003472:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0308 	and.w	r3, r3, #8
 800347c:	2b00      	cmp	r3, #0
 800347e:	d005      	beq.n	800348c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003480:	4b53      	ldr	r3, [pc, #332]	@ (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	4a52      	ldr	r2, [pc, #328]	@ (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003486:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800348a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800348c:	4b50      	ldr	r3, [pc, #320]	@ (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	494d      	ldr	r1, [pc, #308]	@ (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 800349a:	4313      	orrs	r3, r2
 800349c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d044      	beq.n	8003534 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d107      	bne.n	80034c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034b2:	4b47      	ldr	r3, [pc, #284]	@ (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d119      	bne.n	80034f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e07f      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d003      	beq.n	80034d2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034ce:	2b03      	cmp	r3, #3
 80034d0:	d107      	bne.n	80034e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034d2:	4b3f      	ldr	r3, [pc, #252]	@ (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d109      	bne.n	80034f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e06f      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e2:	4b3b      	ldr	r3, [pc, #236]	@ (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e067      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034f2:	4b37      	ldr	r3, [pc, #220]	@ (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f023 0203 	bic.w	r2, r3, #3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	4934      	ldr	r1, [pc, #208]	@ (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003500:	4313      	orrs	r3, r2
 8003502:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003504:	f7fe fa5e 	bl	80019c4 <HAL_GetTick>
 8003508:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800350a:	e00a      	b.n	8003522 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800350c:	f7fe fa5a 	bl	80019c4 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	f241 3288 	movw	r2, #5000	@ 0x1388
 800351a:	4293      	cmp	r3, r2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e04f      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003522:	4b2b      	ldr	r3, [pc, #172]	@ (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 020c 	and.w	r2, r3, #12
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	429a      	cmp	r2, r3
 8003532:	d1eb      	bne.n	800350c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003534:	4b25      	ldr	r3, [pc, #148]	@ (80035cc <HAL_RCC_ClockConfig+0x1b8>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0307 	and.w	r3, r3, #7
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	429a      	cmp	r2, r3
 8003540:	d20c      	bcs.n	800355c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003542:	4b22      	ldr	r3, [pc, #136]	@ (80035cc <HAL_RCC_ClockConfig+0x1b8>)
 8003544:	683a      	ldr	r2, [r7, #0]
 8003546:	b2d2      	uxtb	r2, r2
 8003548:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800354a:	4b20      	ldr	r3, [pc, #128]	@ (80035cc <HAL_RCC_ClockConfig+0x1b8>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0307 	and.w	r3, r3, #7
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	429a      	cmp	r2, r3
 8003556:	d001      	beq.n	800355c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e032      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0304 	and.w	r3, r3, #4
 8003564:	2b00      	cmp	r3, #0
 8003566:	d008      	beq.n	800357a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003568:	4b19      	ldr	r3, [pc, #100]	@ (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	4916      	ldr	r1, [pc, #88]	@ (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003576:	4313      	orrs	r3, r2
 8003578:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0308 	and.w	r3, r3, #8
 8003582:	2b00      	cmp	r3, #0
 8003584:	d009      	beq.n	800359a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003586:	4b12      	ldr	r3, [pc, #72]	@ (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	490e      	ldr	r1, [pc, #56]	@ (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003596:	4313      	orrs	r3, r2
 8003598:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800359a:	f000 f821 	bl	80035e0 <HAL_RCC_GetSysClockFreq>
 800359e:	4602      	mov	r2, r0
 80035a0:	4b0b      	ldr	r3, [pc, #44]	@ (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	091b      	lsrs	r3, r3, #4
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	490a      	ldr	r1, [pc, #40]	@ (80035d4 <HAL_RCC_ClockConfig+0x1c0>)
 80035ac:	5ccb      	ldrb	r3, [r1, r3]
 80035ae:	fa22 f303 	lsr.w	r3, r2, r3
 80035b2:	4a09      	ldr	r2, [pc, #36]	@ (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 80035b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80035b6:	4b09      	ldr	r3, [pc, #36]	@ (80035dc <HAL_RCC_ClockConfig+0x1c8>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7fe f9be 	bl	800193c <HAL_InitTick>

  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	40023c00 	.word	0x40023c00
 80035d0:	40023800 	.word	0x40023800
 80035d4:	08005700 	.word	0x08005700
 80035d8:	20000000 	.word	0x20000000
 80035dc:	20000004 	.word	0x20000004

080035e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035e4:	b090      	sub	sp, #64	@ 0x40
 80035e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80035e8:	2300      	movs	r3, #0
 80035ea:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80035ec:	2300      	movs	r3, #0
 80035ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80035f0:	2300      	movs	r3, #0
 80035f2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80035f4:	2300      	movs	r3, #0
 80035f6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035f8:	4b59      	ldr	r3, [pc, #356]	@ (8003760 <HAL_RCC_GetSysClockFreq+0x180>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f003 030c 	and.w	r3, r3, #12
 8003600:	2b08      	cmp	r3, #8
 8003602:	d00d      	beq.n	8003620 <HAL_RCC_GetSysClockFreq+0x40>
 8003604:	2b08      	cmp	r3, #8
 8003606:	f200 80a1 	bhi.w	800374c <HAL_RCC_GetSysClockFreq+0x16c>
 800360a:	2b00      	cmp	r3, #0
 800360c:	d002      	beq.n	8003614 <HAL_RCC_GetSysClockFreq+0x34>
 800360e:	2b04      	cmp	r3, #4
 8003610:	d003      	beq.n	800361a <HAL_RCC_GetSysClockFreq+0x3a>
 8003612:	e09b      	b.n	800374c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003614:	4b53      	ldr	r3, [pc, #332]	@ (8003764 <HAL_RCC_GetSysClockFreq+0x184>)
 8003616:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003618:	e09b      	b.n	8003752 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800361a:	4b53      	ldr	r3, [pc, #332]	@ (8003768 <HAL_RCC_GetSysClockFreq+0x188>)
 800361c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800361e:	e098      	b.n	8003752 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003620:	4b4f      	ldr	r3, [pc, #316]	@ (8003760 <HAL_RCC_GetSysClockFreq+0x180>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003628:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800362a:	4b4d      	ldr	r3, [pc, #308]	@ (8003760 <HAL_RCC_GetSysClockFreq+0x180>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d028      	beq.n	8003688 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003636:	4b4a      	ldr	r3, [pc, #296]	@ (8003760 <HAL_RCC_GetSysClockFreq+0x180>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	099b      	lsrs	r3, r3, #6
 800363c:	2200      	movs	r2, #0
 800363e:	623b      	str	r3, [r7, #32]
 8003640:	627a      	str	r2, [r7, #36]	@ 0x24
 8003642:	6a3b      	ldr	r3, [r7, #32]
 8003644:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003648:	2100      	movs	r1, #0
 800364a:	4b47      	ldr	r3, [pc, #284]	@ (8003768 <HAL_RCC_GetSysClockFreq+0x188>)
 800364c:	fb03 f201 	mul.w	r2, r3, r1
 8003650:	2300      	movs	r3, #0
 8003652:	fb00 f303 	mul.w	r3, r0, r3
 8003656:	4413      	add	r3, r2
 8003658:	4a43      	ldr	r2, [pc, #268]	@ (8003768 <HAL_RCC_GetSysClockFreq+0x188>)
 800365a:	fba0 1202 	umull	r1, r2, r0, r2
 800365e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003660:	460a      	mov	r2, r1
 8003662:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003664:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003666:	4413      	add	r3, r2
 8003668:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800366a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800366c:	2200      	movs	r2, #0
 800366e:	61bb      	str	r3, [r7, #24]
 8003670:	61fa      	str	r2, [r7, #28]
 8003672:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003676:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800367a:	f7fc fdad 	bl	80001d8 <__aeabi_uldivmod>
 800367e:	4602      	mov	r2, r0
 8003680:	460b      	mov	r3, r1
 8003682:	4613      	mov	r3, r2
 8003684:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003686:	e053      	b.n	8003730 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003688:	4b35      	ldr	r3, [pc, #212]	@ (8003760 <HAL_RCC_GetSysClockFreq+0x180>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	099b      	lsrs	r3, r3, #6
 800368e:	2200      	movs	r2, #0
 8003690:	613b      	str	r3, [r7, #16]
 8003692:	617a      	str	r2, [r7, #20]
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800369a:	f04f 0b00 	mov.w	fp, #0
 800369e:	4652      	mov	r2, sl
 80036a0:	465b      	mov	r3, fp
 80036a2:	f04f 0000 	mov.w	r0, #0
 80036a6:	f04f 0100 	mov.w	r1, #0
 80036aa:	0159      	lsls	r1, r3, #5
 80036ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036b0:	0150      	lsls	r0, r2, #5
 80036b2:	4602      	mov	r2, r0
 80036b4:	460b      	mov	r3, r1
 80036b6:	ebb2 080a 	subs.w	r8, r2, sl
 80036ba:	eb63 090b 	sbc.w	r9, r3, fp
 80036be:	f04f 0200 	mov.w	r2, #0
 80036c2:	f04f 0300 	mov.w	r3, #0
 80036c6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80036ca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80036ce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80036d2:	ebb2 0408 	subs.w	r4, r2, r8
 80036d6:	eb63 0509 	sbc.w	r5, r3, r9
 80036da:	f04f 0200 	mov.w	r2, #0
 80036de:	f04f 0300 	mov.w	r3, #0
 80036e2:	00eb      	lsls	r3, r5, #3
 80036e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036e8:	00e2      	lsls	r2, r4, #3
 80036ea:	4614      	mov	r4, r2
 80036ec:	461d      	mov	r5, r3
 80036ee:	eb14 030a 	adds.w	r3, r4, sl
 80036f2:	603b      	str	r3, [r7, #0]
 80036f4:	eb45 030b 	adc.w	r3, r5, fp
 80036f8:	607b      	str	r3, [r7, #4]
 80036fa:	f04f 0200 	mov.w	r2, #0
 80036fe:	f04f 0300 	mov.w	r3, #0
 8003702:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003706:	4629      	mov	r1, r5
 8003708:	028b      	lsls	r3, r1, #10
 800370a:	4621      	mov	r1, r4
 800370c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003710:	4621      	mov	r1, r4
 8003712:	028a      	lsls	r2, r1, #10
 8003714:	4610      	mov	r0, r2
 8003716:	4619      	mov	r1, r3
 8003718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800371a:	2200      	movs	r2, #0
 800371c:	60bb      	str	r3, [r7, #8]
 800371e:	60fa      	str	r2, [r7, #12]
 8003720:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003724:	f7fc fd58 	bl	80001d8 <__aeabi_uldivmod>
 8003728:	4602      	mov	r2, r0
 800372a:	460b      	mov	r3, r1
 800372c:	4613      	mov	r3, r2
 800372e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003730:	4b0b      	ldr	r3, [pc, #44]	@ (8003760 <HAL_RCC_GetSysClockFreq+0x180>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	0c1b      	lsrs	r3, r3, #16
 8003736:	f003 0303 	and.w	r3, r3, #3
 800373a:	3301      	adds	r3, #1
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003740:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003744:	fbb2 f3f3 	udiv	r3, r2, r3
 8003748:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800374a:	e002      	b.n	8003752 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800374c:	4b05      	ldr	r3, [pc, #20]	@ (8003764 <HAL_RCC_GetSysClockFreq+0x184>)
 800374e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003750:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003754:	4618      	mov	r0, r3
 8003756:	3740      	adds	r7, #64	@ 0x40
 8003758:	46bd      	mov	sp, r7
 800375a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800375e:	bf00      	nop
 8003760:	40023800 	.word	0x40023800
 8003764:	00f42400 	.word	0x00f42400
 8003768:	017d7840 	.word	0x017d7840

0800376c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003770:	4b03      	ldr	r3, [pc, #12]	@ (8003780 <HAL_RCC_GetHCLKFreq+0x14>)
 8003772:	681b      	ldr	r3, [r3, #0]
}
 8003774:	4618      	mov	r0, r3
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	20000000 	.word	0x20000000

08003784 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003788:	f7ff fff0 	bl	800376c <HAL_RCC_GetHCLKFreq>
 800378c:	4602      	mov	r2, r0
 800378e:	4b05      	ldr	r3, [pc, #20]	@ (80037a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	0a9b      	lsrs	r3, r3, #10
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	4903      	ldr	r1, [pc, #12]	@ (80037a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800379a:	5ccb      	ldrb	r3, [r1, r3]
 800379c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	40023800 	.word	0x40023800
 80037a8:	08005710 	.word	0x08005710

080037ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037b0:	f7ff ffdc 	bl	800376c <HAL_RCC_GetHCLKFreq>
 80037b4:	4602      	mov	r2, r0
 80037b6:	4b05      	ldr	r3, [pc, #20]	@ (80037cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	0b5b      	lsrs	r3, r3, #13
 80037bc:	f003 0307 	and.w	r3, r3, #7
 80037c0:	4903      	ldr	r1, [pc, #12]	@ (80037d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037c2:	5ccb      	ldrb	r3, [r1, r3]
 80037c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	40023800 	.word	0x40023800
 80037d0:	08005710 	.word	0x08005710

080037d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e041      	b.n	800386a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d106      	bne.n	8003800 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7fd feda 	bl	80015b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2202      	movs	r2, #2
 8003804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	3304      	adds	r3, #4
 8003810:	4619      	mov	r1, r3
 8003812:	4610      	mov	r0, r2
 8003814:	f000 fac0 	bl	8003d98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b082      	sub	sp, #8
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d101      	bne.n	8003884 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e041      	b.n	8003908 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b00      	cmp	r3, #0
 800388e:	d106      	bne.n	800389e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 f839 	bl	8003910 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2202      	movs	r2, #2
 80038a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	3304      	adds	r3, #4
 80038ae:	4619      	mov	r1, r3
 80038b0:	4610      	mov	r0, r2
 80038b2:	f000 fa71 	bl	8003d98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3708      	adds	r7, #8
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d109      	bne.n	8003948 <HAL_TIM_PWM_Start+0x24>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b01      	cmp	r3, #1
 800393e:	bf14      	ite	ne
 8003940:	2301      	movne	r3, #1
 8003942:	2300      	moveq	r3, #0
 8003944:	b2db      	uxtb	r3, r3
 8003946:	e022      	b.n	800398e <HAL_TIM_PWM_Start+0x6a>
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	2b04      	cmp	r3, #4
 800394c:	d109      	bne.n	8003962 <HAL_TIM_PWM_Start+0x3e>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b01      	cmp	r3, #1
 8003958:	bf14      	ite	ne
 800395a:	2301      	movne	r3, #1
 800395c:	2300      	moveq	r3, #0
 800395e:	b2db      	uxtb	r3, r3
 8003960:	e015      	b.n	800398e <HAL_TIM_PWM_Start+0x6a>
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	2b08      	cmp	r3, #8
 8003966:	d109      	bne.n	800397c <HAL_TIM_PWM_Start+0x58>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800396e:	b2db      	uxtb	r3, r3
 8003970:	2b01      	cmp	r3, #1
 8003972:	bf14      	ite	ne
 8003974:	2301      	movne	r3, #1
 8003976:	2300      	moveq	r3, #0
 8003978:	b2db      	uxtb	r3, r3
 800397a:	e008      	b.n	800398e <HAL_TIM_PWM_Start+0x6a>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003982:	b2db      	uxtb	r3, r3
 8003984:	2b01      	cmp	r3, #1
 8003986:	bf14      	ite	ne
 8003988:	2301      	movne	r3, #1
 800398a:	2300      	moveq	r3, #0
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e068      	b.n	8003a68 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d104      	bne.n	80039a6 <HAL_TIM_PWM_Start+0x82>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2202      	movs	r2, #2
 80039a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039a4:	e013      	b.n	80039ce <HAL_TIM_PWM_Start+0xaa>
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	2b04      	cmp	r3, #4
 80039aa:	d104      	bne.n	80039b6 <HAL_TIM_PWM_Start+0x92>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2202      	movs	r2, #2
 80039b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039b4:	e00b      	b.n	80039ce <HAL_TIM_PWM_Start+0xaa>
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	2b08      	cmp	r3, #8
 80039ba:	d104      	bne.n	80039c6 <HAL_TIM_PWM_Start+0xa2>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2202      	movs	r2, #2
 80039c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039c4:	e003      	b.n	80039ce <HAL_TIM_PWM_Start+0xaa>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2202      	movs	r2, #2
 80039ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2201      	movs	r2, #1
 80039d4:	6839      	ldr	r1, [r7, #0]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f000 fc90 	bl	80042fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a23      	ldr	r2, [pc, #140]	@ (8003a70 <HAL_TIM_PWM_Start+0x14c>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d107      	bne.n	80039f6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80039f4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a1d      	ldr	r2, [pc, #116]	@ (8003a70 <HAL_TIM_PWM_Start+0x14c>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d018      	beq.n	8003a32 <HAL_TIM_PWM_Start+0x10e>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a08:	d013      	beq.n	8003a32 <HAL_TIM_PWM_Start+0x10e>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a19      	ldr	r2, [pc, #100]	@ (8003a74 <HAL_TIM_PWM_Start+0x150>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d00e      	beq.n	8003a32 <HAL_TIM_PWM_Start+0x10e>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a17      	ldr	r2, [pc, #92]	@ (8003a78 <HAL_TIM_PWM_Start+0x154>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d009      	beq.n	8003a32 <HAL_TIM_PWM_Start+0x10e>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a16      	ldr	r2, [pc, #88]	@ (8003a7c <HAL_TIM_PWM_Start+0x158>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d004      	beq.n	8003a32 <HAL_TIM_PWM_Start+0x10e>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a14      	ldr	r2, [pc, #80]	@ (8003a80 <HAL_TIM_PWM_Start+0x15c>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d111      	bne.n	8003a56 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2b06      	cmp	r3, #6
 8003a42:	d010      	beq.n	8003a66 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f042 0201 	orr.w	r2, r2, #1
 8003a52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a54:	e007      	b.n	8003a66 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f042 0201 	orr.w	r2, r2, #1
 8003a64:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40010000 	.word	0x40010000
 8003a74:	40000400 	.word	0x40000400
 8003a78:	40000800 	.word	0x40000800
 8003a7c:	40000c00 	.word	0x40000c00
 8003a80:	40014000 	.word	0x40014000

08003a84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b086      	sub	sp, #24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a90:	2300      	movs	r3, #0
 8003a92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d101      	bne.n	8003aa2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	e0ae      	b.n	8003c00 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2b0c      	cmp	r3, #12
 8003aae:	f200 809f 	bhi.w	8003bf0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003ab2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ab8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab8:	08003aed 	.word	0x08003aed
 8003abc:	08003bf1 	.word	0x08003bf1
 8003ac0:	08003bf1 	.word	0x08003bf1
 8003ac4:	08003bf1 	.word	0x08003bf1
 8003ac8:	08003b2d 	.word	0x08003b2d
 8003acc:	08003bf1 	.word	0x08003bf1
 8003ad0:	08003bf1 	.word	0x08003bf1
 8003ad4:	08003bf1 	.word	0x08003bf1
 8003ad8:	08003b6f 	.word	0x08003b6f
 8003adc:	08003bf1 	.word	0x08003bf1
 8003ae0:	08003bf1 	.word	0x08003bf1
 8003ae4:	08003bf1 	.word	0x08003bf1
 8003ae8:	08003baf 	.word	0x08003baf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68b9      	ldr	r1, [r7, #8]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 f9dc 	bl	8003eb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	699a      	ldr	r2, [r3, #24]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f042 0208 	orr.w	r2, r2, #8
 8003b06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	699a      	ldr	r2, [r3, #24]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 0204 	bic.w	r2, r2, #4
 8003b16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6999      	ldr	r1, [r3, #24]
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	691a      	ldr	r2, [r3, #16]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	619a      	str	r2, [r3, #24]
      break;
 8003b2a:	e064      	b.n	8003bf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68b9      	ldr	r1, [r7, #8]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f000 fa22 	bl	8003f7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	699a      	ldr	r2, [r3, #24]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	699a      	ldr	r2, [r3, #24]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6999      	ldr	r1, [r3, #24]
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	021a      	lsls	r2, r3, #8
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	619a      	str	r2, [r3, #24]
      break;
 8003b6c:	e043      	b.n	8003bf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68b9      	ldr	r1, [r7, #8]
 8003b74:	4618      	mov	r0, r3
 8003b76:	f000 fa6d 	bl	8004054 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	69da      	ldr	r2, [r3, #28]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f042 0208 	orr.w	r2, r2, #8
 8003b88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	69da      	ldr	r2, [r3, #28]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 0204 	bic.w	r2, r2, #4
 8003b98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	69d9      	ldr	r1, [r3, #28]
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	691a      	ldr	r2, [r3, #16]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	61da      	str	r2, [r3, #28]
      break;
 8003bac:	e023      	b.n	8003bf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68b9      	ldr	r1, [r7, #8]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f000 fab7 	bl	8004128 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	69da      	ldr	r2, [r3, #28]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	69da      	ldr	r2, [r3, #28]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	69d9      	ldr	r1, [r3, #28]
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	021a      	lsls	r2, r3, #8
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	430a      	orrs	r2, r1
 8003bec:	61da      	str	r2, [r3, #28]
      break;
 8003bee:	e002      	b.n	8003bf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	75fb      	strb	r3, [r7, #23]
      break;
 8003bf4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003bfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3718      	adds	r7, #24
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c12:	2300      	movs	r3, #0
 8003c14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d101      	bne.n	8003c24 <HAL_TIM_ConfigClockSource+0x1c>
 8003c20:	2302      	movs	r3, #2
 8003c22:	e0b4      	b.n	8003d8e <HAL_TIM_ConfigClockSource+0x186>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2202      	movs	r2, #2
 8003c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003c42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68ba      	ldr	r2, [r7, #8]
 8003c52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c5c:	d03e      	beq.n	8003cdc <HAL_TIM_ConfigClockSource+0xd4>
 8003c5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c62:	f200 8087 	bhi.w	8003d74 <HAL_TIM_ConfigClockSource+0x16c>
 8003c66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c6a:	f000 8086 	beq.w	8003d7a <HAL_TIM_ConfigClockSource+0x172>
 8003c6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c72:	d87f      	bhi.n	8003d74 <HAL_TIM_ConfigClockSource+0x16c>
 8003c74:	2b70      	cmp	r3, #112	@ 0x70
 8003c76:	d01a      	beq.n	8003cae <HAL_TIM_ConfigClockSource+0xa6>
 8003c78:	2b70      	cmp	r3, #112	@ 0x70
 8003c7a:	d87b      	bhi.n	8003d74 <HAL_TIM_ConfigClockSource+0x16c>
 8003c7c:	2b60      	cmp	r3, #96	@ 0x60
 8003c7e:	d050      	beq.n	8003d22 <HAL_TIM_ConfigClockSource+0x11a>
 8003c80:	2b60      	cmp	r3, #96	@ 0x60
 8003c82:	d877      	bhi.n	8003d74 <HAL_TIM_ConfigClockSource+0x16c>
 8003c84:	2b50      	cmp	r3, #80	@ 0x50
 8003c86:	d03c      	beq.n	8003d02 <HAL_TIM_ConfigClockSource+0xfa>
 8003c88:	2b50      	cmp	r3, #80	@ 0x50
 8003c8a:	d873      	bhi.n	8003d74 <HAL_TIM_ConfigClockSource+0x16c>
 8003c8c:	2b40      	cmp	r3, #64	@ 0x40
 8003c8e:	d058      	beq.n	8003d42 <HAL_TIM_ConfigClockSource+0x13a>
 8003c90:	2b40      	cmp	r3, #64	@ 0x40
 8003c92:	d86f      	bhi.n	8003d74 <HAL_TIM_ConfigClockSource+0x16c>
 8003c94:	2b30      	cmp	r3, #48	@ 0x30
 8003c96:	d064      	beq.n	8003d62 <HAL_TIM_ConfigClockSource+0x15a>
 8003c98:	2b30      	cmp	r3, #48	@ 0x30
 8003c9a:	d86b      	bhi.n	8003d74 <HAL_TIM_ConfigClockSource+0x16c>
 8003c9c:	2b20      	cmp	r3, #32
 8003c9e:	d060      	beq.n	8003d62 <HAL_TIM_ConfigClockSource+0x15a>
 8003ca0:	2b20      	cmp	r3, #32
 8003ca2:	d867      	bhi.n	8003d74 <HAL_TIM_ConfigClockSource+0x16c>
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d05c      	beq.n	8003d62 <HAL_TIM_ConfigClockSource+0x15a>
 8003ca8:	2b10      	cmp	r3, #16
 8003caa:	d05a      	beq.n	8003d62 <HAL_TIM_ConfigClockSource+0x15a>
 8003cac:	e062      	b.n	8003d74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003cbe:	f000 fafd 	bl	80042bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003cd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68ba      	ldr	r2, [r7, #8]
 8003cd8:	609a      	str	r2, [r3, #8]
      break;
 8003cda:	e04f      	b.n	8003d7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003cec:	f000 fae6 	bl	80042bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	689a      	ldr	r2, [r3, #8]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003cfe:	609a      	str	r2, [r3, #8]
      break;
 8003d00:	e03c      	b.n	8003d7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d0e:	461a      	mov	r2, r3
 8003d10:	f000 fa5a 	bl	80041c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2150      	movs	r1, #80	@ 0x50
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 fab3 	bl	8004286 <TIM_ITRx_SetConfig>
      break;
 8003d20:	e02c      	b.n	8003d7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d2e:	461a      	mov	r2, r3
 8003d30:	f000 fa79 	bl	8004226 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2160      	movs	r1, #96	@ 0x60
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 faa3 	bl	8004286 <TIM_ITRx_SetConfig>
      break;
 8003d40:	e01c      	b.n	8003d7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d4e:	461a      	mov	r2, r3
 8003d50:	f000 fa3a 	bl	80041c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2140      	movs	r1, #64	@ 0x40
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f000 fa93 	bl	8004286 <TIM_ITRx_SetConfig>
      break;
 8003d60:	e00c      	b.n	8003d7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	4610      	mov	r0, r2
 8003d6e:	f000 fa8a 	bl	8004286 <TIM_ITRx_SetConfig>
      break;
 8003d72:	e003      	b.n	8003d7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	73fb      	strb	r3, [r7, #15]
      break;
 8003d78:	e000      	b.n	8003d7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
	...

08003d98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a3a      	ldr	r2, [pc, #232]	@ (8003e94 <TIM_Base_SetConfig+0xfc>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d00f      	beq.n	8003dd0 <TIM_Base_SetConfig+0x38>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003db6:	d00b      	beq.n	8003dd0 <TIM_Base_SetConfig+0x38>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a37      	ldr	r2, [pc, #220]	@ (8003e98 <TIM_Base_SetConfig+0x100>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d007      	beq.n	8003dd0 <TIM_Base_SetConfig+0x38>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a36      	ldr	r2, [pc, #216]	@ (8003e9c <TIM_Base_SetConfig+0x104>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d003      	beq.n	8003dd0 <TIM_Base_SetConfig+0x38>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a35      	ldr	r2, [pc, #212]	@ (8003ea0 <TIM_Base_SetConfig+0x108>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d108      	bne.n	8003de2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a2b      	ldr	r2, [pc, #172]	@ (8003e94 <TIM_Base_SetConfig+0xfc>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d01b      	beq.n	8003e22 <TIM_Base_SetConfig+0x8a>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003df0:	d017      	beq.n	8003e22 <TIM_Base_SetConfig+0x8a>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a28      	ldr	r2, [pc, #160]	@ (8003e98 <TIM_Base_SetConfig+0x100>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d013      	beq.n	8003e22 <TIM_Base_SetConfig+0x8a>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a27      	ldr	r2, [pc, #156]	@ (8003e9c <TIM_Base_SetConfig+0x104>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d00f      	beq.n	8003e22 <TIM_Base_SetConfig+0x8a>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a26      	ldr	r2, [pc, #152]	@ (8003ea0 <TIM_Base_SetConfig+0x108>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d00b      	beq.n	8003e22 <TIM_Base_SetConfig+0x8a>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a25      	ldr	r2, [pc, #148]	@ (8003ea4 <TIM_Base_SetConfig+0x10c>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d007      	beq.n	8003e22 <TIM_Base_SetConfig+0x8a>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a24      	ldr	r2, [pc, #144]	@ (8003ea8 <TIM_Base_SetConfig+0x110>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d003      	beq.n	8003e22 <TIM_Base_SetConfig+0x8a>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a23      	ldr	r2, [pc, #140]	@ (8003eac <TIM_Base_SetConfig+0x114>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d108      	bne.n	8003e34 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	689a      	ldr	r2, [r3, #8]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a0e      	ldr	r2, [pc, #56]	@ (8003e94 <TIM_Base_SetConfig+0xfc>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d103      	bne.n	8003e68 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	691a      	ldr	r2, [r3, #16]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d105      	bne.n	8003e86 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	f023 0201 	bic.w	r2, r3, #1
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	611a      	str	r2, [r3, #16]
  }
}
 8003e86:	bf00      	nop
 8003e88:	3714      	adds	r7, #20
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	40010000 	.word	0x40010000
 8003e98:	40000400 	.word	0x40000400
 8003e9c:	40000800 	.word	0x40000800
 8003ea0:	40000c00 	.word	0x40000c00
 8003ea4:	40014000 	.word	0x40014000
 8003ea8:	40014400 	.word	0x40014400
 8003eac:	40014800 	.word	0x40014800

08003eb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b087      	sub	sp, #28
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	f023 0201 	bic.w	r2, r3, #1
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f023 0303 	bic.w	r3, r3, #3
 8003ee6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	f023 0302 	bic.w	r3, r3, #2
 8003ef8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	697a      	ldr	r2, [r7, #20]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a1c      	ldr	r2, [pc, #112]	@ (8003f78 <TIM_OC1_SetConfig+0xc8>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d10c      	bne.n	8003f26 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	f023 0308 	bic.w	r3, r3, #8
 8003f12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	697a      	ldr	r2, [r7, #20]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	f023 0304 	bic.w	r3, r3, #4
 8003f24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a13      	ldr	r2, [pc, #76]	@ (8003f78 <TIM_OC1_SetConfig+0xc8>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d111      	bne.n	8003f52 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	685a      	ldr	r2, [r3, #4]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	621a      	str	r2, [r3, #32]
}
 8003f6c:	bf00      	nop
 8003f6e:	371c      	adds	r7, #28
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr
 8003f78:	40010000 	.word	0x40010000

08003f7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b087      	sub	sp, #28
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a1b      	ldr	r3, [r3, #32]
 8003f90:	f023 0210 	bic.w	r2, r3, #16
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003faa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	021b      	lsls	r3, r3, #8
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	f023 0320 	bic.w	r3, r3, #32
 8003fc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	011b      	lsls	r3, r3, #4
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a1e      	ldr	r2, [pc, #120]	@ (8004050 <TIM_OC2_SetConfig+0xd4>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d10d      	bne.n	8003ff8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fe2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	011b      	lsls	r3, r3, #4
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ff6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a15      	ldr	r2, [pc, #84]	@ (8004050 <TIM_OC2_SetConfig+0xd4>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d113      	bne.n	8004028 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004006:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800400e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	695b      	ldr	r3, [r3, #20]
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	4313      	orrs	r3, r2
 800401a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	4313      	orrs	r3, r2
 8004026:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	685a      	ldr	r2, [r3, #4]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	621a      	str	r2, [r3, #32]
}
 8004042:	bf00      	nop
 8004044:	371c      	adds	r7, #28
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	40010000 	.word	0x40010000

08004054 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004054:	b480      	push	{r7}
 8004056:	b087      	sub	sp, #28
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a1b      	ldr	r3, [r3, #32]
 8004068:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	69db      	ldr	r3, [r3, #28]
 800407a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f023 0303 	bic.w	r3, r3, #3
 800408a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	4313      	orrs	r3, r2
 8004094:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800409c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	021b      	lsls	r3, r3, #8
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a1d      	ldr	r2, [pc, #116]	@ (8004124 <TIM_OC3_SetConfig+0xd0>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d10d      	bne.n	80040ce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80040b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	021b      	lsls	r3, r3, #8
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80040cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a14      	ldr	r2, [pc, #80]	@ (8004124 <TIM_OC3_SetConfig+0xd0>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d113      	bne.n	80040fe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80040dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80040e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	011b      	lsls	r3, r3, #4
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	011b      	lsls	r3, r3, #4
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	693a      	ldr	r2, [r7, #16]
 8004102:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	685a      	ldr	r2, [r3, #4]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	621a      	str	r2, [r3, #32]
}
 8004118:	bf00      	nop
 800411a:	371c      	adds	r7, #28
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr
 8004124:	40010000 	.word	0x40010000

08004128 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004128:	b480      	push	{r7}
 800412a:	b087      	sub	sp, #28
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	69db      	ldr	r3, [r3, #28]
 800414e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004156:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800415e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	021b      	lsls	r3, r3, #8
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	4313      	orrs	r3, r2
 800416a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004172:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	031b      	lsls	r3, r3, #12
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	4313      	orrs	r3, r2
 800417e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a10      	ldr	r2, [pc, #64]	@ (80041c4 <TIM_OC4_SetConfig+0x9c>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d109      	bne.n	800419c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800418e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	019b      	lsls	r3, r3, #6
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	4313      	orrs	r3, r2
 800419a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	685a      	ldr	r2, [r3, #4]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	621a      	str	r2, [r3, #32]
}
 80041b6:	bf00      	nop
 80041b8:	371c      	adds	r7, #28
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	40010000 	.word	0x40010000

080041c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b087      	sub	sp, #28
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6a1b      	ldr	r3, [r3, #32]
 80041d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	f023 0201 	bic.w	r2, r3, #1
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80041f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	011b      	lsls	r3, r3, #4
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	f023 030a 	bic.w	r3, r3, #10
 8004204:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	4313      	orrs	r3, r2
 800420c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	621a      	str	r2, [r3, #32]
}
 800421a:	bf00      	nop
 800421c:	371c      	adds	r7, #28
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr

08004226 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004226:	b480      	push	{r7}
 8004228:	b087      	sub	sp, #28
 800422a:	af00      	add	r7, sp, #0
 800422c:	60f8      	str	r0, [r7, #12]
 800422e:	60b9      	str	r1, [r7, #8]
 8004230:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6a1b      	ldr	r3, [r3, #32]
 800423c:	f023 0210 	bic.w	r2, r3, #16
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004250:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	031b      	lsls	r3, r3, #12
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	4313      	orrs	r3, r2
 800425a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004262:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	011b      	lsls	r3, r3, #4
 8004268:	697a      	ldr	r2, [r7, #20]
 800426a:	4313      	orrs	r3, r2
 800426c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	621a      	str	r2, [r3, #32]
}
 800427a:	bf00      	nop
 800427c:	371c      	adds	r7, #28
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004286:	b480      	push	{r7}
 8004288:	b085      	sub	sp, #20
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
 800428e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800429c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	f043 0307 	orr.w	r3, r3, #7
 80042a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	609a      	str	r2, [r3, #8]
}
 80042b0:	bf00      	nop
 80042b2:	3714      	adds	r7, #20
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042bc:	b480      	push	{r7}
 80042be:	b087      	sub	sp, #28
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
 80042c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80042d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	021a      	lsls	r2, r3, #8
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	431a      	orrs	r2, r3
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	697a      	ldr	r2, [r7, #20]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	609a      	str	r2, [r3, #8]
}
 80042f0:	bf00      	nop
 80042f2:	371c      	adds	r7, #28
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b087      	sub	sp, #28
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	f003 031f 	and.w	r3, r3, #31
 800430e:	2201      	movs	r2, #1
 8004310:	fa02 f303 	lsl.w	r3, r2, r3
 8004314:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6a1a      	ldr	r2, [r3, #32]
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	43db      	mvns	r3, r3
 800431e:	401a      	ands	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6a1a      	ldr	r2, [r3, #32]
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	f003 031f 	and.w	r3, r3, #31
 800432e:	6879      	ldr	r1, [r7, #4]
 8004330:	fa01 f303 	lsl.w	r3, r1, r3
 8004334:	431a      	orrs	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	621a      	str	r2, [r3, #32]
}
 800433a:	bf00      	nop
 800433c:	371c      	adds	r7, #28
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
	...

08004348 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004358:	2b01      	cmp	r3, #1
 800435a:	d101      	bne.n	8004360 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800435c:	2302      	movs	r3, #2
 800435e:	e050      	b.n	8004402 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2202      	movs	r2, #2
 800436c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004386:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	4313      	orrs	r3, r2
 8004390:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a1c      	ldr	r2, [pc, #112]	@ (8004410 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d018      	beq.n	80043d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043ac:	d013      	beq.n	80043d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a18      	ldr	r2, [pc, #96]	@ (8004414 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d00e      	beq.n	80043d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a16      	ldr	r2, [pc, #88]	@ (8004418 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d009      	beq.n	80043d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a15      	ldr	r2, [pc, #84]	@ (800441c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d004      	beq.n	80043d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a13      	ldr	r2, [pc, #76]	@ (8004420 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d10c      	bne.n	80043f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	68ba      	ldr	r2, [r7, #8]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68ba      	ldr	r2, [r7, #8]
 80043ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3714      	adds	r7, #20
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	40010000 	.word	0x40010000
 8004414:	40000400 	.word	0x40000400
 8004418:	40000800 	.word	0x40000800
 800441c:	40000c00 	.word	0x40000c00
 8004420:	40014000 	.word	0x40014000

08004424 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d101      	bne.n	8004436 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e042      	b.n	80044bc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d106      	bne.n	8004450 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f7fd f970 	bl	8001730 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2224      	movs	r2, #36	@ 0x24
 8004454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68da      	ldr	r2, [r3, #12]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004466:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 fe75 	bl	8005158 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	691a      	ldr	r2, [r3, #16]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800447c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	695a      	ldr	r2, [r3, #20]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800448c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68da      	ldr	r2, [r3, #12]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800449c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2220      	movs	r2, #32
 80044a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2220      	movs	r2, #32
 80044b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3708      	adds	r7, #8
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	4613      	mov	r3, r2
 80044d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2b20      	cmp	r3, #32
 80044dc:	d112      	bne.n	8004504 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d002      	beq.n	80044ea <HAL_UART_Receive_DMA+0x26>
 80044e4:	88fb      	ldrh	r3, [r7, #6]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e00b      	b.n	8004506 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80044f4:	88fb      	ldrh	r3, [r7, #6]
 80044f6:	461a      	mov	r2, r3
 80044f8:	68b9      	ldr	r1, [r7, #8]
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f000 fbcc 	bl	8004c98 <UART_Start_Receive_DMA>
 8004500:	4603      	mov	r3, r0
 8004502:	e000      	b.n	8004506 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004504:	2302      	movs	r3, #2
  }
}
 8004506:	4618      	mov	r0, r3
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
	...

08004510 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b0ba      	sub	sp, #232	@ 0xe8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004536:	2300      	movs	r3, #0
 8004538:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800453c:	2300      	movs	r3, #0
 800453e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004546:	f003 030f 	and.w	r3, r3, #15
 800454a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800454e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10f      	bne.n	8004576 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800455a:	f003 0320 	and.w	r3, r3, #32
 800455e:	2b00      	cmp	r3, #0
 8004560:	d009      	beq.n	8004576 <HAL_UART_IRQHandler+0x66>
 8004562:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004566:	f003 0320 	and.w	r3, r3, #32
 800456a:	2b00      	cmp	r3, #0
 800456c:	d003      	beq.n	8004576 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 fd33 	bl	8004fda <UART_Receive_IT>
      return;
 8004574:	e25b      	b.n	8004a2e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004576:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800457a:	2b00      	cmp	r3, #0
 800457c:	f000 80de 	beq.w	800473c <HAL_UART_IRQHandler+0x22c>
 8004580:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b00      	cmp	r3, #0
 800458a:	d106      	bne.n	800459a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800458c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004590:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004594:	2b00      	cmp	r3, #0
 8004596:	f000 80d1 	beq.w	800473c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800459a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00b      	beq.n	80045be <HAL_UART_IRQHandler+0xae>
 80045a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d005      	beq.n	80045be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045b6:	f043 0201 	orr.w	r2, r3, #1
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045c2:	f003 0304 	and.w	r3, r3, #4
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00b      	beq.n	80045e2 <HAL_UART_IRQHandler+0xd2>
 80045ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d005      	beq.n	80045e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045da:	f043 0202 	orr.w	r2, r3, #2
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00b      	beq.n	8004606 <HAL_UART_IRQHandler+0xf6>
 80045ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d005      	beq.n	8004606 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045fe:	f043 0204 	orr.w	r2, r3, #4
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800460a:	f003 0308 	and.w	r3, r3, #8
 800460e:	2b00      	cmp	r3, #0
 8004610:	d011      	beq.n	8004636 <HAL_UART_IRQHandler+0x126>
 8004612:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004616:	f003 0320 	and.w	r3, r3, #32
 800461a:	2b00      	cmp	r3, #0
 800461c:	d105      	bne.n	800462a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800461e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b00      	cmp	r3, #0
 8004628:	d005      	beq.n	8004636 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800462e:	f043 0208 	orr.w	r2, r3, #8
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800463a:	2b00      	cmp	r3, #0
 800463c:	f000 81f2 	beq.w	8004a24 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004644:	f003 0320 	and.w	r3, r3, #32
 8004648:	2b00      	cmp	r3, #0
 800464a:	d008      	beq.n	800465e <HAL_UART_IRQHandler+0x14e>
 800464c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004650:	f003 0320 	and.w	r3, r3, #32
 8004654:	2b00      	cmp	r3, #0
 8004656:	d002      	beq.n	800465e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 fcbe 	bl	8004fda <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	695b      	ldr	r3, [r3, #20]
 8004664:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004668:	2b40      	cmp	r3, #64	@ 0x40
 800466a:	bf0c      	ite	eq
 800466c:	2301      	moveq	r3, #1
 800466e:	2300      	movne	r3, #0
 8004670:	b2db      	uxtb	r3, r3
 8004672:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800467a:	f003 0308 	and.w	r3, r3, #8
 800467e:	2b00      	cmp	r3, #0
 8004680:	d103      	bne.n	800468a <HAL_UART_IRQHandler+0x17a>
 8004682:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004686:	2b00      	cmp	r3, #0
 8004688:	d04f      	beq.n	800472a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 fbc6 	bl	8004e1c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800469a:	2b40      	cmp	r3, #64	@ 0x40
 800469c:	d141      	bne.n	8004722 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	3314      	adds	r3, #20
 80046a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80046ac:	e853 3f00 	ldrex	r3, [r3]
 80046b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80046b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80046b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	3314      	adds	r3, #20
 80046c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80046ca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80046ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80046d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80046da:	e841 2300 	strex	r3, r2, [r1]
 80046de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80046e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1d9      	bne.n	800469e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d013      	beq.n	800471a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046f6:	4a7e      	ldr	r2, [pc, #504]	@ (80048f0 <HAL_UART_IRQHandler+0x3e0>)
 80046f8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046fe:	4618      	mov	r0, r3
 8004700:	f7fd ffe6 	bl	80026d0 <HAL_DMA_Abort_IT>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d016      	beq.n	8004738 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800470e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004714:	4610      	mov	r0, r2
 8004716:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004718:	e00e      	b.n	8004738 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f9a8 	bl	8004a70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004720:	e00a      	b.n	8004738 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f9a4 	bl	8004a70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004728:	e006      	b.n	8004738 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f9a0 	bl	8004a70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004736:	e175      	b.n	8004a24 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004738:	bf00      	nop
    return;
 800473a:	e173      	b.n	8004a24 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004740:	2b01      	cmp	r3, #1
 8004742:	f040 814f 	bne.w	80049e4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800474a:	f003 0310 	and.w	r3, r3, #16
 800474e:	2b00      	cmp	r3, #0
 8004750:	f000 8148 	beq.w	80049e4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004758:	f003 0310 	and.w	r3, r3, #16
 800475c:	2b00      	cmp	r3, #0
 800475e:	f000 8141 	beq.w	80049e4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004762:	2300      	movs	r3, #0
 8004764:	60bb      	str	r3, [r7, #8]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	60bb      	str	r3, [r7, #8]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	60bb      	str	r3, [r7, #8]
 8004776:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004782:	2b40      	cmp	r3, #64	@ 0x40
 8004784:	f040 80b6 	bne.w	80048f4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004794:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 8145 	beq.w	8004a28 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80047a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80047a6:	429a      	cmp	r2, r3
 80047a8:	f080 813e 	bcs.w	8004a28 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80047b2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047b8:	69db      	ldr	r3, [r3, #28]
 80047ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047be:	f000 8088 	beq.w	80048d2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	330c      	adds	r3, #12
 80047c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80047d0:	e853 3f00 	ldrex	r3, [r3]
 80047d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80047d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80047dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	330c      	adds	r3, #12
 80047ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80047ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80047f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80047fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80047fe:	e841 2300 	strex	r3, r2, [r1]
 8004802:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004806:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1d9      	bne.n	80047c2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	3314      	adds	r3, #20
 8004814:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004816:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004818:	e853 3f00 	ldrex	r3, [r3]
 800481c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800481e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004820:	f023 0301 	bic.w	r3, r3, #1
 8004824:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	3314      	adds	r3, #20
 800482e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004832:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004836:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004838:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800483a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800483e:	e841 2300 	strex	r3, r2, [r1]
 8004842:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004844:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1e1      	bne.n	800480e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	3314      	adds	r3, #20
 8004850:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004852:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004854:	e853 3f00 	ldrex	r3, [r3]
 8004858:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800485a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800485c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004860:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	3314      	adds	r3, #20
 800486a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800486e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004870:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004872:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004874:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004876:	e841 2300 	strex	r3, r2, [r1]
 800487a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800487c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1e3      	bne.n	800484a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2220      	movs	r2, #32
 8004886:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	330c      	adds	r3, #12
 8004896:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004898:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800489a:	e853 3f00 	ldrex	r3, [r3]
 800489e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80048a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048a2:	f023 0310 	bic.w	r3, r3, #16
 80048a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	330c      	adds	r3, #12
 80048b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80048b4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80048b6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80048ba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80048bc:	e841 2300 	strex	r3, r2, [r1]
 80048c0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80048c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1e3      	bne.n	8004890 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7fd fe8f 	bl	80025f0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2202      	movs	r2, #2
 80048d6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	4619      	mov	r1, r3
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 f8cb 	bl	8004a84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80048ee:	e09b      	b.n	8004a28 <HAL_UART_IRQHandler+0x518>
 80048f0:	08004ee3 	.word	0x08004ee3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004908:	b29b      	uxth	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	f000 808e 	beq.w	8004a2c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004910:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004914:	2b00      	cmp	r3, #0
 8004916:	f000 8089 	beq.w	8004a2c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	330c      	adds	r3, #12
 8004920:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004924:	e853 3f00 	ldrex	r3, [r3]
 8004928:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800492a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800492c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004930:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	330c      	adds	r3, #12
 800493a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800493e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004940:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004942:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004944:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004946:	e841 2300 	strex	r3, r2, [r1]
 800494a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800494c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1e3      	bne.n	800491a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	3314      	adds	r3, #20
 8004958:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495c:	e853 3f00 	ldrex	r3, [r3]
 8004960:	623b      	str	r3, [r7, #32]
   return(result);
 8004962:	6a3b      	ldr	r3, [r7, #32]
 8004964:	f023 0301 	bic.w	r3, r3, #1
 8004968:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	3314      	adds	r3, #20
 8004972:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004976:	633a      	str	r2, [r7, #48]	@ 0x30
 8004978:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800497c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800497e:	e841 2300 	strex	r3, r2, [r1]
 8004982:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1e3      	bne.n	8004952 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2220      	movs	r2, #32
 800498e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	330c      	adds	r3, #12
 800499e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	e853 3f00 	ldrex	r3, [r3]
 80049a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f023 0310 	bic.w	r3, r3, #16
 80049ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	330c      	adds	r3, #12
 80049b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80049bc:	61fa      	str	r2, [r7, #28]
 80049be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c0:	69b9      	ldr	r1, [r7, #24]
 80049c2:	69fa      	ldr	r2, [r7, #28]
 80049c4:	e841 2300 	strex	r3, r2, [r1]
 80049c8:	617b      	str	r3, [r7, #20]
   return(result);
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1e3      	bne.n	8004998 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2202      	movs	r2, #2
 80049d4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80049da:	4619      	mov	r1, r3
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 f851 	bl	8004a84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049e2:	e023      	b.n	8004a2c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80049e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d009      	beq.n	8004a04 <HAL_UART_IRQHandler+0x4f4>
 80049f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d003      	beq.n	8004a04 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 fa84 	bl	8004f0a <UART_Transmit_IT>
    return;
 8004a02:	e014      	b.n	8004a2e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00e      	beq.n	8004a2e <HAL_UART_IRQHandler+0x51e>
 8004a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d008      	beq.n	8004a2e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 fac4 	bl	8004faa <UART_EndTransmit_IT>
    return;
 8004a22:	e004      	b.n	8004a2e <HAL_UART_IRQHandler+0x51e>
    return;
 8004a24:	bf00      	nop
 8004a26:	e002      	b.n	8004a2e <HAL_UART_IRQHandler+0x51e>
      return;
 8004a28:	bf00      	nop
 8004a2a:	e000      	b.n	8004a2e <HAL_UART_IRQHandler+0x51e>
      return;
 8004a2c:	bf00      	nop
  }
}
 8004a2e:	37e8      	adds	r7, #232	@ 0xe8
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004a64:	bf00      	nop
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a78:	bf00      	nop
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b09c      	sub	sp, #112	@ 0x70
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aa8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d172      	bne.n	8004b9e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004ab8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004aba:	2200      	movs	r2, #0
 8004abc:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004abe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	330c      	adds	r3, #12
 8004ac4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ac8:	e853 3f00 	ldrex	r3, [r3]
 8004acc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004ace:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ad0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ad4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ad6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	330c      	adds	r3, #12
 8004adc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004ade:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004ae0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004ae4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004ae6:	e841 2300 	strex	r3, r2, [r1]
 8004aea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004aec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1e5      	bne.n	8004abe <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004af2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	3314      	adds	r3, #20
 8004af8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004afc:	e853 3f00 	ldrex	r3, [r3]
 8004b00:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b04:	f023 0301 	bic.w	r3, r3, #1
 8004b08:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	3314      	adds	r3, #20
 8004b10:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004b12:	647a      	str	r2, [r7, #68]	@ 0x44
 8004b14:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b16:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b1a:	e841 2300 	strex	r3, r2, [r1]
 8004b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1e5      	bne.n	8004af2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	3314      	adds	r3, #20
 8004b2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b30:	e853 3f00 	ldrex	r3, [r3]
 8004b34:	623b      	str	r3, [r7, #32]
   return(result);
 8004b36:	6a3b      	ldr	r3, [r7, #32]
 8004b38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b3c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	3314      	adds	r3, #20
 8004b44:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004b46:	633a      	str	r2, [r7, #48]	@ 0x30
 8004b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b4e:	e841 2300 	strex	r3, r2, [r1]
 8004b52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1e5      	bne.n	8004b26 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004b5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b5c:	2220      	movs	r2, #32
 8004b5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d119      	bne.n	8004b9e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	330c      	adds	r3, #12
 8004b70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	e853 3f00 	ldrex	r3, [r3]
 8004b78:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f023 0310 	bic.w	r3, r3, #16
 8004b80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	330c      	adds	r3, #12
 8004b88:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004b8a:	61fa      	str	r2, [r7, #28]
 8004b8c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b8e:	69b9      	ldr	r1, [r7, #24]
 8004b90:	69fa      	ldr	r2, [r7, #28]
 8004b92:	e841 2300 	strex	r3, r2, [r1]
 8004b96:	617b      	str	r3, [r7, #20]
   return(result);
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1e5      	bne.n	8004b6a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ba4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d106      	bne.n	8004bba <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bae:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004bb4:	f7ff ff66 	bl	8004a84 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004bb8:	e002      	b.n	8004bc0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004bba:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004bbc:	f7ff ff44 	bl	8004a48 <HAL_UART_RxCpltCallback>
}
 8004bc0:	bf00      	nop
 8004bc2:	3770      	adds	r7, #112	@ 0x70
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bd4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d108      	bne.n	8004bf6 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004be8:	085b      	lsrs	r3, r3, #1
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	4619      	mov	r1, r3
 8004bee:	68f8      	ldr	r0, [r7, #12]
 8004bf0:	f7ff ff48 	bl	8004a84 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004bf4:	e002      	b.n	8004bfc <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004bf6:	68f8      	ldr	r0, [r7, #12]
 8004bf8:	f7ff ff30 	bl	8004a5c <HAL_UART_RxHalfCpltCallback>
}
 8004bfc:	bf00      	nop
 8004bfe:	3710      	adds	r7, #16
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c14:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c20:	2b80      	cmp	r3, #128	@ 0x80
 8004c22:	bf0c      	ite	eq
 8004c24:	2301      	moveq	r3, #1
 8004c26:	2300      	movne	r3, #0
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	2b21      	cmp	r3, #33	@ 0x21
 8004c36:	d108      	bne.n	8004c4a <UART_DMAError+0x46>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d005      	beq.n	8004c4a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	2200      	movs	r2, #0
 8004c42:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004c44:	68b8      	ldr	r0, [r7, #8]
 8004c46:	f000 f8c1 	bl	8004dcc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	695b      	ldr	r3, [r3, #20]
 8004c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c54:	2b40      	cmp	r3, #64	@ 0x40
 8004c56:	bf0c      	ite	eq
 8004c58:	2301      	moveq	r3, #1
 8004c5a:	2300      	movne	r3, #0
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	2b22      	cmp	r3, #34	@ 0x22
 8004c6a:	d108      	bne.n	8004c7e <UART_DMAError+0x7a>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d005      	beq.n	8004c7e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	2200      	movs	r2, #0
 8004c76:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004c78:	68b8      	ldr	r0, [r7, #8]
 8004c7a:	f000 f8cf 	bl	8004e1c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c82:	f043 0210 	orr.w	r2, r3, #16
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c8a:	68b8      	ldr	r0, [r7, #8]
 8004c8c:	f7ff fef0 	bl	8004a70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c90:	bf00      	nop
 8004c92:	3710      	adds	r7, #16
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b098      	sub	sp, #96	@ 0x60
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004ca6:	68ba      	ldr	r2, [r7, #8]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	88fa      	ldrh	r2, [r7, #6]
 8004cb0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2222      	movs	r2, #34	@ 0x22
 8004cbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cc4:	4a3e      	ldr	r2, [pc, #248]	@ (8004dc0 <UART_Start_Receive_DMA+0x128>)
 8004cc6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ccc:	4a3d      	ldr	r2, [pc, #244]	@ (8004dc4 <UART_Start_Receive_DMA+0x12c>)
 8004cce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cd4:	4a3c      	ldr	r2, [pc, #240]	@ (8004dc8 <UART_Start_Receive_DMA+0x130>)
 8004cd6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cdc:	2200      	movs	r2, #0
 8004cde:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004ce0:	f107 0308 	add.w	r3, r7, #8
 8004ce4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	3304      	adds	r3, #4
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	88fb      	ldrh	r3, [r7, #6]
 8004cf8:	f7fd fc22 	bl	8002540 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	613b      	str	r3, [r7, #16]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	613b      	str	r3, [r7, #16]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	613b      	str	r3, [r7, #16]
 8004d10:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d019      	beq.n	8004d4e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	330c      	adds	r3, #12
 8004d20:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d24:	e853 3f00 	ldrex	r3, [r3]
 8004d28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004d2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d30:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	330c      	adds	r3, #12
 8004d38:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004d3a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004d3c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d3e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004d40:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d42:	e841 2300 	strex	r3, r2, [r1]
 8004d46:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004d48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1e5      	bne.n	8004d1a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	3314      	adds	r3, #20
 8004d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d58:	e853 3f00 	ldrex	r3, [r3]
 8004d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d60:	f043 0301 	orr.w	r3, r3, #1
 8004d64:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	3314      	adds	r3, #20
 8004d6c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004d6e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004d70:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d72:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004d74:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004d76:	e841 2300 	strex	r3, r2, [r1]
 8004d7a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1e5      	bne.n	8004d4e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	3314      	adds	r3, #20
 8004d88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	e853 3f00 	ldrex	r3, [r3]
 8004d90:	617b      	str	r3, [r7, #20]
   return(result);
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d98:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	3314      	adds	r3, #20
 8004da0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004da2:	627a      	str	r2, [r7, #36]	@ 0x24
 8004da4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da6:	6a39      	ldr	r1, [r7, #32]
 8004da8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004daa:	e841 2300 	strex	r3, r2, [r1]
 8004dae:	61fb      	str	r3, [r7, #28]
   return(result);
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d1e5      	bne.n	8004d82 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3760      	adds	r7, #96	@ 0x60
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	08004a9d 	.word	0x08004a9d
 8004dc4:	08004bc9 	.word	0x08004bc9
 8004dc8:	08004c05 	.word	0x08004c05

08004dcc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b089      	sub	sp, #36	@ 0x24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	330c      	adds	r3, #12
 8004dda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	e853 3f00 	ldrex	r3, [r3]
 8004de2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004dea:	61fb      	str	r3, [r7, #28]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	330c      	adds	r3, #12
 8004df2:	69fa      	ldr	r2, [r7, #28]
 8004df4:	61ba      	str	r2, [r7, #24]
 8004df6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df8:	6979      	ldr	r1, [r7, #20]
 8004dfa:	69ba      	ldr	r2, [r7, #24]
 8004dfc:	e841 2300 	strex	r3, r2, [r1]
 8004e00:	613b      	str	r3, [r7, #16]
   return(result);
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d1e5      	bne.n	8004dd4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2220      	movs	r2, #32
 8004e0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004e10:	bf00      	nop
 8004e12:	3724      	adds	r7, #36	@ 0x24
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b095      	sub	sp, #84	@ 0x54
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	330c      	adds	r3, #12
 8004e2a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e2e:	e853 3f00 	ldrex	r3, [r3]
 8004e32:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	330c      	adds	r3, #12
 8004e42:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e44:	643a      	str	r2, [r7, #64]	@ 0x40
 8004e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e48:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004e4a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e4c:	e841 2300 	strex	r3, r2, [r1]
 8004e50:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1e5      	bne.n	8004e24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	3314      	adds	r3, #20
 8004e5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e60:	6a3b      	ldr	r3, [r7, #32]
 8004e62:	e853 3f00 	ldrex	r3, [r3]
 8004e66:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	f023 0301 	bic.w	r3, r3, #1
 8004e6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	3314      	adds	r3, #20
 8004e76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e78:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e80:	e841 2300 	strex	r3, r2, [r1]
 8004e84:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1e5      	bne.n	8004e58 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d119      	bne.n	8004ec8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	330c      	adds	r3, #12
 8004e9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	e853 3f00 	ldrex	r3, [r3]
 8004ea2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	f023 0310 	bic.w	r3, r3, #16
 8004eaa:	647b      	str	r3, [r7, #68]	@ 0x44
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	330c      	adds	r3, #12
 8004eb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004eb4:	61ba      	str	r2, [r7, #24]
 8004eb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb8:	6979      	ldr	r1, [r7, #20]
 8004eba:	69ba      	ldr	r2, [r7, #24]
 8004ebc:	e841 2300 	strex	r3, r2, [r1]
 8004ec0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d1e5      	bne.n	8004e94 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004ed6:	bf00      	nop
 8004ed8:	3754      	adds	r7, #84	@ 0x54
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr

08004ee2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b084      	sub	sp, #16
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f7ff fdb7 	bl	8004a70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f02:	bf00      	nop
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b085      	sub	sp, #20
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	2b21      	cmp	r3, #33	@ 0x21
 8004f1c:	d13e      	bne.n	8004f9c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f26:	d114      	bne.n	8004f52 <UART_Transmit_IT+0x48>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d110      	bne.n	8004f52 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a1b      	ldr	r3, [r3, #32]
 8004f34:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	881b      	ldrh	r3, [r3, #0]
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f44:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	1c9a      	adds	r2, r3, #2
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	621a      	str	r2, [r3, #32]
 8004f50:	e008      	b.n	8004f64 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a1b      	ldr	r3, [r3, #32]
 8004f56:	1c59      	adds	r1, r3, #1
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	6211      	str	r1, [r2, #32]
 8004f5c:	781a      	ldrb	r2, [r3, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	4619      	mov	r1, r3
 8004f72:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d10f      	bne.n	8004f98 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68da      	ldr	r2, [r3, #12]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004f86:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68da      	ldr	r2, [r3, #12]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f96:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	e000      	b.n	8004f9e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004f9c:	2302      	movs	r3, #2
  }
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3714      	adds	r7, #20
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr

08004faa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b082      	sub	sp, #8
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68da      	ldr	r2, [r3, #12]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fc0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7ff fd32 	bl	8004a34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3708      	adds	r7, #8
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004fda:	b580      	push	{r7, lr}
 8004fdc:	b08c      	sub	sp, #48	@ 0x30
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b22      	cmp	r3, #34	@ 0x22
 8004fec:	f040 80ae 	bne.w	800514c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ff8:	d117      	bne.n	800502a <UART_Receive_IT+0x50>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d113      	bne.n	800502a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005002:	2300      	movs	r3, #0
 8005004:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800500a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	b29b      	uxth	r3, r3
 8005014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005018:	b29a      	uxth	r2, r3
 800501a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800501c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005022:	1c9a      	adds	r2, r3, #2
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	629a      	str	r2, [r3, #40]	@ 0x28
 8005028:	e026      	b.n	8005078 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800502e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005030:	2300      	movs	r3, #0
 8005032:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800503c:	d007      	beq.n	800504e <UART_Receive_IT+0x74>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d10a      	bne.n	800505c <UART_Receive_IT+0x82>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d106      	bne.n	800505c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	b2da      	uxtb	r2, r3
 8005056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005058:	701a      	strb	r2, [r3, #0]
 800505a:	e008      	b.n	800506e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	b2db      	uxtb	r3, r3
 8005064:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005068:	b2da      	uxtb	r2, r3
 800506a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800506c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005072:	1c5a      	adds	r2, r3, #1
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800507c:	b29b      	uxth	r3, r3
 800507e:	3b01      	subs	r3, #1
 8005080:	b29b      	uxth	r3, r3
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	4619      	mov	r1, r3
 8005086:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005088:	2b00      	cmp	r3, #0
 800508a:	d15d      	bne.n	8005148 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68da      	ldr	r2, [r3, #12]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f022 0220 	bic.w	r2, r2, #32
 800509a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68da      	ldr	r2, [r3, #12]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80050aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	695a      	ldr	r2, [r3, #20]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f022 0201 	bic.w	r2, r2, #1
 80050ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2220      	movs	r2, #32
 80050c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d135      	bne.n	800513e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	330c      	adds	r3, #12
 80050de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	e853 3f00 	ldrex	r3, [r3]
 80050e6:	613b      	str	r3, [r7, #16]
   return(result);
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	f023 0310 	bic.w	r3, r3, #16
 80050ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	330c      	adds	r3, #12
 80050f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050f8:	623a      	str	r2, [r7, #32]
 80050fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fc:	69f9      	ldr	r1, [r7, #28]
 80050fe:	6a3a      	ldr	r2, [r7, #32]
 8005100:	e841 2300 	strex	r3, r2, [r1]
 8005104:	61bb      	str	r3, [r7, #24]
   return(result);
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1e5      	bne.n	80050d8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0310 	and.w	r3, r3, #16
 8005116:	2b10      	cmp	r3, #16
 8005118:	d10a      	bne.n	8005130 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800511a:	2300      	movs	r3, #0
 800511c:	60fb      	str	r3, [r7, #12]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	60fb      	str	r3, [r7, #12]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	60fb      	str	r3, [r7, #12]
 800512e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005134:	4619      	mov	r1, r3
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f7ff fca4 	bl	8004a84 <HAL_UARTEx_RxEventCallback>
 800513c:	e002      	b.n	8005144 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7ff fc82 	bl	8004a48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005144:	2300      	movs	r3, #0
 8005146:	e002      	b.n	800514e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005148:	2300      	movs	r3, #0
 800514a:	e000      	b.n	800514e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800514c:	2302      	movs	r3, #2
  }
}
 800514e:	4618      	mov	r0, r3
 8005150:	3730      	adds	r7, #48	@ 0x30
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
	...

08005158 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005158:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800515c:	b0c0      	sub	sp, #256	@ 0x100
 800515e:	af00      	add	r7, sp, #0
 8005160:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005174:	68d9      	ldr	r1, [r3, #12]
 8005176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	ea40 0301 	orr.w	r3, r0, r1
 8005180:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005186:	689a      	ldr	r2, [r3, #8]
 8005188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	431a      	orrs	r2, r3
 8005190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	431a      	orrs	r2, r3
 8005198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800519c:	69db      	ldr	r3, [r3, #28]
 800519e:	4313      	orrs	r3, r2
 80051a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80051a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80051b0:	f021 010c 	bic.w	r1, r1, #12
 80051b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80051be:	430b      	orrs	r3, r1
 80051c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80051ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051d2:	6999      	ldr	r1, [r3, #24]
 80051d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	ea40 0301 	orr.w	r3, r0, r1
 80051de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80051e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	4b8f      	ldr	r3, [pc, #572]	@ (8005424 <UART_SetConfig+0x2cc>)
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d005      	beq.n	80051f8 <UART_SetConfig+0xa0>
 80051ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	4b8d      	ldr	r3, [pc, #564]	@ (8005428 <UART_SetConfig+0x2d0>)
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d104      	bne.n	8005202 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80051f8:	f7fe fad8 	bl	80037ac <HAL_RCC_GetPCLK2Freq>
 80051fc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005200:	e003      	b.n	800520a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005202:	f7fe fabf 	bl	8003784 <HAL_RCC_GetPCLK1Freq>
 8005206:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800520a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800520e:	69db      	ldr	r3, [r3, #28]
 8005210:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005214:	f040 810c 	bne.w	8005430 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005218:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800521c:	2200      	movs	r2, #0
 800521e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005222:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005226:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800522a:	4622      	mov	r2, r4
 800522c:	462b      	mov	r3, r5
 800522e:	1891      	adds	r1, r2, r2
 8005230:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005232:	415b      	adcs	r3, r3
 8005234:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005236:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800523a:	4621      	mov	r1, r4
 800523c:	eb12 0801 	adds.w	r8, r2, r1
 8005240:	4629      	mov	r1, r5
 8005242:	eb43 0901 	adc.w	r9, r3, r1
 8005246:	f04f 0200 	mov.w	r2, #0
 800524a:	f04f 0300 	mov.w	r3, #0
 800524e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005252:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005256:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800525a:	4690      	mov	r8, r2
 800525c:	4699      	mov	r9, r3
 800525e:	4623      	mov	r3, r4
 8005260:	eb18 0303 	adds.w	r3, r8, r3
 8005264:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005268:	462b      	mov	r3, r5
 800526a:	eb49 0303 	adc.w	r3, r9, r3
 800526e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800527e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005282:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005286:	460b      	mov	r3, r1
 8005288:	18db      	adds	r3, r3, r3
 800528a:	653b      	str	r3, [r7, #80]	@ 0x50
 800528c:	4613      	mov	r3, r2
 800528e:	eb42 0303 	adc.w	r3, r2, r3
 8005292:	657b      	str	r3, [r7, #84]	@ 0x54
 8005294:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005298:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800529c:	f7fa ff9c 	bl	80001d8 <__aeabi_uldivmod>
 80052a0:	4602      	mov	r2, r0
 80052a2:	460b      	mov	r3, r1
 80052a4:	4b61      	ldr	r3, [pc, #388]	@ (800542c <UART_SetConfig+0x2d4>)
 80052a6:	fba3 2302 	umull	r2, r3, r3, r2
 80052aa:	095b      	lsrs	r3, r3, #5
 80052ac:	011c      	lsls	r4, r3, #4
 80052ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052b2:	2200      	movs	r2, #0
 80052b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80052b8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80052bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80052c0:	4642      	mov	r2, r8
 80052c2:	464b      	mov	r3, r9
 80052c4:	1891      	adds	r1, r2, r2
 80052c6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80052c8:	415b      	adcs	r3, r3
 80052ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80052d0:	4641      	mov	r1, r8
 80052d2:	eb12 0a01 	adds.w	sl, r2, r1
 80052d6:	4649      	mov	r1, r9
 80052d8:	eb43 0b01 	adc.w	fp, r3, r1
 80052dc:	f04f 0200 	mov.w	r2, #0
 80052e0:	f04f 0300 	mov.w	r3, #0
 80052e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80052e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80052ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052f0:	4692      	mov	sl, r2
 80052f2:	469b      	mov	fp, r3
 80052f4:	4643      	mov	r3, r8
 80052f6:	eb1a 0303 	adds.w	r3, sl, r3
 80052fa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80052fe:	464b      	mov	r3, r9
 8005300:	eb4b 0303 	adc.w	r3, fp, r3
 8005304:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005314:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005318:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800531c:	460b      	mov	r3, r1
 800531e:	18db      	adds	r3, r3, r3
 8005320:	643b      	str	r3, [r7, #64]	@ 0x40
 8005322:	4613      	mov	r3, r2
 8005324:	eb42 0303 	adc.w	r3, r2, r3
 8005328:	647b      	str	r3, [r7, #68]	@ 0x44
 800532a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800532e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005332:	f7fa ff51 	bl	80001d8 <__aeabi_uldivmod>
 8005336:	4602      	mov	r2, r0
 8005338:	460b      	mov	r3, r1
 800533a:	4611      	mov	r1, r2
 800533c:	4b3b      	ldr	r3, [pc, #236]	@ (800542c <UART_SetConfig+0x2d4>)
 800533e:	fba3 2301 	umull	r2, r3, r3, r1
 8005342:	095b      	lsrs	r3, r3, #5
 8005344:	2264      	movs	r2, #100	@ 0x64
 8005346:	fb02 f303 	mul.w	r3, r2, r3
 800534a:	1acb      	subs	r3, r1, r3
 800534c:	00db      	lsls	r3, r3, #3
 800534e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005352:	4b36      	ldr	r3, [pc, #216]	@ (800542c <UART_SetConfig+0x2d4>)
 8005354:	fba3 2302 	umull	r2, r3, r3, r2
 8005358:	095b      	lsrs	r3, r3, #5
 800535a:	005b      	lsls	r3, r3, #1
 800535c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005360:	441c      	add	r4, r3
 8005362:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005366:	2200      	movs	r2, #0
 8005368:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800536c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005370:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005374:	4642      	mov	r2, r8
 8005376:	464b      	mov	r3, r9
 8005378:	1891      	adds	r1, r2, r2
 800537a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800537c:	415b      	adcs	r3, r3
 800537e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005380:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005384:	4641      	mov	r1, r8
 8005386:	1851      	adds	r1, r2, r1
 8005388:	6339      	str	r1, [r7, #48]	@ 0x30
 800538a:	4649      	mov	r1, r9
 800538c:	414b      	adcs	r3, r1
 800538e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005390:	f04f 0200 	mov.w	r2, #0
 8005394:	f04f 0300 	mov.w	r3, #0
 8005398:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800539c:	4659      	mov	r1, fp
 800539e:	00cb      	lsls	r3, r1, #3
 80053a0:	4651      	mov	r1, sl
 80053a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053a6:	4651      	mov	r1, sl
 80053a8:	00ca      	lsls	r2, r1, #3
 80053aa:	4610      	mov	r0, r2
 80053ac:	4619      	mov	r1, r3
 80053ae:	4603      	mov	r3, r0
 80053b0:	4642      	mov	r2, r8
 80053b2:	189b      	adds	r3, r3, r2
 80053b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80053b8:	464b      	mov	r3, r9
 80053ba:	460a      	mov	r2, r1
 80053bc:	eb42 0303 	adc.w	r3, r2, r3
 80053c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80053c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80053d0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80053d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80053d8:	460b      	mov	r3, r1
 80053da:	18db      	adds	r3, r3, r3
 80053dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053de:	4613      	mov	r3, r2
 80053e0:	eb42 0303 	adc.w	r3, r2, r3
 80053e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80053ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80053ee:	f7fa fef3 	bl	80001d8 <__aeabi_uldivmod>
 80053f2:	4602      	mov	r2, r0
 80053f4:	460b      	mov	r3, r1
 80053f6:	4b0d      	ldr	r3, [pc, #52]	@ (800542c <UART_SetConfig+0x2d4>)
 80053f8:	fba3 1302 	umull	r1, r3, r3, r2
 80053fc:	095b      	lsrs	r3, r3, #5
 80053fe:	2164      	movs	r1, #100	@ 0x64
 8005400:	fb01 f303 	mul.w	r3, r1, r3
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	00db      	lsls	r3, r3, #3
 8005408:	3332      	adds	r3, #50	@ 0x32
 800540a:	4a08      	ldr	r2, [pc, #32]	@ (800542c <UART_SetConfig+0x2d4>)
 800540c:	fba2 2303 	umull	r2, r3, r2, r3
 8005410:	095b      	lsrs	r3, r3, #5
 8005412:	f003 0207 	and.w	r2, r3, #7
 8005416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4422      	add	r2, r4
 800541e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005420:	e106      	b.n	8005630 <UART_SetConfig+0x4d8>
 8005422:	bf00      	nop
 8005424:	40011000 	.word	0x40011000
 8005428:	40011400 	.word	0x40011400
 800542c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005430:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005434:	2200      	movs	r2, #0
 8005436:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800543a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800543e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005442:	4642      	mov	r2, r8
 8005444:	464b      	mov	r3, r9
 8005446:	1891      	adds	r1, r2, r2
 8005448:	6239      	str	r1, [r7, #32]
 800544a:	415b      	adcs	r3, r3
 800544c:	627b      	str	r3, [r7, #36]	@ 0x24
 800544e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005452:	4641      	mov	r1, r8
 8005454:	1854      	adds	r4, r2, r1
 8005456:	4649      	mov	r1, r9
 8005458:	eb43 0501 	adc.w	r5, r3, r1
 800545c:	f04f 0200 	mov.w	r2, #0
 8005460:	f04f 0300 	mov.w	r3, #0
 8005464:	00eb      	lsls	r3, r5, #3
 8005466:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800546a:	00e2      	lsls	r2, r4, #3
 800546c:	4614      	mov	r4, r2
 800546e:	461d      	mov	r5, r3
 8005470:	4643      	mov	r3, r8
 8005472:	18e3      	adds	r3, r4, r3
 8005474:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005478:	464b      	mov	r3, r9
 800547a:	eb45 0303 	adc.w	r3, r5, r3
 800547e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800548e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005492:	f04f 0200 	mov.w	r2, #0
 8005496:	f04f 0300 	mov.w	r3, #0
 800549a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800549e:	4629      	mov	r1, r5
 80054a0:	008b      	lsls	r3, r1, #2
 80054a2:	4621      	mov	r1, r4
 80054a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054a8:	4621      	mov	r1, r4
 80054aa:	008a      	lsls	r2, r1, #2
 80054ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80054b0:	f7fa fe92 	bl	80001d8 <__aeabi_uldivmod>
 80054b4:	4602      	mov	r2, r0
 80054b6:	460b      	mov	r3, r1
 80054b8:	4b60      	ldr	r3, [pc, #384]	@ (800563c <UART_SetConfig+0x4e4>)
 80054ba:	fba3 2302 	umull	r2, r3, r3, r2
 80054be:	095b      	lsrs	r3, r3, #5
 80054c0:	011c      	lsls	r4, r3, #4
 80054c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054c6:	2200      	movs	r2, #0
 80054c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80054cc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80054d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80054d4:	4642      	mov	r2, r8
 80054d6:	464b      	mov	r3, r9
 80054d8:	1891      	adds	r1, r2, r2
 80054da:	61b9      	str	r1, [r7, #24]
 80054dc:	415b      	adcs	r3, r3
 80054de:	61fb      	str	r3, [r7, #28]
 80054e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054e4:	4641      	mov	r1, r8
 80054e6:	1851      	adds	r1, r2, r1
 80054e8:	6139      	str	r1, [r7, #16]
 80054ea:	4649      	mov	r1, r9
 80054ec:	414b      	adcs	r3, r1
 80054ee:	617b      	str	r3, [r7, #20]
 80054f0:	f04f 0200 	mov.w	r2, #0
 80054f4:	f04f 0300 	mov.w	r3, #0
 80054f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054fc:	4659      	mov	r1, fp
 80054fe:	00cb      	lsls	r3, r1, #3
 8005500:	4651      	mov	r1, sl
 8005502:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005506:	4651      	mov	r1, sl
 8005508:	00ca      	lsls	r2, r1, #3
 800550a:	4610      	mov	r0, r2
 800550c:	4619      	mov	r1, r3
 800550e:	4603      	mov	r3, r0
 8005510:	4642      	mov	r2, r8
 8005512:	189b      	adds	r3, r3, r2
 8005514:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005518:	464b      	mov	r3, r9
 800551a:	460a      	mov	r2, r1
 800551c:	eb42 0303 	adc.w	r3, r2, r3
 8005520:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800552e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005530:	f04f 0200 	mov.w	r2, #0
 8005534:	f04f 0300 	mov.w	r3, #0
 8005538:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800553c:	4649      	mov	r1, r9
 800553e:	008b      	lsls	r3, r1, #2
 8005540:	4641      	mov	r1, r8
 8005542:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005546:	4641      	mov	r1, r8
 8005548:	008a      	lsls	r2, r1, #2
 800554a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800554e:	f7fa fe43 	bl	80001d8 <__aeabi_uldivmod>
 8005552:	4602      	mov	r2, r0
 8005554:	460b      	mov	r3, r1
 8005556:	4611      	mov	r1, r2
 8005558:	4b38      	ldr	r3, [pc, #224]	@ (800563c <UART_SetConfig+0x4e4>)
 800555a:	fba3 2301 	umull	r2, r3, r3, r1
 800555e:	095b      	lsrs	r3, r3, #5
 8005560:	2264      	movs	r2, #100	@ 0x64
 8005562:	fb02 f303 	mul.w	r3, r2, r3
 8005566:	1acb      	subs	r3, r1, r3
 8005568:	011b      	lsls	r3, r3, #4
 800556a:	3332      	adds	r3, #50	@ 0x32
 800556c:	4a33      	ldr	r2, [pc, #204]	@ (800563c <UART_SetConfig+0x4e4>)
 800556e:	fba2 2303 	umull	r2, r3, r2, r3
 8005572:	095b      	lsrs	r3, r3, #5
 8005574:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005578:	441c      	add	r4, r3
 800557a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800557e:	2200      	movs	r2, #0
 8005580:	673b      	str	r3, [r7, #112]	@ 0x70
 8005582:	677a      	str	r2, [r7, #116]	@ 0x74
 8005584:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005588:	4642      	mov	r2, r8
 800558a:	464b      	mov	r3, r9
 800558c:	1891      	adds	r1, r2, r2
 800558e:	60b9      	str	r1, [r7, #8]
 8005590:	415b      	adcs	r3, r3
 8005592:	60fb      	str	r3, [r7, #12]
 8005594:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005598:	4641      	mov	r1, r8
 800559a:	1851      	adds	r1, r2, r1
 800559c:	6039      	str	r1, [r7, #0]
 800559e:	4649      	mov	r1, r9
 80055a0:	414b      	adcs	r3, r1
 80055a2:	607b      	str	r3, [r7, #4]
 80055a4:	f04f 0200 	mov.w	r2, #0
 80055a8:	f04f 0300 	mov.w	r3, #0
 80055ac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80055b0:	4659      	mov	r1, fp
 80055b2:	00cb      	lsls	r3, r1, #3
 80055b4:	4651      	mov	r1, sl
 80055b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055ba:	4651      	mov	r1, sl
 80055bc:	00ca      	lsls	r2, r1, #3
 80055be:	4610      	mov	r0, r2
 80055c0:	4619      	mov	r1, r3
 80055c2:	4603      	mov	r3, r0
 80055c4:	4642      	mov	r2, r8
 80055c6:	189b      	adds	r3, r3, r2
 80055c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80055ca:	464b      	mov	r3, r9
 80055cc:	460a      	mov	r2, r1
 80055ce:	eb42 0303 	adc.w	r3, r2, r3
 80055d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80055d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80055de:	667a      	str	r2, [r7, #100]	@ 0x64
 80055e0:	f04f 0200 	mov.w	r2, #0
 80055e4:	f04f 0300 	mov.w	r3, #0
 80055e8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80055ec:	4649      	mov	r1, r9
 80055ee:	008b      	lsls	r3, r1, #2
 80055f0:	4641      	mov	r1, r8
 80055f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055f6:	4641      	mov	r1, r8
 80055f8:	008a      	lsls	r2, r1, #2
 80055fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80055fe:	f7fa fdeb 	bl	80001d8 <__aeabi_uldivmod>
 8005602:	4602      	mov	r2, r0
 8005604:	460b      	mov	r3, r1
 8005606:	4b0d      	ldr	r3, [pc, #52]	@ (800563c <UART_SetConfig+0x4e4>)
 8005608:	fba3 1302 	umull	r1, r3, r3, r2
 800560c:	095b      	lsrs	r3, r3, #5
 800560e:	2164      	movs	r1, #100	@ 0x64
 8005610:	fb01 f303 	mul.w	r3, r1, r3
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	011b      	lsls	r3, r3, #4
 8005618:	3332      	adds	r3, #50	@ 0x32
 800561a:	4a08      	ldr	r2, [pc, #32]	@ (800563c <UART_SetConfig+0x4e4>)
 800561c:	fba2 2303 	umull	r2, r3, r2, r3
 8005620:	095b      	lsrs	r3, r3, #5
 8005622:	f003 020f 	and.w	r2, r3, #15
 8005626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4422      	add	r2, r4
 800562e:	609a      	str	r2, [r3, #8]
}
 8005630:	bf00      	nop
 8005632:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005636:	46bd      	mov	sp, r7
 8005638:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800563c:	51eb851f 	.word	0x51eb851f

08005640 <memmove>:
 8005640:	4288      	cmp	r0, r1
 8005642:	b510      	push	{r4, lr}
 8005644:	eb01 0402 	add.w	r4, r1, r2
 8005648:	d902      	bls.n	8005650 <memmove+0x10>
 800564a:	4284      	cmp	r4, r0
 800564c:	4623      	mov	r3, r4
 800564e:	d807      	bhi.n	8005660 <memmove+0x20>
 8005650:	1e43      	subs	r3, r0, #1
 8005652:	42a1      	cmp	r1, r4
 8005654:	d008      	beq.n	8005668 <memmove+0x28>
 8005656:	f811 2b01 	ldrb.w	r2, [r1], #1
 800565a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800565e:	e7f8      	b.n	8005652 <memmove+0x12>
 8005660:	4402      	add	r2, r0
 8005662:	4601      	mov	r1, r0
 8005664:	428a      	cmp	r2, r1
 8005666:	d100      	bne.n	800566a <memmove+0x2a>
 8005668:	bd10      	pop	{r4, pc}
 800566a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800566e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005672:	e7f7      	b.n	8005664 <memmove+0x24>

08005674 <memset>:
 8005674:	4402      	add	r2, r0
 8005676:	4603      	mov	r3, r0
 8005678:	4293      	cmp	r3, r2
 800567a:	d100      	bne.n	800567e <memset+0xa>
 800567c:	4770      	bx	lr
 800567e:	f803 1b01 	strb.w	r1, [r3], #1
 8005682:	e7f9      	b.n	8005678 <memset+0x4>

08005684 <__libc_init_array>:
 8005684:	b570      	push	{r4, r5, r6, lr}
 8005686:	4d0d      	ldr	r5, [pc, #52]	@ (80056bc <__libc_init_array+0x38>)
 8005688:	4c0d      	ldr	r4, [pc, #52]	@ (80056c0 <__libc_init_array+0x3c>)
 800568a:	1b64      	subs	r4, r4, r5
 800568c:	10a4      	asrs	r4, r4, #2
 800568e:	2600      	movs	r6, #0
 8005690:	42a6      	cmp	r6, r4
 8005692:	d109      	bne.n	80056a8 <__libc_init_array+0x24>
 8005694:	4d0b      	ldr	r5, [pc, #44]	@ (80056c4 <__libc_init_array+0x40>)
 8005696:	4c0c      	ldr	r4, [pc, #48]	@ (80056c8 <__libc_init_array+0x44>)
 8005698:	f000 f826 	bl	80056e8 <_init>
 800569c:	1b64      	subs	r4, r4, r5
 800569e:	10a4      	asrs	r4, r4, #2
 80056a0:	2600      	movs	r6, #0
 80056a2:	42a6      	cmp	r6, r4
 80056a4:	d105      	bne.n	80056b2 <__libc_init_array+0x2e>
 80056a6:	bd70      	pop	{r4, r5, r6, pc}
 80056a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80056ac:	4798      	blx	r3
 80056ae:	3601      	adds	r6, #1
 80056b0:	e7ee      	b.n	8005690 <__libc_init_array+0xc>
 80056b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80056b6:	4798      	blx	r3
 80056b8:	3601      	adds	r6, #1
 80056ba:	e7f2      	b.n	80056a2 <__libc_init_array+0x1e>
 80056bc:	08005728 	.word	0x08005728
 80056c0:	08005728 	.word	0x08005728
 80056c4:	08005728 	.word	0x08005728
 80056c8:	0800572c 	.word	0x0800572c

080056cc <memcpy>:
 80056cc:	440a      	add	r2, r1
 80056ce:	4291      	cmp	r1, r2
 80056d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80056d4:	d100      	bne.n	80056d8 <memcpy+0xc>
 80056d6:	4770      	bx	lr
 80056d8:	b510      	push	{r4, lr}
 80056da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056e2:	4291      	cmp	r1, r2
 80056e4:	d1f9      	bne.n	80056da <memcpy+0xe>
 80056e6:	bd10      	pop	{r4, pc}

080056e8 <_init>:
 80056e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ea:	bf00      	nop
 80056ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ee:	bc08      	pop	{r3}
 80056f0:	469e      	mov	lr, r3
 80056f2:	4770      	bx	lr

080056f4 <_fini>:
 80056f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056f6:	bf00      	nop
 80056f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056fa:	bc08      	pop	{r3}
 80056fc:	469e      	mov	lr, r3
 80056fe:	4770      	bx	lr
