
STM32_RX_Elrs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051a8  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005340  08005340  00006340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005360  08005360  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005360  08005360  00006360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005368  08005368  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005368  08005368  00006368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800536c  0800536c  0000636c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005370  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000498  2000000c  0800537c  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004a4  0800537c  000074a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010bac  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b78  00000000  00000000  00017be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec8  00000000  00000000  0001a760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b87  00000000  00000000  0001b628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018795  00000000  00000000  0001c1af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012feb  00000000  00000000  00034944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a95c  00000000  00000000  0004792f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e228b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cd4  00000000  00000000  000e22d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  000e5fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005328 	.word	0x08005328

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08005328 	.word	0x08005328

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800050a:	463b      	mov	r3, r7
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]
 8000514:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000516:	4b21      	ldr	r3, [pc, #132]	@ (800059c <MX_ADC1_Init+0x98>)
 8000518:	4a21      	ldr	r2, [pc, #132]	@ (80005a0 <MX_ADC1_Init+0x9c>)
 800051a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800051c:	4b1f      	ldr	r3, [pc, #124]	@ (800059c <MX_ADC1_Init+0x98>)
 800051e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000522:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000524:	4b1d      	ldr	r3, [pc, #116]	@ (800059c <MX_ADC1_Init+0x98>)
 8000526:	2200      	movs	r2, #0
 8000528:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800052a:	4b1c      	ldr	r3, [pc, #112]	@ (800059c <MX_ADC1_Init+0x98>)
 800052c:	2201      	movs	r2, #1
 800052e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000530:	4b1a      	ldr	r3, [pc, #104]	@ (800059c <MX_ADC1_Init+0x98>)
 8000532:	2201      	movs	r2, #1
 8000534:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000536:	4b19      	ldr	r3, [pc, #100]	@ (800059c <MX_ADC1_Init+0x98>)
 8000538:	2200      	movs	r2, #0
 800053a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800053e:	4b17      	ldr	r3, [pc, #92]	@ (800059c <MX_ADC1_Init+0x98>)
 8000540:	2200      	movs	r2, #0
 8000542:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000544:	4b15      	ldr	r3, [pc, #84]	@ (800059c <MX_ADC1_Init+0x98>)
 8000546:	4a17      	ldr	r2, [pc, #92]	@ (80005a4 <MX_ADC1_Init+0xa0>)
 8000548:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800054a:	4b14      	ldr	r3, [pc, #80]	@ (800059c <MX_ADC1_Init+0x98>)
 800054c:	2200      	movs	r2, #0
 800054e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000550:	4b12      	ldr	r3, [pc, #72]	@ (800059c <MX_ADC1_Init+0x98>)
 8000552:	2201      	movs	r2, #1
 8000554:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000556:	4b11      	ldr	r3, [pc, #68]	@ (800059c <MX_ADC1_Init+0x98>)
 8000558:	2200      	movs	r2, #0
 800055a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800055e:	4b0f      	ldr	r3, [pc, #60]	@ (800059c <MX_ADC1_Init+0x98>)
 8000560:	2201      	movs	r2, #1
 8000562:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000564:	480d      	ldr	r0, [pc, #52]	@ (800059c <MX_ADC1_Init+0x98>)
 8000566:	f001 f9d9 	bl	800191c <HAL_ADC_Init>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000570:	f000 fd56 	bl	8001020 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000574:	2300      	movs	r3, #0
 8000576:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000578:	2301      	movs	r3, #1
 800057a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800057c:	2306      	movs	r3, #6
 800057e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000580:	463b      	mov	r3, r7
 8000582:	4619      	mov	r1, r3
 8000584:	4805      	ldr	r0, [pc, #20]	@ (800059c <MX_ADC1_Init+0x98>)
 8000586:	f001 fa0d 	bl	80019a4 <HAL_ADC_ConfigChannel>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000590:	f000 fd46 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000594:	bf00      	nop
 8000596:	3710      	adds	r7, #16
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000028 	.word	0x20000028
 80005a0:	40012000 	.word	0x40012000
 80005a4:	0f000001 	.word	0x0f000001

080005a8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08a      	sub	sp, #40	@ 0x28
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a17      	ldr	r2, [pc, #92]	@ (8000624 <HAL_ADC_MspInit+0x7c>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d127      	bne.n	800061a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	613b      	str	r3, [r7, #16]
 80005ce:	4b16      	ldr	r3, [pc, #88]	@ (8000628 <HAL_ADC_MspInit+0x80>)
 80005d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005d2:	4a15      	ldr	r2, [pc, #84]	@ (8000628 <HAL_ADC_MspInit+0x80>)
 80005d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80005da:	4b13      	ldr	r3, [pc, #76]	@ (8000628 <HAL_ADC_MspInit+0x80>)
 80005dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80005e2:	613b      	str	r3, [r7, #16]
 80005e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000628 <HAL_ADC_MspInit+0x80>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ee:	4a0e      	ldr	r2, [pc, #56]	@ (8000628 <HAL_ADC_MspInit+0x80>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000628 <HAL_ADC_MspInit+0x80>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = APIN_VBAT_Pin;
 8000602:	2301      	movs	r3, #1
 8000604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000606:	2303      	movs	r3, #3
 8000608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060a:	2300      	movs	r3, #0
 800060c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(APIN_VBAT_GPIO_Port, &GPIO_InitStruct);
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	4619      	mov	r1, r3
 8000614:	4805      	ldr	r0, [pc, #20]	@ (800062c <HAL_ADC_MspInit+0x84>)
 8000616:	f002 f907 	bl	8002828 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800061a:	bf00      	nop
 800061c:	3728      	adds	r7, #40	@ 0x28
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40012000 	.word	0x40012000
 8000628:	40023800 	.word	0x40023800
 800062c:	40020000 	.word	0x40020000

08000630 <crc8_dvb_s2>:
    }
    return crc;
}

uint8_t crc8_dvb_s2(const uint8_t *data, uint8_t len)
{
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	460b      	mov	r3, r1
 800063a:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < len; i++) {
 8000640:	2300      	movs	r3, #0
 8000642:	73bb      	strb	r3, [r7, #14]
 8000644:	e024      	b.n	8000690 <crc8_dvb_s2+0x60>
        crc ^= data[i];
 8000646:	7bbb      	ldrb	r3, [r7, #14]
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	4413      	add	r3, r2
 800064c:	781a      	ldrb	r2, [r3, #0]
 800064e:	7bfb      	ldrb	r3, [r7, #15]
 8000650:	4053      	eors	r3, r2
 8000652:	73fb      	strb	r3, [r7, #15]
        for (int j = 0; j < 8; j++)
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	e014      	b.n	8000684 <crc8_dvb_s2+0x54>
            crc = (crc & 0x80) ? (crc << 1) ^ 0xD5 : (crc << 1);
 800065a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800065e:	2b00      	cmp	r3, #0
 8000660:	da09      	bge.n	8000676 <crc8_dvb_s2+0x46>
 8000662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000666:	005b      	lsls	r3, r3, #1
 8000668:	b25b      	sxtb	r3, r3
 800066a:	f083 032a 	eor.w	r3, r3, #42	@ 0x2a
 800066e:	43db      	mvns	r3, r3
 8000670:	b25b      	sxtb	r3, r3
 8000672:	b2db      	uxtb	r3, r3
 8000674:	e002      	b.n	800067c <crc8_dvb_s2+0x4c>
 8000676:	7bfb      	ldrb	r3, [r7, #15]
 8000678:	005b      	lsls	r3, r3, #1
 800067a:	b2db      	uxtb	r3, r3
 800067c:	73fb      	strb	r3, [r7, #15]
        for (int j = 0; j < 8; j++)
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	3301      	adds	r3, #1
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	2b07      	cmp	r3, #7
 8000688:	dde7      	ble.n	800065a <crc8_dvb_s2+0x2a>
    for (uint8_t i = 0; i < len; i++) {
 800068a:	7bbb      	ldrb	r3, [r7, #14]
 800068c:	3301      	adds	r3, #1
 800068e:	73bb      	strb	r3, [r7, #14]
 8000690:	7bba      	ldrb	r2, [r7, #14]
 8000692:	78fb      	ldrb	r3, [r7, #3]
 8000694:	429a      	cmp	r2, r3
 8000696:	d3d6      	bcc.n	8000646 <crc8_dvb_s2+0x16>
    }
    return crc;
 8000698:	7bfb      	ldrb	r3, [r7, #15]
}
 800069a:	4618      	mov	r0, r3
 800069c:	3714      	adds	r7, #20
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr

080006a6 <CrsfSerial_Init>:
#include <string.h>

uint8_t uartRxBuf[UART_RX_BUFFER_SIZE];
uint16_t oldPos = 0;

void CrsfSerial_Init(CrsfSerial_HandleTypeDef *hcrsf, UART_HandleTypeDef *huart, uint32_t baud) {
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b084      	sub	sp, #16
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	60f8      	str	r0, [r7, #12]
 80006ae:	60b9      	str	r1, [r7, #8]
 80006b0:	607a      	str	r2, [r7, #4]
    hcrsf->huart = huart;
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	68ba      	ldr	r2, [r7, #8]
 80006b6:	601a      	str	r2, [r3, #0]
    hcrsf->baud = baud;
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	687a      	ldr	r2, [r7, #4]
 80006bc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
    hcrsf->rxBufPos = 0;
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	2200      	movs	r2, #0
 80006c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    hcrsf->lastReceive = 0;
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	2200      	movs	r2, #0
 80006cc:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
    hcrsf->lastChannelsPacket = 0;
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	2200      	movs	r2, #0
 80006d4:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
    hcrsf->linkIsUp = false;
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	2200      	movs	r2, #0
 80006dc:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c
    hcrsf->passthroughBaud = 0;
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	2200      	movs	r2, #0
 80006e4:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170

    memset(hcrsf->rxBuf, 0, sizeof(hcrsf->rxBuf));
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	3304      	adds	r3, #4
 80006ec:	2240      	movs	r2, #64	@ 0x40
 80006ee:	2100      	movs	r1, #0
 80006f0:	4618      	mov	r0, r3
 80006f2:	f004 fddf 	bl	80052b4 <memset>
    memset(hcrsf->channels, 0, sizeof(hcrsf->channels));
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 80006fc:	2240      	movs	r2, #64	@ 0x40
 80006fe:	2100      	movs	r1, #0
 8000700:	4618      	mov	r0, r3
 8000702:	f004 fdd7 	bl	80052b4 <memset>

    hcrsf->onLinkDown = NULL;
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	2200      	movs	r2, #0
 800070a:	f8c3 21b8 	str.w	r2, [r3, #440]	@ 0x1b8
    hcrsf->onLinkUp = NULL;
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	2200      	movs	r2, #0
 8000712:	f8c3 21b4 	str.w	r2, [r3, #436]	@ 0x1b4
    hcrsf->onOobData = NULL;
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	2200      	movs	r2, #0
 800071a:	f8c3 21bc 	str.w	r2, [r3, #444]	@ 0x1bc
    hcrsf->onPacketChannels = NULL;
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	2200      	movs	r2, #0
 8000722:	f8c3 21c0 	str.w	r2, [r3, #448]	@ 0x1c0
    hcrsf->onPacketLinkStatistics = NULL;
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	2200      	movs	r2, #0
 800072a:	f8c3 21c4 	str.w	r2, [r3, #452]	@ 0x1c4
    hcrsf->onPacketGps = NULL;
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	2200      	movs	r2, #0
 8000732:	f8c3 21c8 	str.w	r2, [r3, #456]	@ 0x1c8
}
 8000736:	bf00      	nop
 8000738:	3710      	adds	r7, #16
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <CrsfSerial_Begin>:

void CrsfSerial_Begin(CrsfSerial_HandleTypeDef *hcrsf, uint32_t baud) {
 800073e:	b480      	push	{r7}
 8000740:	b083      	sub	sp, #12
 8000742:	af00      	add	r7, sp, #0
 8000744:	6078      	str	r0, [r7, #4]
 8000746:	6039      	str	r1, [r7, #0]
    hcrsf->baud = baud ? baud : hcrsf->baud;
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d103      	bne.n	8000756 <CrsfSerial_Begin+0x18>
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8000754:	e000      	b.n	8000758 <CrsfSerial_Begin+0x1a>
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
    // HAL_UART_Init must be called elsewhere with correct parameters
}
 800075e:	bf00      	nop
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr

0800076a <ShiftBuffer>:

static void ShiftBuffer(CrsfSerial_HandleTypeDef *hcrsf, uint8_t cnt) {
 800076a:	b580      	push	{r7, lr}
 800076c:	b082      	sub	sp, #8
 800076e:	af00      	add	r7, sp, #0
 8000770:	6078      	str	r0, [r7, #4]
 8000772:	460b      	mov	r3, r1
 8000774:	70fb      	strb	r3, [r7, #3]
    if (cnt >= hcrsf->rxBufPos) {
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800077c:	78fa      	ldrb	r2, [r7, #3]
 800077e:	429a      	cmp	r2, r3
 8000780:	d304      	bcc.n	800078c <ShiftBuffer+0x22>
        hcrsf->rxBufPos = 0;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	2200      	movs	r2, #0
 8000786:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        return;
 800078a:	e017      	b.n	80007bc <ShiftBuffer+0x52>
    }
    memmove(hcrsf->rxBuf, hcrsf->rxBuf + cnt, hcrsf->rxBufPos - cnt);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	1d18      	adds	r0, r3, #4
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	1d1a      	adds	r2, r3, #4
 8000794:	78fb      	ldrb	r3, [r7, #3]
 8000796:	18d1      	adds	r1, r2, r3
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800079e:	461a      	mov	r2, r3
 80007a0:	78fb      	ldrb	r3, [r7, #3]
 80007a2:	1ad3      	subs	r3, r2, r3
 80007a4:	461a      	mov	r2, r3
 80007a6:	f004 fd6b 	bl	8005280 <memmove>
    hcrsf->rxBufPos -= cnt;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80007b0:	78fb      	ldrb	r3, [r7, #3]
 80007b2:	1ad3      	subs	r3, r2, r3
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
}
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <CrsfSerial_UnpackChannels>:
//            bitsAvailable -= 11;
//        }
//    }
//}

static void CrsfSerial_UnpackChannels(CrsfSerial_HandleTypeDef *hcrsf, const uint8_t *payload) {
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b08c      	sub	sp, #48	@ 0x30
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
 80007ca:	6039      	str	r1, [r7, #0]
    uint16_t temp[CRSF_NUM_CHANNELS] = {0};
 80007cc:	f107 030c 	add.w	r3, r7, #12
 80007d0:	2220      	movs	r2, #32
 80007d2:	2100      	movs	r1, #0
 80007d4:	4618      	mov	r0, r3
 80007d6:	f004 fd6d 	bl	80052b4 <memset>
    temp[0]  = ((payload[0]  >> 0) | (payload[1] << 8)) & 0x07FF;
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	b21a      	sxth	r2, r3
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	3301      	adds	r3, #1
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	b21b      	sxth	r3, r3
 80007e8:	021b      	lsls	r3, r3, #8
 80007ea:	b21b      	sxth	r3, r3
 80007ec:	4313      	orrs	r3, r2
 80007ee:	b21b      	sxth	r3, r3
 80007f0:	b29b      	uxth	r3, r3
 80007f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80007f6:	b29b      	uxth	r3, r3
 80007f8:	81bb      	strh	r3, [r7, #12]
    temp[1]  = ((payload[1]  >> 3) | (payload[2] << 5)) & 0x07FF;
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	3301      	adds	r3, #1
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	08db      	lsrs	r3, r3, #3
 8000802:	b2db      	uxtb	r3, r3
 8000804:	b21a      	sxth	r2, r3
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	3302      	adds	r3, #2
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	b21b      	sxth	r3, r3
 800080e:	015b      	lsls	r3, r3, #5
 8000810:	b21b      	sxth	r3, r3
 8000812:	4313      	orrs	r3, r2
 8000814:	b21b      	sxth	r3, r3
 8000816:	b29b      	uxth	r3, r3
 8000818:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800081c:	b29b      	uxth	r3, r3
 800081e:	81fb      	strh	r3, [r7, #14]
    temp[2]  = ((payload[2]  >> 6) | (payload[3] << 2) | (payload[4] << 10)) & 0x07FF;
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	3302      	adds	r3, #2
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	099b      	lsrs	r3, r3, #6
 8000828:	b2db      	uxtb	r3, r3
 800082a:	b21a      	sxth	r2, r3
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	3303      	adds	r3, #3
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	b21b      	sxth	r3, r3
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	b21b      	sxth	r3, r3
 8000838:	4313      	orrs	r3, r2
 800083a:	b21a      	sxth	r2, r3
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	3304      	adds	r3, #4
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	b21b      	sxth	r3, r3
 8000844:	029b      	lsls	r3, r3, #10
 8000846:	b21b      	sxth	r3, r3
 8000848:	4313      	orrs	r3, r2
 800084a:	b21b      	sxth	r3, r3
 800084c:	b29b      	uxth	r3, r3
 800084e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000852:	b29b      	uxth	r3, r3
 8000854:	823b      	strh	r3, [r7, #16]
    temp[3]  = ((payload[4]  >> 1) | (payload[5] << 7)) & 0x07FF;
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	3304      	adds	r3, #4
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	b2db      	uxtb	r3, r3
 8000860:	b21a      	sxth	r2, r3
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	3305      	adds	r3, #5
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	b21b      	sxth	r3, r3
 800086a:	01db      	lsls	r3, r3, #7
 800086c:	b21b      	sxth	r3, r3
 800086e:	4313      	orrs	r3, r2
 8000870:	b21b      	sxth	r3, r3
 8000872:	b29b      	uxth	r3, r3
 8000874:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000878:	b29b      	uxth	r3, r3
 800087a:	827b      	strh	r3, [r7, #18]
    temp[4]  = ((payload[5]  >> 4) | (payload[6] << 4)) & 0x07FF;
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	3305      	adds	r3, #5
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	091b      	lsrs	r3, r3, #4
 8000884:	b2db      	uxtb	r3, r3
 8000886:	b21a      	sxth	r2, r3
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	3306      	adds	r3, #6
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	b21b      	sxth	r3, r3
 8000890:	011b      	lsls	r3, r3, #4
 8000892:	b21b      	sxth	r3, r3
 8000894:	4313      	orrs	r3, r2
 8000896:	b21b      	sxth	r3, r3
 8000898:	b29b      	uxth	r3, r3
 800089a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800089e:	b29b      	uxth	r3, r3
 80008a0:	82bb      	strh	r3, [r7, #20]
    temp[5]  = ((payload[6]  >> 7) | (payload[7] << 1) | (payload[8] << 9)) & 0x07FF;
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	3306      	adds	r3, #6
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	09db      	lsrs	r3, r3, #7
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	b21a      	sxth	r2, r3
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	3307      	adds	r3, #7
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	b21b      	sxth	r3, r3
 80008b6:	005b      	lsls	r3, r3, #1
 80008b8:	b21b      	sxth	r3, r3
 80008ba:	4313      	orrs	r3, r2
 80008bc:	b21a      	sxth	r2, r3
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	3308      	adds	r3, #8
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	b21b      	sxth	r3, r3
 80008c6:	025b      	lsls	r3, r3, #9
 80008c8:	b21b      	sxth	r3, r3
 80008ca:	4313      	orrs	r3, r2
 80008cc:	b21b      	sxth	r3, r3
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80008d4:	b29b      	uxth	r3, r3
 80008d6:	82fb      	strh	r3, [r7, #22]
    temp[6]  = ((payload[8]  >> 2) | (payload[9] << 6)) & 0x07FF;
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	3308      	adds	r3, #8
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	089b      	lsrs	r3, r3, #2
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	b21a      	sxth	r2, r3
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	3309      	adds	r3, #9
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	b21b      	sxth	r3, r3
 80008ec:	019b      	lsls	r3, r3, #6
 80008ee:	b21b      	sxth	r3, r3
 80008f0:	4313      	orrs	r3, r2
 80008f2:	b21b      	sxth	r3, r3
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80008fa:	b29b      	uxth	r3, r3
 80008fc:	833b      	strh	r3, [r7, #24]
    temp[7]  = ((payload[9]  >> 5) | (payload[10] << 3)) & 0x07FF;
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	3309      	adds	r3, #9
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	095b      	lsrs	r3, r3, #5
 8000906:	b2db      	uxtb	r3, r3
 8000908:	b21a      	sxth	r2, r3
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	330a      	adds	r3, #10
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	b21b      	sxth	r3, r3
 8000912:	00db      	lsls	r3, r3, #3
 8000914:	b21b      	sxth	r3, r3
 8000916:	4313      	orrs	r3, r2
 8000918:	b21b      	sxth	r3, r3
 800091a:	b29b      	uxth	r3, r3
 800091c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000920:	b29b      	uxth	r3, r3
 8000922:	837b      	strh	r3, [r7, #26]
    temp[8]  = ((payload[11] >> 0) | (payload[12] << 8)) & 0x07FF;
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	330b      	adds	r3, #11
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	b21a      	sxth	r2, r3
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	330c      	adds	r3, #12
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	b21b      	sxth	r3, r3
 8000934:	021b      	lsls	r3, r3, #8
 8000936:	b21b      	sxth	r3, r3
 8000938:	4313      	orrs	r3, r2
 800093a:	b21b      	sxth	r3, r3
 800093c:	b29b      	uxth	r3, r3
 800093e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000942:	b29b      	uxth	r3, r3
 8000944:	83bb      	strh	r3, [r7, #28]
    temp[9]  = ((payload[12] >> 3) | (payload[13] << 5)) & 0x07FF;
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	330c      	adds	r3, #12
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	08db      	lsrs	r3, r3, #3
 800094e:	b2db      	uxtb	r3, r3
 8000950:	b21a      	sxth	r2, r3
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	330d      	adds	r3, #13
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	b21b      	sxth	r3, r3
 800095a:	015b      	lsls	r3, r3, #5
 800095c:	b21b      	sxth	r3, r3
 800095e:	4313      	orrs	r3, r2
 8000960:	b21b      	sxth	r3, r3
 8000962:	b29b      	uxth	r3, r3
 8000964:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000968:	b29b      	uxth	r3, r3
 800096a:	83fb      	strh	r3, [r7, #30]
    temp[10] = ((payload[13] >> 6) | (payload[14] << 2) | (payload[15] << 10)) & 0x07FF;
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	330d      	adds	r3, #13
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	099b      	lsrs	r3, r3, #6
 8000974:	b2db      	uxtb	r3, r3
 8000976:	b21a      	sxth	r2, r3
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	330e      	adds	r3, #14
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	b21b      	sxth	r3, r3
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	b21b      	sxth	r3, r3
 8000984:	4313      	orrs	r3, r2
 8000986:	b21a      	sxth	r2, r3
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	330f      	adds	r3, #15
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	b21b      	sxth	r3, r3
 8000990:	029b      	lsls	r3, r3, #10
 8000992:	b21b      	sxth	r3, r3
 8000994:	4313      	orrs	r3, r2
 8000996:	b21b      	sxth	r3, r3
 8000998:	b29b      	uxth	r3, r3
 800099a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800099e:	b29b      	uxth	r3, r3
 80009a0:	843b      	strh	r3, [r7, #32]
    temp[11] = ((payload[15] >> 1) | (payload[16] << 7)) & 0x07FF;
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	330f      	adds	r3, #15
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	085b      	lsrs	r3, r3, #1
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	b21a      	sxth	r2, r3
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	3310      	adds	r3, #16
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	b21b      	sxth	r3, r3
 80009b6:	01db      	lsls	r3, r3, #7
 80009b8:	b21b      	sxth	r3, r3
 80009ba:	4313      	orrs	r3, r2
 80009bc:	b21b      	sxth	r3, r3
 80009be:	b29b      	uxth	r3, r3
 80009c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	847b      	strh	r3, [r7, #34]	@ 0x22
    temp[12] = ((payload[16] >> 4) | (payload[17] << 4)) & 0x07FF;
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	3310      	adds	r3, #16
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	091b      	lsrs	r3, r3, #4
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	b21a      	sxth	r2, r3
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	3311      	adds	r3, #17
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	b21b      	sxth	r3, r3
 80009dc:	011b      	lsls	r3, r3, #4
 80009de:	b21b      	sxth	r3, r3
 80009e0:	4313      	orrs	r3, r2
 80009e2:	b21b      	sxth	r3, r3
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	84bb      	strh	r3, [r7, #36]	@ 0x24
    temp[13] = ((payload[17] >> 7) | (payload[18] << 1) | (payload[19] << 9)) & 0x07FF;
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	3311      	adds	r3, #17
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	09db      	lsrs	r3, r3, #7
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	b21a      	sxth	r2, r3
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	3312      	adds	r3, #18
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	b21b      	sxth	r3, r3
 8000a02:	005b      	lsls	r3, r3, #1
 8000a04:	b21b      	sxth	r3, r3
 8000a06:	4313      	orrs	r3, r2
 8000a08:	b21a      	sxth	r2, r3
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	3313      	adds	r3, #19
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	b21b      	sxth	r3, r3
 8000a12:	025b      	lsls	r3, r3, #9
 8000a14:	b21b      	sxth	r3, r3
 8000a16:	4313      	orrs	r3, r2
 8000a18:	b21b      	sxth	r3, r3
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	84fb      	strh	r3, [r7, #38]	@ 0x26
    temp[14] = ((payload[19] >> 2) | (payload[20] << 6)) & 0x07FF;
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	3313      	adds	r3, #19
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	089b      	lsrs	r3, r3, #2
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	b21a      	sxth	r2, r3
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	3314      	adds	r3, #20
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	b21b      	sxth	r3, r3
 8000a38:	019b      	lsls	r3, r3, #6
 8000a3a:	b21b      	sxth	r3, r3
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	b21b      	sxth	r3, r3
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000a46:	b29b      	uxth	r3, r3
 8000a48:	853b      	strh	r3, [r7, #40]	@ 0x28
    temp[15] = ((payload[20] >> 5) | (payload[21] << 3)) & 0x07FF;
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	3314      	adds	r3, #20
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	095b      	lsrs	r3, r3, #5
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	b21a      	sxth	r2, r3
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	3315      	adds	r3, #21
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	b21b      	sxth	r3, r3
 8000a5e:	00db      	lsls	r3, r3, #3
 8000a60:	b21b      	sxth	r3, r3
 8000a62:	4313      	orrs	r3, r2
 8000a64:	b21b      	sxth	r3, r3
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000a6c:	b29b      	uxth	r3, r3
 8000a6e:	857b      	strh	r3, [r7, #42]	@ 0x2a

    for (int i = 0; i < CRSF_NUM_CHANNELS; i++) {
 8000a70:	2300      	movs	r3, #0
 8000a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000a74:	e00f      	b.n	8000a96 <CrsfSerial_UnpackChannels+0x2d4>
        hcrsf->channels[i] = temp[i];
 8000a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	3330      	adds	r3, #48	@ 0x30
 8000a7c:	443b      	add	r3, r7
 8000a7e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8000a82:	4619      	mov	r1, r3
 8000a84:	687a      	ldr	r2, [r7, #4]
 8000a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a88:	335c      	adds	r3, #92	@ 0x5c
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	4413      	add	r3, r2
 8000a8e:	6059      	str	r1, [r3, #4]
    for (int i = 0; i < CRSF_NUM_CHANNELS; i++) {
 8000a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a92:	3301      	adds	r3, #1
 8000a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a98:	2b0f      	cmp	r3, #15
 8000a9a:	ddec      	ble.n	8000a76 <CrsfSerial_UnpackChannels+0x2b4>
    }
}
 8000a9c:	bf00      	nop
 8000a9e:	bf00      	nop
 8000aa0:	3730      	adds	r7, #48	@ 0x30
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <HandlePacket>:



static void HandlePacket(CrsfSerial_HandleTypeDef *hcrsf, uint8_t len) {
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b084      	sub	sp, #16
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
 8000aae:	460b      	mov	r3, r1
 8000ab0:	70fb      	strb	r3, [r7, #3]
    crsf_header_t *hdr = (crsf_header_t *)hcrsf->rxBuf;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	3304      	adds	r3, #4
 8000ab6:	60fb      	str	r3, [r7, #12]
    switch (hdr->type) {
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	789b      	ldrb	r3, [r3, #2]
 8000abc:	2b16      	cmp	r3, #22
 8000abe:	d006      	beq.n	8000ace <HandlePacket+0x28>
 8000ac0:	2b16      	cmp	r3, #22
 8000ac2:	dc4f      	bgt.n	8000b64 <HandlePacket+0xbe>
 8000ac4:	2b02      	cmp	r3, #2
 8000ac6:	d033      	beq.n	8000b30 <HandlePacket+0x8a>
 8000ac8:	2b14      	cmp	r3, #20
 8000aca:	d01a      	beq.n	8000b02 <HandlePacket+0x5c>
        case CRSF_FRAMETYPE_GPS:
            memcpy(&hcrsf->gpsSensor, hdr->data, sizeof(crsf_sensor_gps_t));
            if (hcrsf->onPacketGps) hcrsf->onPacketGps(&hcrsf->gpsSensor);
            break;
    }
}
 8000acc:	e04a      	b.n	8000b64 <HandlePacket+0xbe>
            CrsfSerial_UnpackChannels(hcrsf, hdr->data); // <--- UNPACK channels into hcrsf->channels
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	3303      	adds	r3, #3
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f7ff fe74 	bl	80007c2 <CrsfSerial_UnpackChannels>
            if (hcrsf->onPacketChannels) hcrsf->onPacketChannels();
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	f8d3 31c0 	ldr.w	r3, [r3, #448]	@ 0x1c0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d003      	beq.n	8000aec <HandlePacket+0x46>
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f8d3 31c0 	ldr.w	r3, [r3, #448]	@ 0x1c0
 8000aea:	4798      	blx	r3
            hcrsf->lastChannelsPacket = HAL_GetTick();
 8000aec:	f000 ff0a 	bl	8001904 <HAL_GetTick>
 8000af0:	4602      	mov	r2, r0
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
            hcrsf->linkIsUp = true;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2201      	movs	r2, #1
 8000afc:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c
            break;
 8000b00:	e030      	b.n	8000b64 <HandlePacket+0xbe>
            memcpy(&hcrsf->linkStatistics, hdr->data, sizeof(crsfLinkStatistics_t));
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	f203 1045 	addw	r0, r3, #325	@ 0x145
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	3303      	adds	r3, #3
 8000b0c:	220a      	movs	r2, #10
 8000b0e:	4619      	mov	r1, r3
 8000b10:	f004 fbfc 	bl	800530c <memcpy>
            if (hcrsf->onPacketLinkStatistics) hcrsf->onPacketLinkStatistics(&hcrsf->linkStatistics);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d01f      	beq.n	8000b5e <HandlePacket+0xb8>
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8000b24:	687a      	ldr	r2, [r7, #4]
 8000b26:	f202 1245 	addw	r2, r2, #325	@ 0x145
 8000b2a:	4610      	mov	r0, r2
 8000b2c:	4798      	blx	r3
            break;
 8000b2e:	e016      	b.n	8000b5e <HandlePacket+0xb8>
            memcpy(&hcrsf->gpsSensor, hdr->data, sizeof(crsf_sensor_gps_t));
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	f203 104f 	addw	r0, r3, #335	@ 0x14f
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	3303      	adds	r3, #3
 8000b3a:	220f      	movs	r2, #15
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	f004 fbe5 	bl	800530c <memcpy>
            if (hcrsf->onPacketGps) hcrsf->onPacketGps(&hcrsf->gpsSensor);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	f8d3 31c8 	ldr.w	r3, [r3, #456]	@ 0x1c8
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d00a      	beq.n	8000b62 <HandlePacket+0xbc>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f8d3 31c8 	ldr.w	r3, [r3, #456]	@ 0x1c8
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	f202 124f 	addw	r2, r2, #335	@ 0x14f
 8000b58:	4610      	mov	r0, r2
 8000b5a:	4798      	blx	r3
            break;
 8000b5c:	e001      	b.n	8000b62 <HandlePacket+0xbc>
            break;
 8000b5e:	bf00      	nop
 8000b60:	e000      	b.n	8000b64 <HandlePacket+0xbe>
            break;
 8000b62:	bf00      	nop
}
 8000b64:	bf00      	nop
 8000b66:	3710      	adds	r7, #16
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <ProcessByte>:

//static void ProcessByte(CrsfSerial_HandleTypeDef *hcrsf, uint8_t b) {
void ProcessByte(CrsfSerial_HandleTypeDef *hcrsf, uint8_t b) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	460b      	mov	r3, r1
 8000b76:	70fb      	strb	r3, [r7, #3]
    hcrsf->rxBuf[hcrsf->rxBufPos++] = b;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000b7e:	1c5a      	adds	r2, r3, #1
 8000b80:	b2d1      	uxtb	r1, r2
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	f882 1044 	strb.w	r1, [r2, #68]	@ 0x44
 8000b88:	461a      	mov	r2, r3
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	78fa      	ldrb	r2, [r7, #3]
 8000b90:	711a      	strb	r2, [r3, #4]
    if (hcrsf->rxBufPos >= 2) {
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d931      	bls.n	8000c00 <ProcessByte+0x94>
        uint8_t len = hcrsf->rxBuf[1];
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	795b      	ldrb	r3, [r3, #5]
 8000ba0:	73fb      	strb	r3, [r7, #15]
        if (len >= 3 && hcrsf->rxBufPos >= len + 2) {
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
 8000ba4:	2b02      	cmp	r3, #2
 8000ba6:	d92b      	bls.n	8000c00 <ProcessByte+0x94>
 8000ba8:	7bfb      	ldrb	r3, [r7, #15]
 8000baa:	3301      	adds	r3, #1
 8000bac:	687a      	ldr	r2, [r7, #4]
 8000bae:	f892 2044 	ldrb.w	r2, [r2, #68]	@ 0x44
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	da24      	bge.n	8000c00 <ProcessByte+0x94>
            uint8_t crc = crc8_dvb_s2(hcrsf->rxBuf + 2, len - 1);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	3304      	adds	r3, #4
 8000bba:	1c9a      	adds	r2, r3, #2
 8000bbc:	7bfb      	ldrb	r3, [r7, #15]
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4610      	mov	r0, r2
 8000bc6:	f7ff fd33 	bl	8000630 <crc8_dvb_s2>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	73bb      	strb	r3, [r7, #14]
            if (crc == hcrsf->rxBuf[len + 1]) {
 8000bce:	7bfb      	ldrb	r3, [r7, #15]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	687a      	ldr	r2, [r7, #4]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	791b      	ldrb	r3, [r3, #4]
 8000bd8:	7bba      	ldrb	r2, [r7, #14]
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	d10c      	bne.n	8000bf8 <ProcessByte+0x8c>
                HandlePacket(hcrsf, len);
 8000bde:	7bfb      	ldrb	r3, [r7, #15]
 8000be0:	4619      	mov	r1, r3
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f7ff ff5f 	bl	8000aa6 <HandlePacket>
                ShiftBuffer(hcrsf, len + 2);
 8000be8:	7bfb      	ldrb	r3, [r7, #15]
 8000bea:	3302      	adds	r3, #2
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	4619      	mov	r1, r3
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f7ff fdba 	bl	800076a <ShiftBuffer>
            } else {
                ShiftBuffer(hcrsf, 1);
            }
        }
    }
}
 8000bf6:	e003      	b.n	8000c00 <ProcessByte+0x94>
                ShiftBuffer(hcrsf, 1);
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f7ff fdb5 	bl	800076a <ShiftBuffer>
}
 8000c00:	bf00      	nop
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <CrsfSerial_Loop>:

void CrsfSerial_Loop(CrsfSerial_HandleTypeDef *hcrsf) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
//            if (hcrsf->onOobData) hcrsf->onOobData(b);
//        } else {
//            ProcessByte(hcrsf, b);
//        }
//    }
    if (hcrsf->linkIsUp && HAL_GetTick() - hcrsf->lastChannelsPacket > CRSF_FAILSAFE_STAGE1_MS) {
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d016      	beq.n	8000c48 <CrsfSerial_Loop+0x40>
 8000c1a:	f000 fe73 	bl	8001904 <HAL_GetTick>
 8000c1e:	4602      	mov	r2, r0
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8000c26:	1ad3      	subs	r3, r2, r3
 8000c28:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000c2c:	d90c      	bls.n	8000c48 <CrsfSerial_Loop+0x40>
        if (hcrsf->onLinkDown) hcrsf->onLinkDown();
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	f8d3 31b8 	ldr.w	r3, [r3, #440]	@ 0x1b8
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d003      	beq.n	8000c40 <CrsfSerial_Loop+0x38>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f8d3 31b8 	ldr.w	r3, [r3, #440]	@ 0x1b8
 8000c3e:	4798      	blx	r3
        hcrsf->linkIsUp = false;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2200      	movs	r2, #0
 8000c44:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c
    }
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <CrsfSerial_UART_IdleCallback>:

void CrsfSerial_UART_IdleCallback(CrsfSerial_HandleTypeDef *hcrsf)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
    uint16_t dmaPos = UART_RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(hcrsf->huart->hdmarx);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8000c68:	823b      	strh	r3, [r7, #16]
    uint16_t len;

    if (dmaPos != oldPos) {
 8000c6a:	4b2f      	ldr	r3, [pc, #188]	@ (8000d28 <CrsfSerial_UART_IdleCallback+0xd8>)
 8000c6c:	881b      	ldrh	r3, [r3, #0]
 8000c6e:	8a3a      	ldrh	r2, [r7, #16]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d054      	beq.n	8000d1e <CrsfSerial_UART_IdleCallback+0xce>
        if (dmaPos > oldPos) {
 8000c74:	4b2c      	ldr	r3, [pc, #176]	@ (8000d28 <CrsfSerial_UART_IdleCallback+0xd8>)
 8000c76:	881b      	ldrh	r3, [r3, #0]
 8000c78:	8a3a      	ldrh	r2, [r7, #16]
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	d91a      	bls.n	8000cb4 <CrsfSerial_UART_IdleCallback+0x64>
            len = dmaPos - oldPos;
 8000c7e:	4b2a      	ldr	r3, [pc, #168]	@ (8000d28 <CrsfSerial_UART_IdleCallback+0xd8>)
 8000c80:	881b      	ldrh	r3, [r3, #0]
 8000c82:	8a3a      	ldrh	r2, [r7, #16]
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	81fb      	strh	r3, [r7, #14]
            for (uint16_t i = 0; i < len; i++) {
 8000c88:	2300      	movs	r3, #0
 8000c8a:	82fb      	strh	r3, [r7, #22]
 8000c8c:	e00d      	b.n	8000caa <CrsfSerial_UART_IdleCallback+0x5a>
                ProcessByte(hcrsf, uartRxBuf[oldPos + i]);
 8000c8e:	4b26      	ldr	r3, [pc, #152]	@ (8000d28 <CrsfSerial_UART_IdleCallback+0xd8>)
 8000c90:	881b      	ldrh	r3, [r3, #0]
 8000c92:	461a      	mov	r2, r3
 8000c94:	8afb      	ldrh	r3, [r7, #22]
 8000c96:	4413      	add	r3, r2
 8000c98:	4a24      	ldr	r2, [pc, #144]	@ (8000d2c <CrsfSerial_UART_IdleCallback+0xdc>)
 8000c9a:	5cd3      	ldrb	r3, [r2, r3]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f7ff ff64 	bl	8000b6c <ProcessByte>
            for (uint16_t i = 0; i < len; i++) {
 8000ca4:	8afb      	ldrh	r3, [r7, #22]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	82fb      	strh	r3, [r7, #22]
 8000caa:	8afa      	ldrh	r2, [r7, #22]
 8000cac:	89fb      	ldrh	r3, [r7, #14]
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	d3ed      	bcc.n	8000c8e <CrsfSerial_UART_IdleCallback+0x3e>
 8000cb2:	e02a      	b.n	8000d0a <CrsfSerial_UART_IdleCallback+0xba>
            }
        } else {
            len = UART_RX_BUFFER_SIZE - oldPos;
 8000cb4:	4b1c      	ldr	r3, [pc, #112]	@ (8000d28 <CrsfSerial_UART_IdleCallback+0xd8>)
 8000cb6:	881b      	ldrh	r3, [r3, #0]
 8000cb8:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8000cbc:	81fb      	strh	r3, [r7, #14]
            for (uint16_t i = 0; i < len; i++) {
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	82bb      	strh	r3, [r7, #20]
 8000cc2:	e00d      	b.n	8000ce0 <CrsfSerial_UART_IdleCallback+0x90>
                ProcessByte(hcrsf, uartRxBuf[oldPos + i]);
 8000cc4:	4b18      	ldr	r3, [pc, #96]	@ (8000d28 <CrsfSerial_UART_IdleCallback+0xd8>)
 8000cc6:	881b      	ldrh	r3, [r3, #0]
 8000cc8:	461a      	mov	r2, r3
 8000cca:	8abb      	ldrh	r3, [r7, #20]
 8000ccc:	4413      	add	r3, r2
 8000cce:	4a17      	ldr	r2, [pc, #92]	@ (8000d2c <CrsfSerial_UART_IdleCallback+0xdc>)
 8000cd0:	5cd3      	ldrb	r3, [r2, r3]
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f7ff ff49 	bl	8000b6c <ProcessByte>
            for (uint16_t i = 0; i < len; i++) {
 8000cda:	8abb      	ldrh	r3, [r7, #20]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	82bb      	strh	r3, [r7, #20]
 8000ce0:	8aba      	ldrh	r2, [r7, #20]
 8000ce2:	89fb      	ldrh	r3, [r7, #14]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d3ed      	bcc.n	8000cc4 <CrsfSerial_UART_IdleCallback+0x74>
            }
            for (uint16_t i = 0; i < dmaPos; i++) {
 8000ce8:	2300      	movs	r3, #0
 8000cea:	827b      	strh	r3, [r7, #18]
 8000cec:	e009      	b.n	8000d02 <CrsfSerial_UART_IdleCallback+0xb2>
                ProcessByte(hcrsf, uartRxBuf[i]);
 8000cee:	8a7b      	ldrh	r3, [r7, #18]
 8000cf0:	4a0e      	ldr	r2, [pc, #56]	@ (8000d2c <CrsfSerial_UART_IdleCallback+0xdc>)
 8000cf2:	5cd3      	ldrb	r3, [r2, r3]
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f7ff ff38 	bl	8000b6c <ProcessByte>
            for (uint16_t i = 0; i < dmaPos; i++) {
 8000cfc:	8a7b      	ldrh	r3, [r7, #18]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	827b      	strh	r3, [r7, #18]
 8000d02:	8a7a      	ldrh	r2, [r7, #18]
 8000d04:	8a3b      	ldrh	r3, [r7, #16]
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d3f1      	bcc.n	8000cee <CrsfSerial_UART_IdleCallback+0x9e>
            }
        }

        oldPos = dmaPos;
 8000d0a:	4a07      	ldr	r2, [pc, #28]	@ (8000d28 <CrsfSerial_UART_IdleCallback+0xd8>)
 8000d0c:	8a3b      	ldrh	r3, [r7, #16]
 8000d0e:	8013      	strh	r3, [r2, #0]
        if (oldPos >= UART_RX_BUFFER_SIZE) oldPos = 0;
 8000d10:	4b05      	ldr	r3, [pc, #20]	@ (8000d28 <CrsfSerial_UART_IdleCallback+0xd8>)
 8000d12:	881b      	ldrh	r3, [r3, #0]
 8000d14:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d16:	d902      	bls.n	8000d1e <CrsfSerial_UART_IdleCallback+0xce>
 8000d18:	4b03      	ldr	r3, [pc, #12]	@ (8000d28 <CrsfSerial_UART_IdleCallback+0xd8>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	801a      	strh	r2, [r3, #0]
    }
}
 8000d1e:	bf00      	nop
 8000d20:	3718      	adds	r7, #24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	200000f0 	.word	0x200000f0
 8000d2c:	20000070 	.word	0x20000070

08000d30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	607b      	str	r3, [r7, #4]
 8000d3a:	4b10      	ldr	r3, [pc, #64]	@ (8000d7c <MX_DMA_Init+0x4c>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3e:	4a0f      	ldr	r2, [pc, #60]	@ (8000d7c <MX_DMA_Init+0x4c>)
 8000d40:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d46:	4b0d      	ldr	r3, [pc, #52]	@ (8000d7c <MX_DMA_Init+0x4c>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d4e:	607b      	str	r3, [r7, #4]
 8000d50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2100      	movs	r1, #0
 8000d56:	203a      	movs	r0, #58	@ 0x3a
 8000d58:	f001 f92d 	bl	8001fb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000d5c:	203a      	movs	r0, #58	@ 0x3a
 8000d5e:	f001 f946 	bl	8001fee <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2100      	movs	r1, #0
 8000d66:	2046      	movs	r0, #70	@ 0x46
 8000d68:	f001 f925 	bl	8001fb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000d6c:	2046      	movs	r0, #70	@ 0x46
 8000d6e:	f001 f93e 	bl	8001fee <HAL_NVIC_EnableIRQ>

}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40023800 	.word	0x40023800

08000d80 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08a      	sub	sp, #40	@ 0x28
 8000d84:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
 8000d90:	609a      	str	r2, [r3, #8]
 8000d92:	60da      	str	r2, [r3, #12]
 8000d94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	613b      	str	r3, [r7, #16]
 8000d9a:	4b27      	ldr	r3, [pc, #156]	@ (8000e38 <MX_GPIO_Init+0xb8>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9e:	4a26      	ldr	r2, [pc, #152]	@ (8000e38 <MX_GPIO_Init+0xb8>)
 8000da0:	f043 0304 	orr.w	r3, r3, #4
 8000da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da6:	4b24      	ldr	r3, [pc, #144]	@ (8000e38 <MX_GPIO_Init+0xb8>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	f003 0304 	and.w	r3, r3, #4
 8000dae:	613b      	str	r3, [r7, #16]
 8000db0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	4b20      	ldr	r3, [pc, #128]	@ (8000e38 <MX_GPIO_Init+0xb8>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dba:	4a1f      	ldr	r2, [pc, #124]	@ (8000e38 <MX_GPIO_Init+0xb8>)
 8000dbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc2:	4b1d      	ldr	r3, [pc, #116]	@ (8000e38 <MX_GPIO_Init+0xb8>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	4b19      	ldr	r3, [pc, #100]	@ (8000e38 <MX_GPIO_Init+0xb8>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd6:	4a18      	ldr	r2, [pc, #96]	@ (8000e38 <MX_GPIO_Init+0xb8>)
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dde:	4b16      	ldr	r3, [pc, #88]	@ (8000e38 <MX_GPIO_Init+0xb8>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	607b      	str	r3, [r7, #4]
 8000dee:	4b12      	ldr	r3, [pc, #72]	@ (8000e38 <MX_GPIO_Init+0xb8>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df2:	4a11      	ldr	r2, [pc, #68]	@ (8000e38 <MX_GPIO_Init+0xb8>)
 8000df4:	f043 0302 	orr.w	r3, r3, #2
 8000df8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dfa:	4b0f      	ldr	r3, [pc, #60]	@ (8000e38 <MX_GPIO_Init+0xb8>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfe:	f003 0302 	and.w	r3, r3, #2
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DPIN_LED_GPIO_Port, DPIN_LED_Pin, GPIO_PIN_SET);
 8000e06:	2201      	movs	r2, #1
 8000e08:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e0c:	480b      	ldr	r0, [pc, #44]	@ (8000e3c <MX_GPIO_Init+0xbc>)
 8000e0e:	f001 fe8f 	bl	8002b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DPIN_LED_Pin */
  GPIO_InitStruct.Pin = DPIN_LED_Pin;
 8000e12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DPIN_LED_GPIO_Port, &GPIO_InitStruct);
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4804      	ldr	r0, [pc, #16]	@ (8000e3c <MX_GPIO_Init+0xbc>)
 8000e2c:	f001 fcfc 	bl	8002828 <HAL_GPIO_Init>

}
 8000e30:	bf00      	nop
 8000e32:	3728      	adds	r7, #40	@ 0x28
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40020800 	.word	0x40020800

08000e40 <onRCFrameReceived>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Called when a valid RC packet is received
void onRCFrameReceived(const int *rcChannels) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
    lastPacketMillis = HAL_GetTick();  // Timestamp of last valid packet
 8000e48:	f000 fd5c 	bl	8001904 <HAL_GetTick>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	4a0f      	ldr	r2, [pc, #60]	@ (8000e8c <onRCFrameReceived+0x4c>)
 8000e50:	6013      	str	r3, [r2, #0]
    failsafeActive = false;
 8000e52:	4b0f      	ldr	r3, [pc, #60]	@ (8000e90 <onRCFrameReceived+0x50>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	701a      	strb	r2, [r3, #0]

    // Store last valid RC values
    for (int i = 0; i < CRSF_NUM_CHANNELS; i++) {
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	e00b      	b.n	8000e76 <onRCFrameReceived+0x36>
        lastValidChannels[i] = rcChannels[i];
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	4413      	add	r3, r2
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	490a      	ldr	r1, [pc, #40]	@ (8000e94 <onRCFrameReceived+0x54>)
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < CRSF_NUM_CHANNELS; i++) {
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	3301      	adds	r3, #1
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	2b0f      	cmp	r3, #15
 8000e7a:	ddf0      	ble.n	8000e5e <onRCFrameReceived+0x1e>
    }

    // Update servos here with lastValidChannels
    ServoControl_Update(lastValidChannels);
 8000e7c:	4805      	ldr	r0, [pc, #20]	@ (8000e94 <onRCFrameReceived+0x54>)
 8000e7e:	f000 f909 	bl	8001094 <ServoControl_Update>
//    updateServos(lastValidChannels);
}
 8000e82:	bf00      	nop
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	200002c0 	.word	0x200002c0
 8000e90:	200002c4 	.word	0x200002c4
 8000e94:	200002c8 	.word	0x200002c8

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9e:	f000 fccb 	bl	8001838 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea2:	f000 f855 	bl	8000f50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea6:	f7ff ff6b 	bl	8000d80 <MX_GPIO_Init>
  MX_DMA_Init();
 8000eaa:	f7ff ff41 	bl	8000d30 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000eae:	f000 fbb5 	bl	800161c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000eb2:	f7ff fb27 	bl	8000504 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000eb6:	f000 fa1b 	bl	80012f0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000eba:	f000 fa99 	bl	80013f0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  ServoControl_Init();
 8000ebe:	f000 f8d1 	bl	8001064 <ServoControl_Init>

  // Initialize CRSF with UART and baud rate
  CrsfSerial_Init(&hcrsf, &huart1, CRSF_BAUDRATE);
 8000ec2:	4a1b      	ldr	r2, [pc, #108]	@ (8000f30 <main+0x98>)
 8000ec4:	491b      	ldr	r1, [pc, #108]	@ (8000f34 <main+0x9c>)
 8000ec6:	481c      	ldr	r0, [pc, #112]	@ (8000f38 <main+0xa0>)
 8000ec8:	f7ff fbed 	bl	80006a6 <CrsfSerial_Init>
  CrsfSerial_Begin(&hcrsf, CRSF_BAUDRATE);
 8000ecc:	4918      	ldr	r1, [pc, #96]	@ (8000f30 <main+0x98>)
 8000ece:	481a      	ldr	r0, [pc, #104]	@ (8000f38 <main+0xa0>)
 8000ed0:	f7ff fc35 	bl	800073e <CrsfSerial_Begin>

  /* USER CODE END 2 */

  HAL_UART_Receive_DMA(&huart1, uartRxBuf, UART_RX_BUFFER_SIZE);
 8000ed4:	2280      	movs	r2, #128	@ 0x80
 8000ed6:	4919      	ldr	r1, [pc, #100]	@ (8000f3c <main+0xa4>)
 8000ed8:	4816      	ldr	r0, [pc, #88]	@ (8000f34 <main+0x9c>)
 8000eda:	f003 f913 	bl	8004104 <HAL_UART_Receive_DMA>
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8000ede:	4b15      	ldr	r3, [pc, #84]	@ (8000f34 <main+0x9c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	68da      	ldr	r2, [r3, #12]
 8000ee4:	4b13      	ldr	r3, [pc, #76]	@ (8000f34 <main+0x9c>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f042 0210 	orr.w	r2, r2, #16
 8000eec:	60da      	str	r2, [r3, #12]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  CrsfSerial_Loop(&hcrsf);
 8000eee:	4812      	ldr	r0, [pc, #72]	@ (8000f38 <main+0xa0>)
 8000ef0:	f7ff fe8a 	bl	8000c08 <CrsfSerial_Loop>

	  onRCFrameReceived(hcrsf.channels);
 8000ef4:	4812      	ldr	r0, [pc, #72]	@ (8000f40 <main+0xa8>)
 8000ef6:	f7ff ffa3 	bl	8000e40 <onRCFrameReceived>

	  ServoControl_Update(hcrsf.channels);
 8000efa:	4811      	ldr	r0, [pc, #68]	@ (8000f40 <main+0xa8>)
 8000efc:	f000 f8ca 	bl	8001094 <ServoControl_Update>

	  uint32_t currentMillis = HAL_GetTick();
 8000f00:	f000 fd00 	bl	8001904 <HAL_GetTick>
 8000f04:	6078      	str	r0, [r7, #4]

	  if ((currentMillis - lastPacketMillis) > CRSF_PACKET_TIMEOUT_MS) {
 8000f06:	4b0f      	ldr	r3, [pc, #60]	@ (8000f44 <main+0xac>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	2b64      	cmp	r3, #100	@ 0x64
 8000f10:	d9ed      	bls.n	8000eee <main+0x56>
		  if (!failsafeActive) {
 8000f12:	4b0d      	ldr	r3, [pc, #52]	@ (8000f48 <main+0xb0>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	f083 0301 	eor.w	r3, r3, #1
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d0e6      	beq.n	8000eee <main+0x56>
			  failsafeActive = true;
 8000f20:	4b09      	ldr	r3, [pc, #36]	@ (8000f48 <main+0xb0>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	701a      	strb	r2, [r3, #0]

			  // Activate failsafe behavior: hold last known values
			  ServoControl_Update(lastValidChannels);
 8000f26:	4809      	ldr	r0, [pc, #36]	@ (8000f4c <main+0xb4>)
 8000f28:	f000 f8b4 	bl	8001094 <ServoControl_Update>
  {
 8000f2c:	e7df      	b.n	8000eee <main+0x56>
 8000f2e:	bf00      	nop
 8000f30:	000668a0 	.word	0x000668a0
 8000f34:	20000398 	.word	0x20000398
 8000f38:	200000f4 	.word	0x200000f4
 8000f3c:	20000070 	.word	0x20000070
 8000f40:	20000268 	.word	0x20000268
 8000f44:	200002c0 	.word	0x200002c0
 8000f48:	200002c4 	.word	0x200002c4
 8000f4c:	200002c8 	.word	0x200002c8

08000f50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b094      	sub	sp, #80	@ 0x50
 8000f54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f56:	f107 0320 	add.w	r3, r7, #32
 8000f5a:	2230      	movs	r2, #48	@ 0x30
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f004 f9a8 	bl	80052b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f64:	f107 030c 	add.w	r3, r7, #12
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f74:	2300      	movs	r3, #0
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	4b27      	ldr	r3, [pc, #156]	@ (8001018 <SystemClock_Config+0xc8>)
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7c:	4a26      	ldr	r2, [pc, #152]	@ (8001018 <SystemClock_Config+0xc8>)
 8000f7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f82:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f84:	4b24      	ldr	r3, [pc, #144]	@ (8001018 <SystemClock_Config+0xc8>)
 8000f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f90:	2300      	movs	r3, #0
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	4b21      	ldr	r3, [pc, #132]	@ (800101c <SystemClock_Config+0xcc>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a20      	ldr	r2, [pc, #128]	@ (800101c <SystemClock_Config+0xcc>)
 8000f9a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f9e:	6013      	str	r3, [r2, #0]
 8000fa0:	4b1e      	ldr	r3, [pc, #120]	@ (800101c <SystemClock_Config+0xcc>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fa8:	607b      	str	r3, [r7, #4]
 8000faa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fac:	2301      	movs	r3, #1
 8000fae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fb0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fb4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000fc0:	230c      	movs	r3, #12
 8000fc2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000fc4:	2360      	movs	r3, #96	@ 0x60
 8000fc6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fcc:	2304      	movs	r3, #4
 8000fce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd0:	f107 0320 	add.w	r3, r7, #32
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f001 fdc5 	bl	8002b64 <HAL_RCC_OscConfig>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fe0:	f000 f81e 	bl	8001020 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe4:	230f      	movs	r3, #15
 8000fe6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ff0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ff4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ffa:	f107 030c 	add.w	r3, r7, #12
 8000ffe:	2103      	movs	r1, #3
 8001000:	4618      	mov	r0, r3
 8001002:	f002 f827 	bl	8003054 <HAL_RCC_ClockConfig>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800100c:	f000 f808 	bl	8001020 <Error_Handler>
  }
}
 8001010:	bf00      	nop
 8001012:	3750      	adds	r7, #80	@ 0x50
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40023800 	.word	0x40023800
 800101c:	40007000 	.word	0x40007000

08001020 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001024:	b672      	cpsid	i
}
 8001026:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001028:	bf00      	nop
 800102a:	e7fd      	b.n	8001028 <Error_Handler+0x8>

0800102c <map>:
 *      Author: Khalil
 */

#include "servo_control.h"

int map(int value, int in_min, int in_max, int out_min, int out_max) {
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
 8001038:	603b      	str	r3, [r7, #0]
    return (value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	69b9      	ldr	r1, [r7, #24]
 8001042:	683a      	ldr	r2, [r7, #0]
 8001044:	1a8a      	subs	r2, r1, r2
 8001046:	fb03 f202 	mul.w	r2, r3, r2
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	1acb      	subs	r3, r1, r3
 8001050:	fb92 f2f3 	sdiv	r2, r2, r3
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	4413      	add	r3, r2
}
 8001058:	4618      	mov	r0, r3
 800105a:	3714      	adds	r7, #20
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <ServoControl_Init>:

void ServoControl_Init(void) {
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
    // Start all configured PWM channels
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);  // Throttle
 8001068:	2104      	movs	r1, #4
 800106a:	4808      	ldr	r0, [pc, #32]	@ (800108c <ServoControl_Init+0x28>)
 800106c:	f002 fa7a 	bl	8003564 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);  // Rudder
 8001070:	2108      	movs	r1, #8
 8001072:	4806      	ldr	r0, [pc, #24]	@ (800108c <ServoControl_Init+0x28>)
 8001074:	f002 fa76 	bl	8003564 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);  // Elevator
 8001078:	2100      	movs	r1, #0
 800107a:	4805      	ldr	r0, [pc, #20]	@ (8001090 <ServoControl_Init+0x2c>)
 800107c:	f002 fa72 	bl	8003564 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);  // Aileron
 8001080:	2104      	movs	r1, #4
 8001082:	4803      	ldr	r0, [pc, #12]	@ (8001090 <ServoControl_Init+0x2c>)
 8001084:	f002 fa6e 	bl	8003564 <HAL_TIM_PWM_Start>
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000308 	.word	0x20000308
 8001090:	20000350 	.word	0x20000350

08001094 <ServoControl_Update>:

void ServoControl_Update(const int *channels) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af02      	add	r7, sp, #8
 800109a:	6078      	str	r0, [r7, #4]
//    int throttle_us = channels[CHANNEL_THROTTLE];
//    int rudder_us   = channels[CHANNEL_RUDDER];
//    int elevator_us = channels[CHANNEL_ELEVATOR];
//    int aileron_us  = channels[CHANNEL_AILERON];

    int throttle_us = map(channels[CHANNEL_THROTTLE], 172, 1811, 1000, 2000);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6818      	ldr	r0, [r3, #0]
 80010a0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010aa:	f240 7213 	movw	r2, #1811	@ 0x713
 80010ae:	21ac      	movs	r1, #172	@ 0xac
 80010b0:	f7ff ffbc 	bl	800102c <map>
 80010b4:	6178      	str	r0, [r7, #20]
    int rudder_us   = map(channels[CHANNEL_RUDDER], 172, 1811, 1000, 2000);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	3304      	adds	r3, #4
 80010ba:	6818      	ldr	r0, [r3, #0]
 80010bc:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010c6:	f240 7213 	movw	r2, #1811	@ 0x713
 80010ca:	21ac      	movs	r1, #172	@ 0xac
 80010cc:	f7ff ffae 	bl	800102c <map>
 80010d0:	6138      	str	r0, [r7, #16]
    int elevator_us = map(channels[CHANNEL_ELEVATOR], 172, 1811, 1000, 2000);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	3308      	adds	r3, #8
 80010d6:	6818      	ldr	r0, [r3, #0]
 80010d8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010e2:	f240 7213 	movw	r2, #1811	@ 0x713
 80010e6:	21ac      	movs	r1, #172	@ 0xac
 80010e8:	f7ff ffa0 	bl	800102c <map>
 80010ec:	60f8      	str	r0, [r7, #12]
    int aileron_us  = map(channels[CHANNEL_AILERON], 172, 1811, 1000, 2000);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	330c      	adds	r3, #12
 80010f2:	6818      	ldr	r0, [r3, #0]
 80010f4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010fe:	f240 7213 	movw	r2, #1811	@ 0x713
 8001102:	21ac      	movs	r1, #172	@ 0xac
 8001104:	f7ff ff92 	bl	800102c <map>
 8001108:	60b8      	str	r0, [r7, #8]

    // Clamp values to safe servo range
    if (throttle_us < SERVO_MIN_US) throttle_us = SERVO_MIN_US;
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001110:	da02      	bge.n	8001118 <ServoControl_Update+0x84>
 8001112:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001116:	617b      	str	r3, [r7, #20]
    if (throttle_us > SERVO_MAX_US) throttle_us = SERVO_MAX_US;
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800111e:	dd02      	ble.n	8001126 <ServoControl_Update+0x92>
 8001120:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001124:	617b      	str	r3, [r7, #20]

    if (rudder_us < SERVO_MIN_US) rudder_us = SERVO_MIN_US;
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800112c:	da02      	bge.n	8001134 <ServoControl_Update+0xa0>
 800112e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001132:	613b      	str	r3, [r7, #16]
    if (rudder_us > SERVO_MAX_US) rudder_us = SERVO_MAX_US;
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800113a:	dd02      	ble.n	8001142 <ServoControl_Update+0xae>
 800113c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001140:	613b      	str	r3, [r7, #16]

    if (elevator_us < SERVO_MIN_US) elevator_us = SERVO_MIN_US;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001148:	da02      	bge.n	8001150 <ServoControl_Update+0xbc>
 800114a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800114e:	60fb      	str	r3, [r7, #12]
    if (elevator_us > SERVO_MAX_US) elevator_us = SERVO_MAX_US;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001156:	dd02      	ble.n	800115e <ServoControl_Update+0xca>
 8001158:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800115c:	60fb      	str	r3, [r7, #12]

    if (aileron_us < SERVO_MIN_US) aileron_us = SERVO_MIN_US;
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001164:	da02      	bge.n	800116c <ServoControl_Update+0xd8>
 8001166:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800116a:	60bb      	str	r3, [r7, #8]
    if (aileron_us > SERVO_MAX_US) aileron_us = SERVO_MAX_US;
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001172:	dd02      	ble.n	800117a <ServoControl_Update+0xe6>
 8001174:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001178:	60bb      	str	r3, [r7, #8]

    // Update PWM pulse widths
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, throttle_us);
 800117a:	4b0a      	ldr	r3, [pc, #40]	@ (80011a4 <ServoControl_Update+0x110>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	697a      	ldr	r2, [r7, #20]
 8001180:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, rudder_us);
 8001182:	4b08      	ldr	r3, [pc, #32]	@ (80011a4 <ServoControl_Update+0x110>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, elevator_us);
 800118a:	4b07      	ldr	r3, [pc, #28]	@ (80011a8 <ServoControl_Update+0x114>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	68fa      	ldr	r2, [r7, #12]
 8001190:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, aileron_us);
 8001192:	4b05      	ldr	r3, [pc, #20]	@ (80011a8 <ServoControl_Update+0x114>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	68ba      	ldr	r2, [r7, #8]
 8001198:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800119a:	bf00      	nop
 800119c:	3718      	adds	r7, #24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000308 	.word	0x20000308
 80011a8:	20000350 	.word	0x20000350

080011ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	607b      	str	r3, [r7, #4]
 80011b6:	4b10      	ldr	r3, [pc, #64]	@ (80011f8 <HAL_MspInit+0x4c>)
 80011b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ba:	4a0f      	ldr	r2, [pc, #60]	@ (80011f8 <HAL_MspInit+0x4c>)
 80011bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80011c2:	4b0d      	ldr	r3, [pc, #52]	@ (80011f8 <HAL_MspInit+0x4c>)
 80011c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	603b      	str	r3, [r7, #0]
 80011d2:	4b09      	ldr	r3, [pc, #36]	@ (80011f8 <HAL_MspInit+0x4c>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d6:	4a08      	ldr	r2, [pc, #32]	@ (80011f8 <HAL_MspInit+0x4c>)
 80011d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80011de:	4b06      	ldr	r3, [pc, #24]	@ (80011f8 <HAL_MspInit+0x4c>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011e6:	603b      	str	r3, [r7, #0]
 80011e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	40023800 	.word	0x40023800

080011fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001200:	bf00      	nop
 8001202:	e7fd      	b.n	8001200 <NMI_Handler+0x4>

08001204 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001208:	bf00      	nop
 800120a:	e7fd      	b.n	8001208 <HardFault_Handler+0x4>

0800120c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001210:	bf00      	nop
 8001212:	e7fd      	b.n	8001210 <MemManage_Handler+0x4>

08001214 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001218:	bf00      	nop
 800121a:	e7fd      	b.n	8001218 <BusFault_Handler+0x4>

0800121c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001220:	bf00      	nop
 8001222:	e7fd      	b.n	8001220 <UsageFault_Handler+0x4>

08001224 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001252:	f000 fb43 	bl	80018dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001262:	480e      	ldr	r0, [pc, #56]	@ (800129c <USART1_IRQHandler+0x40>)
 8001264:	f002 ff74 	bl	8004150 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE)) {
 8001268:	4b0c      	ldr	r3, [pc, #48]	@ (800129c <USART1_IRQHandler+0x40>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0310 	and.w	r3, r3, #16
 8001272:	2b10      	cmp	r3, #16
 8001274:	d10d      	bne.n	8001292 <USART1_IRQHandler+0x36>
      __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8001276:	2300      	movs	r3, #0
 8001278:	607b      	str	r3, [r7, #4]
 800127a:	4b08      	ldr	r3, [pc, #32]	@ (800129c <USART1_IRQHandler+0x40>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	4b06      	ldr	r3, [pc, #24]	@ (800129c <USART1_IRQHandler+0x40>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	607b      	str	r3, [r7, #4]
 800128a:	687b      	ldr	r3, [r7, #4]
      CrsfSerial_UART_IdleCallback(&hcrsf);
 800128c:	4804      	ldr	r0, [pc, #16]	@ (80012a0 <USART1_IRQHandler+0x44>)
 800128e:	f7ff fcdf 	bl	8000c50 <CrsfSerial_UART_IdleCallback>
  }

  /* USER CODE END USART1_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000398 	.word	0x20000398
 80012a0:	200000f4 	.word	0x200000f4

080012a4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80012a8:	4802      	ldr	r0, [pc, #8]	@ (80012b4 <DMA2_Stream2_IRQHandler+0x10>)
 80012aa:	f001 f853 	bl	8002354 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	200003e0 	.word	0x200003e0

080012b8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80012bc:	4802      	ldr	r0, [pc, #8]	@ (80012c8 <DMA2_Stream7_IRQHandler+0x10>)
 80012be:	f001 f849 	bl	8002354 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000440 	.word	0x20000440

080012cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012d0:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <SystemInit+0x20>)
 80012d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012d6:	4a05      	ldr	r2, [pc, #20]	@ (80012ec <SystemInit+0x20>)
 80012d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08e      	sub	sp, #56	@ 0x38
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001304:	f107 0320 	add.w	r3, r7, #32
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
 800131a:	611a      	str	r2, [r3, #16]
 800131c:	615a      	str	r2, [r3, #20]
 800131e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001320:	4b32      	ldr	r3, [pc, #200]	@ (80013ec <MX_TIM2_Init+0xfc>)
 8001322:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001326:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100 - 1;
 8001328:	4b30      	ldr	r3, [pc, #192]	@ (80013ec <MX_TIM2_Init+0xfc>)
 800132a:	2263      	movs	r2, #99	@ 0x63
 800132c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132e:	4b2f      	ldr	r3, [pc, #188]	@ (80013ec <MX_TIM2_Init+0xfc>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000 - 1;
 8001334:	4b2d      	ldr	r3, [pc, #180]	@ (80013ec <MX_TIM2_Init+0xfc>)
 8001336:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800133a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800133c:	4b2b      	ldr	r3, [pc, #172]	@ (80013ec <MX_TIM2_Init+0xfc>)
 800133e:	2200      	movs	r2, #0
 8001340:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001342:	4b2a      	ldr	r3, [pc, #168]	@ (80013ec <MX_TIM2_Init+0xfc>)
 8001344:	2280      	movs	r2, #128	@ 0x80
 8001346:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001348:	4828      	ldr	r0, [pc, #160]	@ (80013ec <MX_TIM2_Init+0xfc>)
 800134a:	f002 f863 	bl	8003414 <HAL_TIM_Base_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001354:	f7ff fe64 	bl	8001020 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001358:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800135c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800135e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001362:	4619      	mov	r1, r3
 8001364:	4821      	ldr	r0, [pc, #132]	@ (80013ec <MX_TIM2_Init+0xfc>)
 8001366:	f002 fa6f 	bl	8003848 <HAL_TIM_ConfigClockSource>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001370:	f7ff fe56 	bl	8001020 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001374:	481d      	ldr	r0, [pc, #116]	@ (80013ec <MX_TIM2_Init+0xfc>)
 8001376:	f002 f89c 	bl	80034b2 <HAL_TIM_PWM_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001380:	f7ff fe4e 	bl	8001020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001384:	2300      	movs	r3, #0
 8001386:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001388:	2300      	movs	r3, #0
 800138a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800138c:	f107 0320 	add.w	r3, r7, #32
 8001390:	4619      	mov	r1, r3
 8001392:	4816      	ldr	r0, [pc, #88]	@ (80013ec <MX_TIM2_Init+0xfc>)
 8001394:	f002 fdf8 	bl	8003f88 <HAL_TIMEx_MasterConfigSynchronization>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800139e:	f7ff fe3f 	bl	8001020 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013a2:	2360      	movs	r3, #96	@ 0x60
 80013a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	2204      	movs	r2, #4
 80013b6:	4619      	mov	r1, r3
 80013b8:	480c      	ldr	r0, [pc, #48]	@ (80013ec <MX_TIM2_Init+0xfc>)
 80013ba:	f002 f983 	bl	80036c4 <HAL_TIM_PWM_ConfigChannel>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80013c4:	f7ff fe2c 	bl	8001020 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	2208      	movs	r2, #8
 80013cc:	4619      	mov	r1, r3
 80013ce:	4807      	ldr	r0, [pc, #28]	@ (80013ec <MX_TIM2_Init+0xfc>)
 80013d0:	f002 f978 	bl	80036c4 <HAL_TIM_PWM_ConfigChannel>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80013da:	f7ff fe21 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013de:	4803      	ldr	r0, [pc, #12]	@ (80013ec <MX_TIM2_Init+0xfc>)
 80013e0:	f000 f8be 	bl	8001560 <HAL_TIM_MspPostInit>

}
 80013e4:	bf00      	nop
 80013e6:	3738      	adds	r7, #56	@ 0x38
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000308 	.word	0x20000308

080013f0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08e      	sub	sp, #56	@ 0x38
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001404:	f107 0320 	add.w	r3, r7, #32
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800140e:	1d3b      	adds	r3, r7, #4
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]
 800141c:	615a      	str	r2, [r3, #20]
 800141e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001420:	4b32      	ldr	r3, [pc, #200]	@ (80014ec <MX_TIM3_Init+0xfc>)
 8001422:	4a33      	ldr	r2, [pc, #204]	@ (80014f0 <MX_TIM3_Init+0x100>)
 8001424:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100 - 1;
 8001426:	4b31      	ldr	r3, [pc, #196]	@ (80014ec <MX_TIM3_Init+0xfc>)
 8001428:	2263      	movs	r2, #99	@ 0x63
 800142a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800142c:	4b2f      	ldr	r3, [pc, #188]	@ (80014ec <MX_TIM3_Init+0xfc>)
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000 - 1;
 8001432:	4b2e      	ldr	r3, [pc, #184]	@ (80014ec <MX_TIM3_Init+0xfc>)
 8001434:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001438:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800143a:	4b2c      	ldr	r3, [pc, #176]	@ (80014ec <MX_TIM3_Init+0xfc>)
 800143c:	2200      	movs	r2, #0
 800143e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001440:	4b2a      	ldr	r3, [pc, #168]	@ (80014ec <MX_TIM3_Init+0xfc>)
 8001442:	2280      	movs	r2, #128	@ 0x80
 8001444:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001446:	4829      	ldr	r0, [pc, #164]	@ (80014ec <MX_TIM3_Init+0xfc>)
 8001448:	f001 ffe4 	bl	8003414 <HAL_TIM_Base_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001452:	f7ff fde5 	bl	8001020 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001456:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800145a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800145c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001460:	4619      	mov	r1, r3
 8001462:	4822      	ldr	r0, [pc, #136]	@ (80014ec <MX_TIM3_Init+0xfc>)
 8001464:	f002 f9f0 	bl	8003848 <HAL_TIM_ConfigClockSource>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800146e:	f7ff fdd7 	bl	8001020 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001472:	481e      	ldr	r0, [pc, #120]	@ (80014ec <MX_TIM3_Init+0xfc>)
 8001474:	f002 f81d 	bl	80034b2 <HAL_TIM_PWM_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800147e:	f7ff fdcf 	bl	8001020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001482:	2300      	movs	r3, #0
 8001484:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001486:	2300      	movs	r3, #0
 8001488:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800148a:	f107 0320 	add.w	r3, r7, #32
 800148e:	4619      	mov	r1, r3
 8001490:	4816      	ldr	r0, [pc, #88]	@ (80014ec <MX_TIM3_Init+0xfc>)
 8001492:	f002 fd79 	bl	8003f88 <HAL_TIMEx_MasterConfigSynchronization>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800149c:	f7ff fdc0 	bl	8001020 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014a0:	2360      	movs	r3, #96	@ 0x60
 80014a2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014a8:	2300      	movs	r3, #0
 80014aa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014b0:	1d3b      	adds	r3, r7, #4
 80014b2:	2200      	movs	r2, #0
 80014b4:	4619      	mov	r1, r3
 80014b6:	480d      	ldr	r0, [pc, #52]	@ (80014ec <MX_TIM3_Init+0xfc>)
 80014b8:	f002 f904 	bl	80036c4 <HAL_TIM_PWM_ConfigChannel>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80014c2:	f7ff fdad 	bl	8001020 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	2204      	movs	r2, #4
 80014ca:	4619      	mov	r1, r3
 80014cc:	4807      	ldr	r0, [pc, #28]	@ (80014ec <MX_TIM3_Init+0xfc>)
 80014ce:	f002 f8f9 	bl	80036c4 <HAL_TIM_PWM_ConfigChannel>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80014d8:	f7ff fda2 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80014dc:	4803      	ldr	r0, [pc, #12]	@ (80014ec <MX_TIM3_Init+0xfc>)
 80014de:	f000 f83f 	bl	8001560 <HAL_TIM_MspPostInit>

}
 80014e2:	bf00      	nop
 80014e4:	3738      	adds	r7, #56	@ 0x38
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000350 	.word	0x20000350
 80014f0:	40000400 	.word	0x40000400

080014f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001504:	d10e      	bne.n	8001524 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	4b13      	ldr	r3, [pc, #76]	@ (8001558 <HAL_TIM_Base_MspInit+0x64>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150e:	4a12      	ldr	r2, [pc, #72]	@ (8001558 <HAL_TIM_Base_MspInit+0x64>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	6413      	str	r3, [r2, #64]	@ 0x40
 8001516:	4b10      	ldr	r3, [pc, #64]	@ (8001558 <HAL_TIM_Base_MspInit+0x64>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001522:	e012      	b.n	800154a <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM3)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a0c      	ldr	r2, [pc, #48]	@ (800155c <HAL_TIM_Base_MspInit+0x68>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d10d      	bne.n	800154a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	4b09      	ldr	r3, [pc, #36]	@ (8001558 <HAL_TIM_Base_MspInit+0x64>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001536:	4a08      	ldr	r2, [pc, #32]	@ (8001558 <HAL_TIM_Base_MspInit+0x64>)
 8001538:	f043 0302 	orr.w	r3, r3, #2
 800153c:	6413      	str	r3, [r2, #64]	@ 0x40
 800153e:	4b06      	ldr	r3, [pc, #24]	@ (8001558 <HAL_TIM_Base_MspInit+0x64>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
}
 800154a:	bf00      	nop
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	40023800 	.word	0x40023800
 800155c:	40000400 	.word	0x40000400

08001560 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08a      	sub	sp, #40	@ 0x28
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001580:	d11f      	bne.n	80015c2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	613b      	str	r3, [r7, #16]
 8001586:	4b22      	ldr	r3, [pc, #136]	@ (8001610 <HAL_TIM_MspPostInit+0xb0>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158a:	4a21      	ldr	r2, [pc, #132]	@ (8001610 <HAL_TIM_MspPostInit+0xb0>)
 800158c:	f043 0302 	orr.w	r3, r3, #2
 8001590:	6313      	str	r3, [r2, #48]	@ 0x30
 8001592:	4b1f      	ldr	r3, [pc, #124]	@ (8001610 <HAL_TIM_MspPostInit+0xb0>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	613b      	str	r3, [r7, #16]
 800159c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = Rudder_Pin|Throttle_Pin;
 800159e:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 80015a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a4:	2302      	movs	r3, #2
 80015a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ac:	2300      	movs	r3, #0
 80015ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015b0:	2301      	movs	r3, #1
 80015b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b4:	f107 0314 	add.w	r3, r7, #20
 80015b8:	4619      	mov	r1, r3
 80015ba:	4816      	ldr	r0, [pc, #88]	@ (8001614 <HAL_TIM_MspPostInit+0xb4>)
 80015bc:	f001 f934 	bl	8002828 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80015c0:	e022      	b.n	8001608 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM3)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a14      	ldr	r2, [pc, #80]	@ (8001618 <HAL_TIM_MspPostInit+0xb8>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d11d      	bne.n	8001608 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015cc:	2300      	movs	r3, #0
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001610 <HAL_TIM_MspPostInit+0xb0>)
 80015d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d4:	4a0e      	ldr	r2, [pc, #56]	@ (8001610 <HAL_TIM_MspPostInit+0xb0>)
 80015d6:	f043 0302 	orr.w	r3, r3, #2
 80015da:	6313      	str	r3, [r2, #48]	@ 0x30
 80015dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001610 <HAL_TIM_MspPostInit+0xb0>)
 80015de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Elevator_Pin|Aileron_Pin;
 80015e8:	2330      	movs	r3, #48	@ 0x30
 80015ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ec:	2302      	movs	r3, #2
 80015ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f4:	2300      	movs	r3, #0
 80015f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015f8:	2302      	movs	r3, #2
 80015fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	4619      	mov	r1, r3
 8001602:	4804      	ldr	r0, [pc, #16]	@ (8001614 <HAL_TIM_MspPostInit+0xb4>)
 8001604:	f001 f910 	bl	8002828 <HAL_GPIO_Init>
}
 8001608:	bf00      	nop
 800160a:	3728      	adds	r7, #40	@ 0x28
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40023800 	.word	0x40023800
 8001614:	40020400 	.word	0x40020400
 8001618:	40000400 	.word	0x40000400

0800161c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001620:	4b10      	ldr	r3, [pc, #64]	@ (8001664 <MX_USART1_UART_Init+0x48>)
 8001622:	4a11      	ldr	r2, [pc, #68]	@ (8001668 <MX_USART1_UART_Init+0x4c>)
 8001624:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 420000;
 8001626:	4b0f      	ldr	r3, [pc, #60]	@ (8001664 <MX_USART1_UART_Init+0x48>)
 8001628:	4a10      	ldr	r2, [pc, #64]	@ (800166c <MX_USART1_UART_Init+0x50>)
 800162a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800162c:	4b0d      	ldr	r3, [pc, #52]	@ (8001664 <MX_USART1_UART_Init+0x48>)
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001632:	4b0c      	ldr	r3, [pc, #48]	@ (8001664 <MX_USART1_UART_Init+0x48>)
 8001634:	2200      	movs	r2, #0
 8001636:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001638:	4b0a      	ldr	r3, [pc, #40]	@ (8001664 <MX_USART1_UART_Init+0x48>)
 800163a:	2200      	movs	r2, #0
 800163c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800163e:	4b09      	ldr	r3, [pc, #36]	@ (8001664 <MX_USART1_UART_Init+0x48>)
 8001640:	220c      	movs	r2, #12
 8001642:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001644:	4b07      	ldr	r3, [pc, #28]	@ (8001664 <MX_USART1_UART_Init+0x48>)
 8001646:	2200      	movs	r2, #0
 8001648:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800164a:	4b06      	ldr	r3, [pc, #24]	@ (8001664 <MX_USART1_UART_Init+0x48>)
 800164c:	2200      	movs	r2, #0
 800164e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001650:	4804      	ldr	r0, [pc, #16]	@ (8001664 <MX_USART1_UART_Init+0x48>)
 8001652:	f002 fd07 	bl	8004064 <HAL_UART_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 800165c:	f7ff fce0 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000398 	.word	0x20000398
 8001668:	40011000 	.word	0x40011000
 800166c:	000668a0 	.word	0x000668a0

08001670 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08a      	sub	sp, #40	@ 0x28
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a4e      	ldr	r2, [pc, #312]	@ (80017c8 <HAL_UART_MspInit+0x158>)
 800168e:	4293      	cmp	r3, r2
 8001690:	f040 8095 	bne.w	80017be <HAL_UART_MspInit+0x14e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001694:	2300      	movs	r3, #0
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	4b4c      	ldr	r3, [pc, #304]	@ (80017cc <HAL_UART_MspInit+0x15c>)
 800169a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800169c:	4a4b      	ldr	r2, [pc, #300]	@ (80017cc <HAL_UART_MspInit+0x15c>)
 800169e:	f043 0310 	orr.w	r3, r3, #16
 80016a2:	6453      	str	r3, [r2, #68]	@ 0x44
 80016a4:	4b49      	ldr	r3, [pc, #292]	@ (80017cc <HAL_UART_MspInit+0x15c>)
 80016a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a8:	f003 0310 	and.w	r3, r3, #16
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b0:	2300      	movs	r3, #0
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	4b45      	ldr	r3, [pc, #276]	@ (80017cc <HAL_UART_MspInit+0x15c>)
 80016b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b8:	4a44      	ldr	r2, [pc, #272]	@ (80017cc <HAL_UART_MspInit+0x15c>)
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	6313      	str	r3, [r2, #48]	@ 0x30
 80016c0:	4b42      	ldr	r3, [pc, #264]	@ (80017cc <HAL_UART_MspInit+0x15c>)
 80016c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016cc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80016d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d2:	2302      	movs	r3, #2
 80016d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016da:	2303      	movs	r3, #3
 80016dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016de:	2307      	movs	r3, #7
 80016e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e2:	f107 0314 	add.w	r3, r7, #20
 80016e6:	4619      	mov	r1, r3
 80016e8:	4839      	ldr	r0, [pc, #228]	@ (80017d0 <HAL_UART_MspInit+0x160>)
 80016ea:	f001 f89d 	bl	8002828 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80016ee:	4b39      	ldr	r3, [pc, #228]	@ (80017d4 <HAL_UART_MspInit+0x164>)
 80016f0:	4a39      	ldr	r2, [pc, #228]	@ (80017d8 <HAL_UART_MspInit+0x168>)
 80016f2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80016f4:	4b37      	ldr	r3, [pc, #220]	@ (80017d4 <HAL_UART_MspInit+0x164>)
 80016f6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80016fa:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016fc:	4b35      	ldr	r3, [pc, #212]	@ (80017d4 <HAL_UART_MspInit+0x164>)
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001702:	4b34      	ldr	r3, [pc, #208]	@ (80017d4 <HAL_UART_MspInit+0x164>)
 8001704:	2200      	movs	r2, #0
 8001706:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001708:	4b32      	ldr	r3, [pc, #200]	@ (80017d4 <HAL_UART_MspInit+0x164>)
 800170a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800170e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001710:	4b30      	ldr	r3, [pc, #192]	@ (80017d4 <HAL_UART_MspInit+0x164>)
 8001712:	2200      	movs	r2, #0
 8001714:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001716:	4b2f      	ldr	r3, [pc, #188]	@ (80017d4 <HAL_UART_MspInit+0x164>)
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800171c:	4b2d      	ldr	r3, [pc, #180]	@ (80017d4 <HAL_UART_MspInit+0x164>)
 800171e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001722:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001724:	4b2b      	ldr	r3, [pc, #172]	@ (80017d4 <HAL_UART_MspInit+0x164>)
 8001726:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800172a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800172c:	4b29      	ldr	r3, [pc, #164]	@ (80017d4 <HAL_UART_MspInit+0x164>)
 800172e:	2200      	movs	r2, #0
 8001730:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001732:	4828      	ldr	r0, [pc, #160]	@ (80017d4 <HAL_UART_MspInit+0x164>)
 8001734:	f000 fc76 	bl	8002024 <HAL_DMA_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 800173e:	f7ff fc6f 	bl	8001020 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a23      	ldr	r2, [pc, #140]	@ (80017d4 <HAL_UART_MspInit+0x164>)
 8001746:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001748:	4a22      	ldr	r2, [pc, #136]	@ (80017d4 <HAL_UART_MspInit+0x164>)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800174e:	4b23      	ldr	r3, [pc, #140]	@ (80017dc <HAL_UART_MspInit+0x16c>)
 8001750:	4a23      	ldr	r2, [pc, #140]	@ (80017e0 <HAL_UART_MspInit+0x170>)
 8001752:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001754:	4b21      	ldr	r3, [pc, #132]	@ (80017dc <HAL_UART_MspInit+0x16c>)
 8001756:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800175a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800175c:	4b1f      	ldr	r3, [pc, #124]	@ (80017dc <HAL_UART_MspInit+0x16c>)
 800175e:	2240      	movs	r2, #64	@ 0x40
 8001760:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001762:	4b1e      	ldr	r3, [pc, #120]	@ (80017dc <HAL_UART_MspInit+0x16c>)
 8001764:	2200      	movs	r2, #0
 8001766:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001768:	4b1c      	ldr	r3, [pc, #112]	@ (80017dc <HAL_UART_MspInit+0x16c>)
 800176a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800176e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001770:	4b1a      	ldr	r3, [pc, #104]	@ (80017dc <HAL_UART_MspInit+0x16c>)
 8001772:	2200      	movs	r2, #0
 8001774:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001776:	4b19      	ldr	r3, [pc, #100]	@ (80017dc <HAL_UART_MspInit+0x16c>)
 8001778:	2200      	movs	r2, #0
 800177a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 800177c:	4b17      	ldr	r3, [pc, #92]	@ (80017dc <HAL_UART_MspInit+0x16c>)
 800177e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001782:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001784:	4b15      	ldr	r3, [pc, #84]	@ (80017dc <HAL_UART_MspInit+0x16c>)
 8001786:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800178a:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800178c:	4b13      	ldr	r3, [pc, #76]	@ (80017dc <HAL_UART_MspInit+0x16c>)
 800178e:	2200      	movs	r2, #0
 8001790:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001792:	4812      	ldr	r0, [pc, #72]	@ (80017dc <HAL_UART_MspInit+0x16c>)
 8001794:	f000 fc46 	bl	8002024 <HAL_DMA_Init>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <HAL_UART_MspInit+0x132>
    {
      Error_Handler();
 800179e:	f7ff fc3f 	bl	8001020 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a0d      	ldr	r2, [pc, #52]	@ (80017dc <HAL_UART_MspInit+0x16c>)
 80017a6:	639a      	str	r2, [r3, #56]	@ 0x38
 80017a8:	4a0c      	ldr	r2, [pc, #48]	@ (80017dc <HAL_UART_MspInit+0x16c>)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80017ae:	2200      	movs	r2, #0
 80017b0:	2100      	movs	r1, #0
 80017b2:	2025      	movs	r0, #37	@ 0x25
 80017b4:	f000 fbff 	bl	8001fb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017b8:	2025      	movs	r0, #37	@ 0x25
 80017ba:	f000 fc18 	bl	8001fee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80017be:	bf00      	nop
 80017c0:	3728      	adds	r7, #40	@ 0x28
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40011000 	.word	0x40011000
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40020000 	.word	0x40020000
 80017d4:	200003e0 	.word	0x200003e0
 80017d8:	40026440 	.word	0x40026440
 80017dc:	20000440 	.word	0x20000440
 80017e0:	400264b8 	.word	0x400264b8

080017e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800181c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017e8:	f7ff fd70 	bl	80012cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017ec:	480c      	ldr	r0, [pc, #48]	@ (8001820 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017ee:	490d      	ldr	r1, [pc, #52]	@ (8001824 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001828 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f4:	e002      	b.n	80017fc <LoopCopyDataInit>

080017f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017fa:	3304      	adds	r3, #4

080017fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001800:	d3f9      	bcc.n	80017f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001802:	4a0a      	ldr	r2, [pc, #40]	@ (800182c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001804:	4c0a      	ldr	r4, [pc, #40]	@ (8001830 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001808:	e001      	b.n	800180e <LoopFillZerobss>

0800180a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800180a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800180c:	3204      	adds	r2, #4

0800180e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800180e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001810:	d3fb      	bcc.n	800180a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001812:	f003 fd57 	bl	80052c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001816:	f7ff fb3f 	bl	8000e98 <main>
  bx  lr    
 800181a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800181c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001820:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001824:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001828:	08005370 	.word	0x08005370
  ldr r2, =_sbss
 800182c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001830:	200004a4 	.word	0x200004a4

08001834 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001834:	e7fe      	b.n	8001834 <ADC_IRQHandler>
	...

08001838 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800183c:	4b0e      	ldr	r3, [pc, #56]	@ (8001878 <HAL_Init+0x40>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a0d      	ldr	r2, [pc, #52]	@ (8001878 <HAL_Init+0x40>)
 8001842:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001846:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001848:	4b0b      	ldr	r3, [pc, #44]	@ (8001878 <HAL_Init+0x40>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a0a      	ldr	r2, [pc, #40]	@ (8001878 <HAL_Init+0x40>)
 800184e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001852:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001854:	4b08      	ldr	r3, [pc, #32]	@ (8001878 <HAL_Init+0x40>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a07      	ldr	r2, [pc, #28]	@ (8001878 <HAL_Init+0x40>)
 800185a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800185e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001860:	2003      	movs	r0, #3
 8001862:	f000 fb9d 	bl	8001fa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001866:	200f      	movs	r0, #15
 8001868:	f000 f808 	bl	800187c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800186c:	f7ff fc9e 	bl	80011ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40023c00 	.word	0x40023c00

0800187c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001884:	4b12      	ldr	r3, [pc, #72]	@ (80018d0 <HAL_InitTick+0x54>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4b12      	ldr	r3, [pc, #72]	@ (80018d4 <HAL_InitTick+0x58>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	4619      	mov	r1, r3
 800188e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001892:	fbb3 f3f1 	udiv	r3, r3, r1
 8001896:	fbb2 f3f3 	udiv	r3, r2, r3
 800189a:	4618      	mov	r0, r3
 800189c:	f000 fbb5 	bl	800200a <HAL_SYSTICK_Config>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e00e      	b.n	80018c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b0f      	cmp	r3, #15
 80018ae:	d80a      	bhi.n	80018c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018b0:	2200      	movs	r2, #0
 80018b2:	6879      	ldr	r1, [r7, #4]
 80018b4:	f04f 30ff 	mov.w	r0, #4294967295
 80018b8:	f000 fb7d 	bl	8001fb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018bc:	4a06      	ldr	r2, [pc, #24]	@ (80018d8 <HAL_InitTick+0x5c>)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018c2:	2300      	movs	r3, #0
 80018c4:	e000      	b.n	80018c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20000000 	.word	0x20000000
 80018d4:	20000008 	.word	0x20000008
 80018d8:	20000004 	.word	0x20000004

080018dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018e0:	4b06      	ldr	r3, [pc, #24]	@ (80018fc <HAL_IncTick+0x20>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	461a      	mov	r2, r3
 80018e6:	4b06      	ldr	r3, [pc, #24]	@ (8001900 <HAL_IncTick+0x24>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4413      	add	r3, r2
 80018ec:	4a04      	ldr	r2, [pc, #16]	@ (8001900 <HAL_IncTick+0x24>)
 80018ee:	6013      	str	r3, [r2, #0]
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	20000008 	.word	0x20000008
 8001900:	200004a0 	.word	0x200004a0

08001904 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  return uwTick;
 8001908:	4b03      	ldr	r3, [pc, #12]	@ (8001918 <HAL_GetTick+0x14>)
 800190a:	681b      	ldr	r3, [r3, #0]
}
 800190c:	4618      	mov	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	200004a0 	.word	0x200004a0

0800191c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001924:	2300      	movs	r3, #0
 8001926:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e033      	b.n	800199a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001936:	2b00      	cmp	r3, #0
 8001938:	d109      	bne.n	800194e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7fe fe34 	bl	80005a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001952:	f003 0310 	and.w	r3, r3, #16
 8001956:	2b00      	cmp	r3, #0
 8001958:	d118      	bne.n	800198c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001962:	f023 0302 	bic.w	r3, r3, #2
 8001966:	f043 0202 	orr.w	r2, r3, #2
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 f94a 	bl	8001c08 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197e:	f023 0303 	bic.w	r3, r3, #3
 8001982:	f043 0201 	orr.w	r2, r3, #1
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	641a      	str	r2, [r3, #64]	@ 0x40
 800198a:	e001      	b.n	8001990 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001998:	7bfb      	ldrb	r3, [r7, #15]
}
 800199a:	4618      	mov	r0, r3
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
	...

080019a4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80019ae:	2300      	movs	r3, #0
 80019b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d101      	bne.n	80019c0 <HAL_ADC_ConfigChannel+0x1c>
 80019bc:	2302      	movs	r3, #2
 80019be:	e113      	b.n	8001be8 <HAL_ADC_ConfigChannel+0x244>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2201      	movs	r2, #1
 80019c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b09      	cmp	r3, #9
 80019ce:	d925      	bls.n	8001a1c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	68d9      	ldr	r1, [r3, #12]
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	b29b      	uxth	r3, r3
 80019dc:	461a      	mov	r2, r3
 80019de:	4613      	mov	r3, r2
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	4413      	add	r3, r2
 80019e4:	3b1e      	subs	r3, #30
 80019e6:	2207      	movs	r2, #7
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	43da      	mvns	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	400a      	ands	r2, r1
 80019f4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	68d9      	ldr	r1, [r3, #12]
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	4618      	mov	r0, r3
 8001a08:	4603      	mov	r3, r0
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	4403      	add	r3, r0
 8001a0e:	3b1e      	subs	r3, #30
 8001a10:	409a      	lsls	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	430a      	orrs	r2, r1
 8001a18:	60da      	str	r2, [r3, #12]
 8001a1a:	e022      	b.n	8001a62 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	6919      	ldr	r1, [r3, #16]
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	461a      	mov	r2, r3
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	4413      	add	r3, r2
 8001a30:	2207      	movs	r2, #7
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	43da      	mvns	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	400a      	ands	r2, r1
 8001a3e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6919      	ldr	r1, [r3, #16]
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	689a      	ldr	r2, [r3, #8]
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	4618      	mov	r0, r3
 8001a52:	4603      	mov	r3, r0
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	4403      	add	r3, r0
 8001a58:	409a      	lsls	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	2b06      	cmp	r3, #6
 8001a68:	d824      	bhi.n	8001ab4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685a      	ldr	r2, [r3, #4]
 8001a74:	4613      	mov	r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4413      	add	r3, r2
 8001a7a:	3b05      	subs	r3, #5
 8001a7c:	221f      	movs	r2, #31
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43da      	mvns	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	400a      	ands	r2, r1
 8001a8a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	4618      	mov	r0, r3
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	4413      	add	r3, r2
 8001aa4:	3b05      	subs	r3, #5
 8001aa6:	fa00 f203 	lsl.w	r2, r0, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ab2:	e04c      	b.n	8001b4e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2b0c      	cmp	r3, #12
 8001aba:	d824      	bhi.n	8001b06 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685a      	ldr	r2, [r3, #4]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4413      	add	r3, r2
 8001acc:	3b23      	subs	r3, #35	@ 0x23
 8001ace:	221f      	movs	r2, #31
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	43da      	mvns	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	400a      	ands	r2, r1
 8001adc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	4618      	mov	r0, r3
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	4613      	mov	r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	4413      	add	r3, r2
 8001af6:	3b23      	subs	r3, #35	@ 0x23
 8001af8:	fa00 f203 	lsl.w	r2, r0, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	430a      	orrs	r2, r1
 8001b02:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b04:	e023      	b.n	8001b4e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685a      	ldr	r2, [r3, #4]
 8001b10:	4613      	mov	r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	4413      	add	r3, r2
 8001b16:	3b41      	subs	r3, #65	@ 0x41
 8001b18:	221f      	movs	r2, #31
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	43da      	mvns	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	400a      	ands	r2, r1
 8001b26:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	4618      	mov	r0, r3
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685a      	ldr	r2, [r3, #4]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	4413      	add	r3, r2
 8001b40:	3b41      	subs	r3, #65	@ 0x41
 8001b42:	fa00 f203 	lsl.w	r2, r0, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b4e:	4b29      	ldr	r3, [pc, #164]	@ (8001bf4 <HAL_ADC_ConfigChannel+0x250>)
 8001b50:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a28      	ldr	r2, [pc, #160]	@ (8001bf8 <HAL_ADC_ConfigChannel+0x254>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d10f      	bne.n	8001b7c <HAL_ADC_ConfigChannel+0x1d8>
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b12      	cmp	r3, #18
 8001b62:	d10b      	bne.n	8001b7c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a1d      	ldr	r2, [pc, #116]	@ (8001bf8 <HAL_ADC_ConfigChannel+0x254>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d12b      	bne.n	8001bde <HAL_ADC_ConfigChannel+0x23a>
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a1c      	ldr	r2, [pc, #112]	@ (8001bfc <HAL_ADC_ConfigChannel+0x258>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d003      	beq.n	8001b98 <HAL_ADC_ConfigChannel+0x1f4>
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2b11      	cmp	r3, #17
 8001b96:	d122      	bne.n	8001bde <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a11      	ldr	r2, [pc, #68]	@ (8001bfc <HAL_ADC_ConfigChannel+0x258>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d111      	bne.n	8001bde <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bba:	4b11      	ldr	r3, [pc, #68]	@ (8001c00 <HAL_ADC_ConfigChannel+0x25c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a11      	ldr	r2, [pc, #68]	@ (8001c04 <HAL_ADC_ConfigChannel+0x260>)
 8001bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc4:	0c9a      	lsrs	r2, r3, #18
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001bd0:	e002      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1f9      	bne.n	8001bd2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	40012300 	.word	0x40012300
 8001bf8:	40012000 	.word	0x40012000
 8001bfc:	10000012 	.word	0x10000012
 8001c00:	20000000 	.word	0x20000000
 8001c04:	431bde83 	.word	0x431bde83

08001c08 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c10:	4b79      	ldr	r3, [pc, #484]	@ (8001df8 <ADC_Init+0x1f0>)
 8001c12:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	685a      	ldr	r2, [r3, #4]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6859      	ldr	r1, [r3, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	021a      	lsls	r2, r3, #8
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001c60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	6859      	ldr	r1, [r3, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689a      	ldr	r2, [r3, #8]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	430a      	orrs	r2, r1
 8001c72:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	689a      	ldr	r2, [r3, #8]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6899      	ldr	r1, [r3, #8]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68da      	ldr	r2, [r3, #12]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c9a:	4a58      	ldr	r2, [pc, #352]	@ (8001dfc <ADC_Init+0x1f4>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d022      	beq.n	8001ce6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	689a      	ldr	r2, [r3, #8]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001cae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6899      	ldr	r1, [r3, #8]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001cd0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6899      	ldr	r1, [r3, #8]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	e00f      	b.n	8001d06 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	689a      	ldr	r2, [r3, #8]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001cf4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	689a      	ldr	r2, [r3, #8]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001d04:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f022 0202 	bic.w	r2, r2, #2
 8001d14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	6899      	ldr	r1, [r3, #8]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	7e1b      	ldrb	r3, [r3, #24]
 8001d20:	005a      	lsls	r2, r3, #1
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	430a      	orrs	r2, r1
 8001d28:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d01b      	beq.n	8001d6c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	685a      	ldr	r2, [r3, #4]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d42:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	685a      	ldr	r2, [r3, #4]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001d52:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6859      	ldr	r1, [r3, #4]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	035a      	lsls	r2, r3, #13
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	430a      	orrs	r2, r1
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	e007      	b.n	8001d7c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	685a      	ldr	r2, [r3, #4]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d7a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001d8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	3b01      	subs	r3, #1
 8001d98:	051a      	lsls	r2, r3, #20
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001db0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	6899      	ldr	r1, [r3, #8]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001dbe:	025a      	lsls	r2, r3, #9
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	689a      	ldr	r2, [r3, #8]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001dd6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6899      	ldr	r1, [r3, #8]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	029a      	lsls	r2, r3, #10
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	430a      	orrs	r2, r1
 8001dea:	609a      	str	r2, [r3, #8]
}
 8001dec:	bf00      	nop
 8001dee:	3714      	adds	r7, #20
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	40012300 	.word	0x40012300
 8001dfc:	0f000001 	.word	0x0f000001

08001e00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e10:	4b0c      	ldr	r3, [pc, #48]	@ (8001e44 <__NVIC_SetPriorityGrouping+0x44>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e16:	68ba      	ldr	r2, [r7, #8]
 8001e18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e32:	4a04      	ldr	r2, [pc, #16]	@ (8001e44 <__NVIC_SetPriorityGrouping+0x44>)
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	60d3      	str	r3, [r2, #12]
}
 8001e38:	bf00      	nop
 8001e3a:	3714      	adds	r7, #20
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	e000ed00 	.word	0xe000ed00

08001e48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e4c:	4b04      	ldr	r3, [pc, #16]	@ (8001e60 <__NVIC_GetPriorityGrouping+0x18>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	0a1b      	lsrs	r3, r3, #8
 8001e52:	f003 0307 	and.w	r3, r3, #7
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr
 8001e60:	e000ed00 	.word	0xe000ed00

08001e64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	db0b      	blt.n	8001e8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e76:	79fb      	ldrb	r3, [r7, #7]
 8001e78:	f003 021f 	and.w	r2, r3, #31
 8001e7c:	4907      	ldr	r1, [pc, #28]	@ (8001e9c <__NVIC_EnableIRQ+0x38>)
 8001e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e82:	095b      	lsrs	r3, r3, #5
 8001e84:	2001      	movs	r0, #1
 8001e86:	fa00 f202 	lsl.w	r2, r0, r2
 8001e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	e000e100 	.word	0xe000e100

08001ea0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	6039      	str	r1, [r7, #0]
 8001eaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	db0a      	blt.n	8001eca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	b2da      	uxtb	r2, r3
 8001eb8:	490c      	ldr	r1, [pc, #48]	@ (8001eec <__NVIC_SetPriority+0x4c>)
 8001eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebe:	0112      	lsls	r2, r2, #4
 8001ec0:	b2d2      	uxtb	r2, r2
 8001ec2:	440b      	add	r3, r1
 8001ec4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ec8:	e00a      	b.n	8001ee0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	4908      	ldr	r1, [pc, #32]	@ (8001ef0 <__NVIC_SetPriority+0x50>)
 8001ed0:	79fb      	ldrb	r3, [r7, #7]
 8001ed2:	f003 030f 	and.w	r3, r3, #15
 8001ed6:	3b04      	subs	r3, #4
 8001ed8:	0112      	lsls	r2, r2, #4
 8001eda:	b2d2      	uxtb	r2, r2
 8001edc:	440b      	add	r3, r1
 8001ede:	761a      	strb	r2, [r3, #24]
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	e000e100 	.word	0xe000e100
 8001ef0:	e000ed00 	.word	0xe000ed00

08001ef4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b089      	sub	sp, #36	@ 0x24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	f1c3 0307 	rsb	r3, r3, #7
 8001f0e:	2b04      	cmp	r3, #4
 8001f10:	bf28      	it	cs
 8001f12:	2304      	movcs	r3, #4
 8001f14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	3304      	adds	r3, #4
 8001f1a:	2b06      	cmp	r3, #6
 8001f1c:	d902      	bls.n	8001f24 <NVIC_EncodePriority+0x30>
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	3b03      	subs	r3, #3
 8001f22:	e000      	b.n	8001f26 <NVIC_EncodePriority+0x32>
 8001f24:	2300      	movs	r3, #0
 8001f26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f28:	f04f 32ff 	mov.w	r2, #4294967295
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	43da      	mvns	r2, r3
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	401a      	ands	r2, r3
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	fa01 f303 	lsl.w	r3, r1, r3
 8001f46:	43d9      	mvns	r1, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f4c:	4313      	orrs	r3, r2
         );
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3724      	adds	r7, #36	@ 0x24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
	...

08001f5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3b01      	subs	r3, #1
 8001f68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f6c:	d301      	bcc.n	8001f72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e00f      	b.n	8001f92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f72:	4a0a      	ldr	r2, [pc, #40]	@ (8001f9c <SysTick_Config+0x40>)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f7a:	210f      	movs	r1, #15
 8001f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f80:	f7ff ff8e 	bl	8001ea0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f84:	4b05      	ldr	r3, [pc, #20]	@ (8001f9c <SysTick_Config+0x40>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f8a:	4b04      	ldr	r3, [pc, #16]	@ (8001f9c <SysTick_Config+0x40>)
 8001f8c:	2207      	movs	r2, #7
 8001f8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	e000e010 	.word	0xe000e010

08001fa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f7ff ff29 	bl	8001e00 <__NVIC_SetPriorityGrouping>
}
 8001fae:	bf00      	nop
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b086      	sub	sp, #24
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	60b9      	str	r1, [r7, #8]
 8001fc0:	607a      	str	r2, [r7, #4]
 8001fc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fc8:	f7ff ff3e 	bl	8001e48 <__NVIC_GetPriorityGrouping>
 8001fcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	68b9      	ldr	r1, [r7, #8]
 8001fd2:	6978      	ldr	r0, [r7, #20]
 8001fd4:	f7ff ff8e 	bl	8001ef4 <NVIC_EncodePriority>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fde:	4611      	mov	r1, r2
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff ff5d 	bl	8001ea0 <__NVIC_SetPriority>
}
 8001fe6:	bf00      	nop
 8001fe8:	3718      	adds	r7, #24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b082      	sub	sp, #8
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff ff31 	bl	8001e64 <__NVIC_EnableIRQ>
}
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b082      	sub	sp, #8
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7ff ffa2 	bl	8001f5c <SysTick_Config>
 8002018:	4603      	mov	r3, r0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
	...

08002024 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002030:	f7ff fc68 	bl	8001904 <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d101      	bne.n	8002040 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e099      	b.n	8002174 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2202      	movs	r2, #2
 8002044:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 0201 	bic.w	r2, r2, #1
 800205e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002060:	e00f      	b.n	8002082 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002062:	f7ff fc4f 	bl	8001904 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b05      	cmp	r3, #5
 800206e:	d908      	bls.n	8002082 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2220      	movs	r2, #32
 8002074:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2203      	movs	r2, #3
 800207a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e078      	b.n	8002174 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1e8      	bne.n	8002062 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	4b38      	ldr	r3, [pc, #224]	@ (800217c <HAL_DMA_Init+0x158>)
 800209c:	4013      	ands	r3, r2
 800209e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685a      	ldr	r2, [r3, #4]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a1b      	ldr	r3, [r3, #32]
 80020cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d8:	2b04      	cmp	r3, #4
 80020da:	d107      	bne.n	80020ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e4:	4313      	orrs	r3, r2
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	697a      	ldr	r2, [r7, #20]
 80020f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	f023 0307 	bic.w	r3, r3, #7
 8002102:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002108:	697a      	ldr	r2, [r7, #20]
 800210a:	4313      	orrs	r3, r2
 800210c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002112:	2b04      	cmp	r3, #4
 8002114:	d117      	bne.n	8002146 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	4313      	orrs	r3, r2
 800211e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00e      	beq.n	8002146 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f000 fb01 	bl	8002730 <DMA_CheckFifoParam>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d008      	beq.n	8002146 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2240      	movs	r2, #64	@ 0x40
 8002138:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2201      	movs	r2, #1
 800213e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002142:	2301      	movs	r3, #1
 8002144:	e016      	b.n	8002174 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 fab8 	bl	80026c4 <DMA_CalcBaseAndBitshift>
 8002154:	4603      	mov	r3, r0
 8002156:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800215c:	223f      	movs	r2, #63	@ 0x3f
 800215e:	409a      	lsls	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	f010803f 	.word	0xf010803f

08002180 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
 800218c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800218e:	2300      	movs	r3, #0
 8002190:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002196:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d101      	bne.n	80021a6 <HAL_DMA_Start_IT+0x26>
 80021a2:	2302      	movs	r3, #2
 80021a4:	e040      	b.n	8002228 <HAL_DMA_Start_IT+0xa8>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d12f      	bne.n	800221a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2202      	movs	r2, #2
 80021be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2200      	movs	r2, #0
 80021c6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	68b9      	ldr	r1, [r7, #8]
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f000 fa4a 	bl	8002668 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021d8:	223f      	movs	r2, #63	@ 0x3f
 80021da:	409a      	lsls	r2, r3
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f042 0216 	orr.w	r2, r2, #22
 80021ee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d007      	beq.n	8002208 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f042 0208 	orr.w	r2, r2, #8
 8002206:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f042 0201 	orr.w	r2, r2, #1
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	e005      	b.n	8002226 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002222:	2302      	movs	r3, #2
 8002224:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002226:	7dfb      	ldrb	r3, [r7, #23]
}
 8002228:	4618      	mov	r0, r3
 800222a:	3718      	adds	r7, #24
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800223c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800223e:	f7ff fb61 	bl	8001904 <HAL_GetTick>
 8002242:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800224a:	b2db      	uxtb	r3, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d008      	beq.n	8002262 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2280      	movs	r2, #128	@ 0x80
 8002254:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e052      	b.n	8002308 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 0216 	bic.w	r2, r2, #22
 8002270:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	695a      	ldr	r2, [r3, #20]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002280:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002286:	2b00      	cmp	r3, #0
 8002288:	d103      	bne.n	8002292 <HAL_DMA_Abort+0x62>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800228e:	2b00      	cmp	r3, #0
 8002290:	d007      	beq.n	80022a2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 0208 	bic.w	r2, r2, #8
 80022a0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f022 0201 	bic.w	r2, r2, #1
 80022b0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022b2:	e013      	b.n	80022dc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022b4:	f7ff fb26 	bl	8001904 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b05      	cmp	r3, #5
 80022c0:	d90c      	bls.n	80022dc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2220      	movs	r2, #32
 80022c6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2203      	movs	r2, #3
 80022cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e015      	b.n	8002308 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1e4      	bne.n	80022b4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ee:	223f      	movs	r2, #63	@ 0x3f
 80022f0:	409a      	lsls	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800231e:	b2db      	uxtb	r3, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d004      	beq.n	800232e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2280      	movs	r2, #128	@ 0x80
 8002328:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e00c      	b.n	8002348 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2205      	movs	r2, #5
 8002332:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 0201 	bic.w	r2, r2, #1
 8002344:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800235c:	2300      	movs	r3, #0
 800235e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002360:	4b8e      	ldr	r3, [pc, #568]	@ (800259c <HAL_DMA_IRQHandler+0x248>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a8e      	ldr	r2, [pc, #568]	@ (80025a0 <HAL_DMA_IRQHandler+0x24c>)
 8002366:	fba2 2303 	umull	r2, r3, r2, r3
 800236a:	0a9b      	lsrs	r3, r3, #10
 800236c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002372:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800237e:	2208      	movs	r2, #8
 8002380:	409a      	lsls	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	4013      	ands	r3, r2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d01a      	beq.n	80023c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0304 	and.w	r3, r3, #4
 8002394:	2b00      	cmp	r3, #0
 8002396:	d013      	beq.n	80023c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 0204 	bic.w	r2, r2, #4
 80023a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ac:	2208      	movs	r2, #8
 80023ae:	409a      	lsls	r2, r3
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023b8:	f043 0201 	orr.w	r2, r3, #1
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023c4:	2201      	movs	r2, #1
 80023c6:	409a      	lsls	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	4013      	ands	r3, r2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d012      	beq.n	80023f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00b      	beq.n	80023f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023e2:	2201      	movs	r2, #1
 80023e4:	409a      	lsls	r2, r3
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ee:	f043 0202 	orr.w	r2, r3, #2
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023fa:	2204      	movs	r2, #4
 80023fc:	409a      	lsls	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	4013      	ands	r3, r2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d012      	beq.n	800242c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00b      	beq.n	800242c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002418:	2204      	movs	r2, #4
 800241a:	409a      	lsls	r2, r3
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002424:	f043 0204 	orr.w	r2, r3, #4
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002430:	2210      	movs	r2, #16
 8002432:	409a      	lsls	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	4013      	ands	r3, r2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d043      	beq.n	80024c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0308 	and.w	r3, r3, #8
 8002446:	2b00      	cmp	r3, #0
 8002448:	d03c      	beq.n	80024c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800244e:	2210      	movs	r2, #16
 8002450:	409a      	lsls	r2, r3
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d018      	beq.n	8002496 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d108      	bne.n	8002484 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002476:	2b00      	cmp	r3, #0
 8002478:	d024      	beq.n	80024c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	4798      	blx	r3
 8002482:	e01f      	b.n	80024c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002488:	2b00      	cmp	r3, #0
 800248a:	d01b      	beq.n	80024c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	4798      	blx	r3
 8002494:	e016      	b.n	80024c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d107      	bne.n	80024b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0208 	bic.w	r2, r2, #8
 80024b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d003      	beq.n	80024c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024c8:	2220      	movs	r2, #32
 80024ca:	409a      	lsls	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	4013      	ands	r3, r2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 808f 	beq.w	80025f4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0310 	and.w	r3, r3, #16
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f000 8087 	beq.w	80025f4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ea:	2220      	movs	r2, #32
 80024ec:	409a      	lsls	r2, r3
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b05      	cmp	r3, #5
 80024fc:	d136      	bne.n	800256c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f022 0216 	bic.w	r2, r2, #22
 800250c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	695a      	ldr	r2, [r3, #20]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800251c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002522:	2b00      	cmp	r3, #0
 8002524:	d103      	bne.n	800252e <HAL_DMA_IRQHandler+0x1da>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800252a:	2b00      	cmp	r3, #0
 800252c:	d007      	beq.n	800253e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 0208 	bic.w	r2, r2, #8
 800253c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002542:	223f      	movs	r2, #63	@ 0x3f
 8002544:	409a      	lsls	r2, r3
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800255e:	2b00      	cmp	r3, #0
 8002560:	d07e      	beq.n	8002660 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	4798      	blx	r3
        }
        return;
 800256a:	e079      	b.n	8002660 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d01d      	beq.n	80025b6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10d      	bne.n	80025a4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800258c:	2b00      	cmp	r3, #0
 800258e:	d031      	beq.n	80025f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	4798      	blx	r3
 8002598:	e02c      	b.n	80025f4 <HAL_DMA_IRQHandler+0x2a0>
 800259a:	bf00      	nop
 800259c:	20000000 	.word	0x20000000
 80025a0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d023      	beq.n	80025f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	4798      	blx	r3
 80025b4:	e01e      	b.n	80025f4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d10f      	bne.n	80025e4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f022 0210 	bic.w	r2, r2, #16
 80025d2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d003      	beq.n	80025f4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d032      	beq.n	8002662 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	2b00      	cmp	r3, #0
 8002606:	d022      	beq.n	800264e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2205      	movs	r2, #5
 800260c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f022 0201 	bic.w	r2, r2, #1
 800261e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	3301      	adds	r3, #1
 8002624:	60bb      	str	r3, [r7, #8]
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	429a      	cmp	r2, r3
 800262a:	d307      	bcc.n	800263c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1f2      	bne.n	8002620 <HAL_DMA_IRQHandler+0x2cc>
 800263a:	e000      	b.n	800263e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800263c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2201      	movs	r2, #1
 8002642:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002652:	2b00      	cmp	r3, #0
 8002654:	d005      	beq.n	8002662 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	4798      	blx	r3
 800265e:	e000      	b.n	8002662 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002660:	bf00      	nop
    }
  }
}
 8002662:	3718      	adds	r7, #24
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
 8002674:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002684:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	2b40      	cmp	r3, #64	@ 0x40
 8002694:	d108      	bne.n	80026a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68ba      	ldr	r2, [r7, #8]
 80026a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80026a6:	e007      	b.n	80026b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68ba      	ldr	r2, [r7, #8]
 80026ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	60da      	str	r2, [r3, #12]
}
 80026b8:	bf00      	nop
 80026ba:	3714      	adds	r7, #20
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	3b10      	subs	r3, #16
 80026d4:	4a14      	ldr	r2, [pc, #80]	@ (8002728 <DMA_CalcBaseAndBitshift+0x64>)
 80026d6:	fba2 2303 	umull	r2, r3, r2, r3
 80026da:	091b      	lsrs	r3, r3, #4
 80026dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026de:	4a13      	ldr	r2, [pc, #76]	@ (800272c <DMA_CalcBaseAndBitshift+0x68>)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	4413      	add	r3, r2
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	461a      	mov	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2b03      	cmp	r3, #3
 80026f0:	d909      	bls.n	8002706 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80026fa:	f023 0303 	bic.w	r3, r3, #3
 80026fe:	1d1a      	adds	r2, r3, #4
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	659a      	str	r2, [r3, #88]	@ 0x58
 8002704:	e007      	b.n	8002716 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800270e:	f023 0303 	bic.w	r3, r3, #3
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800271a:	4618      	mov	r0, r3
 800271c:	3714      	adds	r7, #20
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	aaaaaaab 	.word	0xaaaaaaab
 800272c:	08005358 	.word	0x08005358

08002730 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002738:	2300      	movs	r3, #0
 800273a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002740:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d11f      	bne.n	800278a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	2b03      	cmp	r3, #3
 800274e:	d856      	bhi.n	80027fe <DMA_CheckFifoParam+0xce>
 8002750:	a201      	add	r2, pc, #4	@ (adr r2, 8002758 <DMA_CheckFifoParam+0x28>)
 8002752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002756:	bf00      	nop
 8002758:	08002769 	.word	0x08002769
 800275c:	0800277b 	.word	0x0800277b
 8002760:	08002769 	.word	0x08002769
 8002764:	080027ff 	.word	0x080027ff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800276c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d046      	beq.n	8002802 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002778:	e043      	b.n	8002802 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800277e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002782:	d140      	bne.n	8002806 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002788:	e03d      	b.n	8002806 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002792:	d121      	bne.n	80027d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	2b03      	cmp	r3, #3
 8002798:	d837      	bhi.n	800280a <DMA_CheckFifoParam+0xda>
 800279a:	a201      	add	r2, pc, #4	@ (adr r2, 80027a0 <DMA_CheckFifoParam+0x70>)
 800279c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a0:	080027b1 	.word	0x080027b1
 80027a4:	080027b7 	.word	0x080027b7
 80027a8:	080027b1 	.word	0x080027b1
 80027ac:	080027c9 	.word	0x080027c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	73fb      	strb	r3, [r7, #15]
      break;
 80027b4:	e030      	b.n	8002818 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d025      	beq.n	800280e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027c6:	e022      	b.n	800280e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027cc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80027d0:	d11f      	bne.n	8002812 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027d6:	e01c      	b.n	8002812 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d903      	bls.n	80027e6 <DMA_CheckFifoParam+0xb6>
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	2b03      	cmp	r3, #3
 80027e2:	d003      	beq.n	80027ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027e4:	e018      	b.n	8002818 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	73fb      	strb	r3, [r7, #15]
      break;
 80027ea:	e015      	b.n	8002818 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00e      	beq.n	8002816 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	73fb      	strb	r3, [r7, #15]
      break;
 80027fc:	e00b      	b.n	8002816 <DMA_CheckFifoParam+0xe6>
      break;
 80027fe:	bf00      	nop
 8002800:	e00a      	b.n	8002818 <DMA_CheckFifoParam+0xe8>
      break;
 8002802:	bf00      	nop
 8002804:	e008      	b.n	8002818 <DMA_CheckFifoParam+0xe8>
      break;
 8002806:	bf00      	nop
 8002808:	e006      	b.n	8002818 <DMA_CheckFifoParam+0xe8>
      break;
 800280a:	bf00      	nop
 800280c:	e004      	b.n	8002818 <DMA_CheckFifoParam+0xe8>
      break;
 800280e:	bf00      	nop
 8002810:	e002      	b.n	8002818 <DMA_CheckFifoParam+0xe8>
      break;   
 8002812:	bf00      	nop
 8002814:	e000      	b.n	8002818 <DMA_CheckFifoParam+0xe8>
      break;
 8002816:	bf00      	nop
    }
  } 
  
  return status; 
 8002818:	7bfb      	ldrb	r3, [r7, #15]
}
 800281a:	4618      	mov	r0, r3
 800281c:	3714      	adds	r7, #20
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop

08002828 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002828:	b480      	push	{r7}
 800282a:	b089      	sub	sp, #36	@ 0x24
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002832:	2300      	movs	r3, #0
 8002834:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002836:	2300      	movs	r3, #0
 8002838:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800283a:	2300      	movs	r3, #0
 800283c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800283e:	2300      	movs	r3, #0
 8002840:	61fb      	str	r3, [r7, #28]
 8002842:	e159      	b.n	8002af8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002844:	2201      	movs	r2, #1
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	4013      	ands	r3, r2
 8002856:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	429a      	cmp	r2, r3
 800285e:	f040 8148 	bne.w	8002af2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f003 0303 	and.w	r3, r3, #3
 800286a:	2b01      	cmp	r3, #1
 800286c:	d005      	beq.n	800287a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002876:	2b02      	cmp	r3, #2
 8002878:	d130      	bne.n	80028dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	2203      	movs	r2, #3
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	43db      	mvns	r3, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4013      	ands	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	68da      	ldr	r2, [r3, #12]
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028b0:	2201      	movs	r2, #1
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	43db      	mvns	r3, r3
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	4013      	ands	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	091b      	lsrs	r3, r3, #4
 80028c6:	f003 0201 	and.w	r2, r3, #1
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f003 0303 	and.w	r3, r3, #3
 80028e4:	2b03      	cmp	r3, #3
 80028e6:	d017      	beq.n	8002918 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	2203      	movs	r2, #3
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	43db      	mvns	r3, r3
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	4013      	ands	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	4313      	orrs	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f003 0303 	and.w	r3, r3, #3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d123      	bne.n	800296c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	08da      	lsrs	r2, r3, #3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3208      	adds	r2, #8
 800292c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002930:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	220f      	movs	r2, #15
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	43db      	mvns	r3, r3
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	4013      	ands	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	691a      	ldr	r2, [r3, #16]
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4313      	orrs	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	08da      	lsrs	r2, r3, #3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	3208      	adds	r2, #8
 8002966:	69b9      	ldr	r1, [r7, #24]
 8002968:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	2203      	movs	r2, #3
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	43db      	mvns	r3, r3
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4013      	ands	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f003 0203 	and.w	r2, r3, #3
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4313      	orrs	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 80a2 	beq.w	8002af2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ae:	2300      	movs	r3, #0
 80029b0:	60fb      	str	r3, [r7, #12]
 80029b2:	4b57      	ldr	r3, [pc, #348]	@ (8002b10 <HAL_GPIO_Init+0x2e8>)
 80029b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b6:	4a56      	ldr	r2, [pc, #344]	@ (8002b10 <HAL_GPIO_Init+0x2e8>)
 80029b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80029be:	4b54      	ldr	r3, [pc, #336]	@ (8002b10 <HAL_GPIO_Init+0x2e8>)
 80029c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029ca:	4a52      	ldr	r2, [pc, #328]	@ (8002b14 <HAL_GPIO_Init+0x2ec>)
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	089b      	lsrs	r3, r3, #2
 80029d0:	3302      	adds	r3, #2
 80029d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	f003 0303 	and.w	r3, r3, #3
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	220f      	movs	r2, #15
 80029e2:	fa02 f303 	lsl.w	r3, r2, r3
 80029e6:	43db      	mvns	r3, r3
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	4013      	ands	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a49      	ldr	r2, [pc, #292]	@ (8002b18 <HAL_GPIO_Init+0x2f0>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d019      	beq.n	8002a2a <HAL_GPIO_Init+0x202>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a48      	ldr	r2, [pc, #288]	@ (8002b1c <HAL_GPIO_Init+0x2f4>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d013      	beq.n	8002a26 <HAL_GPIO_Init+0x1fe>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a47      	ldr	r2, [pc, #284]	@ (8002b20 <HAL_GPIO_Init+0x2f8>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d00d      	beq.n	8002a22 <HAL_GPIO_Init+0x1fa>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a46      	ldr	r2, [pc, #280]	@ (8002b24 <HAL_GPIO_Init+0x2fc>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d007      	beq.n	8002a1e <HAL_GPIO_Init+0x1f6>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a45      	ldr	r2, [pc, #276]	@ (8002b28 <HAL_GPIO_Init+0x300>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d101      	bne.n	8002a1a <HAL_GPIO_Init+0x1f2>
 8002a16:	2304      	movs	r3, #4
 8002a18:	e008      	b.n	8002a2c <HAL_GPIO_Init+0x204>
 8002a1a:	2307      	movs	r3, #7
 8002a1c:	e006      	b.n	8002a2c <HAL_GPIO_Init+0x204>
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e004      	b.n	8002a2c <HAL_GPIO_Init+0x204>
 8002a22:	2302      	movs	r3, #2
 8002a24:	e002      	b.n	8002a2c <HAL_GPIO_Init+0x204>
 8002a26:	2301      	movs	r3, #1
 8002a28:	e000      	b.n	8002a2c <HAL_GPIO_Init+0x204>
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	69fa      	ldr	r2, [r7, #28]
 8002a2e:	f002 0203 	and.w	r2, r2, #3
 8002a32:	0092      	lsls	r2, r2, #2
 8002a34:	4093      	lsls	r3, r2
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a3c:	4935      	ldr	r1, [pc, #212]	@ (8002b14 <HAL_GPIO_Init+0x2ec>)
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	089b      	lsrs	r3, r3, #2
 8002a42:	3302      	adds	r3, #2
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a4a:	4b38      	ldr	r3, [pc, #224]	@ (8002b2c <HAL_GPIO_Init+0x304>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	43db      	mvns	r3, r3
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	4013      	ands	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a6e:	4a2f      	ldr	r2, [pc, #188]	@ (8002b2c <HAL_GPIO_Init+0x304>)
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a74:	4b2d      	ldr	r3, [pc, #180]	@ (8002b2c <HAL_GPIO_Init+0x304>)
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	4013      	ands	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d003      	beq.n	8002a98 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a98:	4a24      	ldr	r2, [pc, #144]	@ (8002b2c <HAL_GPIO_Init+0x304>)
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a9e:	4b23      	ldr	r3, [pc, #140]	@ (8002b2c <HAL_GPIO_Init+0x304>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ac2:	4a1a      	ldr	r2, [pc, #104]	@ (8002b2c <HAL_GPIO_Init+0x304>)
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ac8:	4b18      	ldr	r3, [pc, #96]	@ (8002b2c <HAL_GPIO_Init+0x304>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002aec:	4a0f      	ldr	r2, [pc, #60]	@ (8002b2c <HAL_GPIO_Init+0x304>)
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	3301      	adds	r3, #1
 8002af6:	61fb      	str	r3, [r7, #28]
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	2b0f      	cmp	r3, #15
 8002afc:	f67f aea2 	bls.w	8002844 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b00:	bf00      	nop
 8002b02:	bf00      	nop
 8002b04:	3724      	adds	r7, #36	@ 0x24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	40023800 	.word	0x40023800
 8002b14:	40013800 	.word	0x40013800
 8002b18:	40020000 	.word	0x40020000
 8002b1c:	40020400 	.word	0x40020400
 8002b20:	40020800 	.word	0x40020800
 8002b24:	40020c00 	.word	0x40020c00
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	40013c00 	.word	0x40013c00

08002b30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	460b      	mov	r3, r1
 8002b3a:	807b      	strh	r3, [r7, #2]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b40:	787b      	ldrb	r3, [r7, #1]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b46:	887a      	ldrh	r2, [r7, #2]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b4c:	e003      	b.n	8002b56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b4e:	887b      	ldrh	r3, [r7, #2]
 8002b50:	041a      	lsls	r2, r3, #16
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	619a      	str	r2, [r3, #24]
}
 8002b56:	bf00      	nop
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
	...

08002b64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e267      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d075      	beq.n	8002c6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002b82:	4b88      	ldr	r3, [pc, #544]	@ (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 030c 	and.w	r3, r3, #12
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	d00c      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b8e:	4b85      	ldr	r3, [pc, #532]	@ (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002b96:	2b08      	cmp	r3, #8
 8002b98:	d112      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b9a:	4b82      	ldr	r3, [pc, #520]	@ (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ba2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ba6:	d10b      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba8:	4b7e      	ldr	r3, [pc, #504]	@ (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d05b      	beq.n	8002c6c <HAL_RCC_OscConfig+0x108>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d157      	bne.n	8002c6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e242      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bc8:	d106      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x74>
 8002bca:	4b76      	ldr	r3, [pc, #472]	@ (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a75      	ldr	r2, [pc, #468]	@ (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002bd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bd4:	6013      	str	r3, [r2, #0]
 8002bd6:	e01d      	b.n	8002c14 <HAL_RCC_OscConfig+0xb0>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002be0:	d10c      	bne.n	8002bfc <HAL_RCC_OscConfig+0x98>
 8002be2:	4b70      	ldr	r3, [pc, #448]	@ (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a6f      	ldr	r2, [pc, #444]	@ (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002be8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bec:	6013      	str	r3, [r2, #0]
 8002bee:	4b6d      	ldr	r3, [pc, #436]	@ (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a6c      	ldr	r2, [pc, #432]	@ (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002bf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	e00b      	b.n	8002c14 <HAL_RCC_OscConfig+0xb0>
 8002bfc:	4b69      	ldr	r3, [pc, #420]	@ (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a68      	ldr	r2, [pc, #416]	@ (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c06:	6013      	str	r3, [r2, #0]
 8002c08:	4b66      	ldr	r3, [pc, #408]	@ (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a65      	ldr	r2, [pc, #404]	@ (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d013      	beq.n	8002c44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1c:	f7fe fe72 	bl	8001904 <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c24:	f7fe fe6e 	bl	8001904 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b64      	cmp	r3, #100	@ 0x64
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e207      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c36:	4b5b      	ldr	r3, [pc, #364]	@ (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d0f0      	beq.n	8002c24 <HAL_RCC_OscConfig+0xc0>
 8002c42:	e014      	b.n	8002c6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c44:	f7fe fe5e 	bl	8001904 <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c4c:	f7fe fe5a 	bl	8001904 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b64      	cmp	r3, #100	@ 0x64
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e1f3      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c5e:	4b51      	ldr	r3, [pc, #324]	@ (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1f0      	bne.n	8002c4c <HAL_RCC_OscConfig+0xe8>
 8002c6a:	e000      	b.n	8002c6e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d063      	beq.n	8002d42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002c7a:	4b4a      	ldr	r3, [pc, #296]	@ (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 030c 	and.w	r3, r3, #12
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00b      	beq.n	8002c9e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c86:	4b47      	ldr	r3, [pc, #284]	@ (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002c8e:	2b08      	cmp	r3, #8
 8002c90:	d11c      	bne.n	8002ccc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c92:	4b44      	ldr	r3, [pc, #272]	@ (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d116      	bne.n	8002ccc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c9e:	4b41      	ldr	r3, [pc, #260]	@ (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d005      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x152>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d001      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e1c7      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb6:	4b3b      	ldr	r3, [pc, #236]	@ (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	4937      	ldr	r1, [pc, #220]	@ (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cca:	e03a      	b.n	8002d42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d020      	beq.n	8002d16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cd4:	4b34      	ldr	r3, [pc, #208]	@ (8002da8 <HAL_RCC_OscConfig+0x244>)
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cda:	f7fe fe13 	bl	8001904 <HAL_GetTick>
 8002cde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce0:	e008      	b.n	8002cf4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ce2:	f7fe fe0f 	bl	8001904 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e1a8      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf4:	4b2b      	ldr	r3, [pc, #172]	@ (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0f0      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d00:	4b28      	ldr	r3, [pc, #160]	@ (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	4925      	ldr	r1, [pc, #148]	@ (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	600b      	str	r3, [r1, #0]
 8002d14:	e015      	b.n	8002d42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d16:	4b24      	ldr	r3, [pc, #144]	@ (8002da8 <HAL_RCC_OscConfig+0x244>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1c:	f7fe fdf2 	bl	8001904 <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d24:	f7fe fdee 	bl	8001904 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e187      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d36:	4b1b      	ldr	r3, [pc, #108]	@ (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1f0      	bne.n	8002d24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0308 	and.w	r3, r3, #8
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d036      	beq.n	8002dbc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d016      	beq.n	8002d84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d56:	4b15      	ldr	r3, [pc, #84]	@ (8002dac <HAL_RCC_OscConfig+0x248>)
 8002d58:	2201      	movs	r2, #1
 8002d5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d5c:	f7fe fdd2 	bl	8001904 <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d64:	f7fe fdce 	bl	8001904 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e167      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d76:	4b0b      	ldr	r3, [pc, #44]	@ (8002da4 <HAL_RCC_OscConfig+0x240>)
 8002d78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0f0      	beq.n	8002d64 <HAL_RCC_OscConfig+0x200>
 8002d82:	e01b      	b.n	8002dbc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d84:	4b09      	ldr	r3, [pc, #36]	@ (8002dac <HAL_RCC_OscConfig+0x248>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d8a:	f7fe fdbb 	bl	8001904 <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d90:	e00e      	b.n	8002db0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d92:	f7fe fdb7 	bl	8001904 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d907      	bls.n	8002db0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e150      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
 8002da4:	40023800 	.word	0x40023800
 8002da8:	42470000 	.word	0x42470000
 8002dac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db0:	4b88      	ldr	r3, [pc, #544]	@ (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002db2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1ea      	bne.n	8002d92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 8097 	beq.w	8002ef8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dce:	4b81      	ldr	r3, [pc, #516]	@ (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10f      	bne.n	8002dfa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dda:	2300      	movs	r3, #0
 8002ddc:	60bb      	str	r3, [r7, #8]
 8002dde:	4b7d      	ldr	r3, [pc, #500]	@ (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de2:	4a7c      	ldr	r2, [pc, #496]	@ (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002de4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002de8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dea:	4b7a      	ldr	r3, [pc, #488]	@ (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002df2:	60bb      	str	r3, [r7, #8]
 8002df4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002df6:	2301      	movs	r3, #1
 8002df8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dfa:	4b77      	ldr	r3, [pc, #476]	@ (8002fd8 <HAL_RCC_OscConfig+0x474>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d118      	bne.n	8002e38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e06:	4b74      	ldr	r3, [pc, #464]	@ (8002fd8 <HAL_RCC_OscConfig+0x474>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a73      	ldr	r2, [pc, #460]	@ (8002fd8 <HAL_RCC_OscConfig+0x474>)
 8002e0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e12:	f7fe fd77 	bl	8001904 <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e1a:	f7fe fd73 	bl	8001904 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e10c      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e2c:	4b6a      	ldr	r3, [pc, #424]	@ (8002fd8 <HAL_RCC_OscConfig+0x474>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0f0      	beq.n	8002e1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d106      	bne.n	8002e4e <HAL_RCC_OscConfig+0x2ea>
 8002e40:	4b64      	ldr	r3, [pc, #400]	@ (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e44:	4a63      	ldr	r2, [pc, #396]	@ (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e46:	f043 0301 	orr.w	r3, r3, #1
 8002e4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e4c:	e01c      	b.n	8002e88 <HAL_RCC_OscConfig+0x324>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	2b05      	cmp	r3, #5
 8002e54:	d10c      	bne.n	8002e70 <HAL_RCC_OscConfig+0x30c>
 8002e56:	4b5f      	ldr	r3, [pc, #380]	@ (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e5a:	4a5e      	ldr	r2, [pc, #376]	@ (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e5c:	f043 0304 	orr.w	r3, r3, #4
 8002e60:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e62:	4b5c      	ldr	r3, [pc, #368]	@ (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e66:	4a5b      	ldr	r2, [pc, #364]	@ (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e68:	f043 0301 	orr.w	r3, r3, #1
 8002e6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e6e:	e00b      	b.n	8002e88 <HAL_RCC_OscConfig+0x324>
 8002e70:	4b58      	ldr	r3, [pc, #352]	@ (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e74:	4a57      	ldr	r2, [pc, #348]	@ (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e76:	f023 0301 	bic.w	r3, r3, #1
 8002e7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e7c:	4b55      	ldr	r3, [pc, #340]	@ (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e80:	4a54      	ldr	r2, [pc, #336]	@ (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002e82:	f023 0304 	bic.w	r3, r3, #4
 8002e86:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d015      	beq.n	8002ebc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e90:	f7fe fd38 	bl	8001904 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e96:	e00a      	b.n	8002eae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e98:	f7fe fd34 	bl	8001904 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e0cb      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eae:	4b49      	ldr	r3, [pc, #292]	@ (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d0ee      	beq.n	8002e98 <HAL_RCC_OscConfig+0x334>
 8002eba:	e014      	b.n	8002ee6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ebc:	f7fe fd22 	bl	8001904 <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ec2:	e00a      	b.n	8002eda <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ec4:	f7fe fd1e 	bl	8001904 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e0b5      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eda:	4b3e      	ldr	r3, [pc, #248]	@ (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1ee      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ee6:	7dfb      	ldrb	r3, [r7, #23]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d105      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eec:	4b39      	ldr	r3, [pc, #228]	@ (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef0:	4a38      	ldr	r2, [pc, #224]	@ (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002ef2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ef6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 80a1 	beq.w	8003044 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f02:	4b34      	ldr	r3, [pc, #208]	@ (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f003 030c 	and.w	r3, r3, #12
 8002f0a:	2b08      	cmp	r3, #8
 8002f0c:	d05c      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d141      	bne.n	8002f9a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f16:	4b31      	ldr	r3, [pc, #196]	@ (8002fdc <HAL_RCC_OscConfig+0x478>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1c:	f7fe fcf2 	bl	8001904 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f24:	f7fe fcee 	bl	8001904 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e087      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f36:	4b27      	ldr	r3, [pc, #156]	@ (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1f0      	bne.n	8002f24 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	69da      	ldr	r2, [r3, #28]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f50:	019b      	lsls	r3, r3, #6
 8002f52:	431a      	orrs	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f58:	085b      	lsrs	r3, r3, #1
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	041b      	lsls	r3, r3, #16
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f64:	061b      	lsls	r3, r3, #24
 8002f66:	491b      	ldr	r1, [pc, #108]	@ (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f6c:	4b1b      	ldr	r3, [pc, #108]	@ (8002fdc <HAL_RCC_OscConfig+0x478>)
 8002f6e:	2201      	movs	r2, #1
 8002f70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f72:	f7fe fcc7 	bl	8001904 <HAL_GetTick>
 8002f76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f78:	e008      	b.n	8002f8c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f7a:	f7fe fcc3 	bl	8001904 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e05c      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f8c:	4b11      	ldr	r3, [pc, #68]	@ (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0f0      	beq.n	8002f7a <HAL_RCC_OscConfig+0x416>
 8002f98:	e054      	b.n	8003044 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f9a:	4b10      	ldr	r3, [pc, #64]	@ (8002fdc <HAL_RCC_OscConfig+0x478>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa0:	f7fe fcb0 	bl	8001904 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa8:	f7fe fcac 	bl	8001904 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e045      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fba:	4b06      	ldr	r3, [pc, #24]	@ (8002fd4 <HAL_RCC_OscConfig+0x470>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f0      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x444>
 8002fc6:	e03d      	b.n	8003044 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d107      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e038      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	40007000 	.word	0x40007000
 8002fdc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fe0:	4b1b      	ldr	r3, [pc, #108]	@ (8003050 <HAL_RCC_OscConfig+0x4ec>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d028      	beq.n	8003040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d121      	bne.n	8003040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003006:	429a      	cmp	r2, r3
 8003008:	d11a      	bne.n	8003040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003010:	4013      	ands	r3, r2
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003016:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003018:	4293      	cmp	r3, r2
 800301a:	d111      	bne.n	8003040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003026:	085b      	lsrs	r3, r3, #1
 8003028:	3b01      	subs	r3, #1
 800302a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800302c:	429a      	cmp	r2, r3
 800302e:	d107      	bne.n	8003040 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800303a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800303c:	429a      	cmp	r2, r3
 800303e:	d001      	beq.n	8003044 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e000      	b.n	8003046 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3718      	adds	r7, #24
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	40023800 	.word	0x40023800

08003054 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e0cc      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003068:	4b68      	ldr	r3, [pc, #416]	@ (800320c <HAL_RCC_ClockConfig+0x1b8>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0307 	and.w	r3, r3, #7
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	429a      	cmp	r2, r3
 8003074:	d90c      	bls.n	8003090 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003076:	4b65      	ldr	r3, [pc, #404]	@ (800320c <HAL_RCC_ClockConfig+0x1b8>)
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	b2d2      	uxtb	r2, r2
 800307c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800307e:	4b63      	ldr	r3, [pc, #396]	@ (800320c <HAL_RCC_ClockConfig+0x1b8>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	429a      	cmp	r2, r3
 800308a:	d001      	beq.n	8003090 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e0b8      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d020      	beq.n	80030de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0304 	and.w	r3, r3, #4
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d005      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030a8:	4b59      	ldr	r3, [pc, #356]	@ (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	4a58      	ldr	r2, [pc, #352]	@ (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80030b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0308 	and.w	r3, r3, #8
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d005      	beq.n	80030cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030c0:	4b53      	ldr	r3, [pc, #332]	@ (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	4a52      	ldr	r2, [pc, #328]	@ (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80030ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030cc:	4b50      	ldr	r3, [pc, #320]	@ (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	494d      	ldr	r1, [pc, #308]	@ (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d044      	beq.n	8003174 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d107      	bne.n	8003102 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f2:	4b47      	ldr	r3, [pc, #284]	@ (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d119      	bne.n	8003132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e07f      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	2b02      	cmp	r3, #2
 8003108:	d003      	beq.n	8003112 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800310e:	2b03      	cmp	r3, #3
 8003110:	d107      	bne.n	8003122 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003112:	4b3f      	ldr	r3, [pc, #252]	@ (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d109      	bne.n	8003132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e06f      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003122:	4b3b      	ldr	r3, [pc, #236]	@ (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e067      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003132:	4b37      	ldr	r3, [pc, #220]	@ (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f023 0203 	bic.w	r2, r3, #3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	4934      	ldr	r1, [pc, #208]	@ (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 8003140:	4313      	orrs	r3, r2
 8003142:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003144:	f7fe fbde 	bl	8001904 <HAL_GetTick>
 8003148:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800314a:	e00a      	b.n	8003162 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800314c:	f7fe fbda 	bl	8001904 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	f241 3288 	movw	r2, #5000	@ 0x1388
 800315a:	4293      	cmp	r3, r2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e04f      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003162:	4b2b      	ldr	r3, [pc, #172]	@ (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 020c 	and.w	r2, r3, #12
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	429a      	cmp	r2, r3
 8003172:	d1eb      	bne.n	800314c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003174:	4b25      	ldr	r3, [pc, #148]	@ (800320c <HAL_RCC_ClockConfig+0x1b8>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	429a      	cmp	r2, r3
 8003180:	d20c      	bcs.n	800319c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003182:	4b22      	ldr	r3, [pc, #136]	@ (800320c <HAL_RCC_ClockConfig+0x1b8>)
 8003184:	683a      	ldr	r2, [r7, #0]
 8003186:	b2d2      	uxtb	r2, r2
 8003188:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800318a:	4b20      	ldr	r3, [pc, #128]	@ (800320c <HAL_RCC_ClockConfig+0x1b8>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0307 	and.w	r3, r3, #7
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	429a      	cmp	r2, r3
 8003196:	d001      	beq.n	800319c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e032      	b.n	8003202 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0304 	and.w	r3, r3, #4
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d008      	beq.n	80031ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031a8:	4b19      	ldr	r3, [pc, #100]	@ (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	4916      	ldr	r1, [pc, #88]	@ (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0308 	and.w	r3, r3, #8
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d009      	beq.n	80031da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031c6:	4b12      	ldr	r3, [pc, #72]	@ (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	490e      	ldr	r1, [pc, #56]	@ (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031da:	f000 f821 	bl	8003220 <HAL_RCC_GetSysClockFreq>
 80031de:	4602      	mov	r2, r0
 80031e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	091b      	lsrs	r3, r3, #4
 80031e6:	f003 030f 	and.w	r3, r3, #15
 80031ea:	490a      	ldr	r1, [pc, #40]	@ (8003214 <HAL_RCC_ClockConfig+0x1c0>)
 80031ec:	5ccb      	ldrb	r3, [r1, r3]
 80031ee:	fa22 f303 	lsr.w	r3, r2, r3
 80031f2:	4a09      	ldr	r2, [pc, #36]	@ (8003218 <HAL_RCC_ClockConfig+0x1c4>)
 80031f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80031f6:	4b09      	ldr	r3, [pc, #36]	@ (800321c <HAL_RCC_ClockConfig+0x1c8>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7fe fb3e 	bl	800187c <HAL_InitTick>

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	40023c00 	.word	0x40023c00
 8003210:	40023800 	.word	0x40023800
 8003214:	08005340 	.word	0x08005340
 8003218:	20000000 	.word	0x20000000
 800321c:	20000004 	.word	0x20000004

08003220 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003220:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003224:	b090      	sub	sp, #64	@ 0x40
 8003226:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003228:	2300      	movs	r3, #0
 800322a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800322c:	2300      	movs	r3, #0
 800322e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003230:	2300      	movs	r3, #0
 8003232:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003234:	2300      	movs	r3, #0
 8003236:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003238:	4b59      	ldr	r3, [pc, #356]	@ (80033a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f003 030c 	and.w	r3, r3, #12
 8003240:	2b08      	cmp	r3, #8
 8003242:	d00d      	beq.n	8003260 <HAL_RCC_GetSysClockFreq+0x40>
 8003244:	2b08      	cmp	r3, #8
 8003246:	f200 80a1 	bhi.w	800338c <HAL_RCC_GetSysClockFreq+0x16c>
 800324a:	2b00      	cmp	r3, #0
 800324c:	d002      	beq.n	8003254 <HAL_RCC_GetSysClockFreq+0x34>
 800324e:	2b04      	cmp	r3, #4
 8003250:	d003      	beq.n	800325a <HAL_RCC_GetSysClockFreq+0x3a>
 8003252:	e09b      	b.n	800338c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003254:	4b53      	ldr	r3, [pc, #332]	@ (80033a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003256:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003258:	e09b      	b.n	8003392 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800325a:	4b53      	ldr	r3, [pc, #332]	@ (80033a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800325c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800325e:	e098      	b.n	8003392 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003260:	4b4f      	ldr	r3, [pc, #316]	@ (80033a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003268:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800326a:	4b4d      	ldr	r3, [pc, #308]	@ (80033a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d028      	beq.n	80032c8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003276:	4b4a      	ldr	r3, [pc, #296]	@ (80033a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	099b      	lsrs	r3, r3, #6
 800327c:	2200      	movs	r2, #0
 800327e:	623b      	str	r3, [r7, #32]
 8003280:	627a      	str	r2, [r7, #36]	@ 0x24
 8003282:	6a3b      	ldr	r3, [r7, #32]
 8003284:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003288:	2100      	movs	r1, #0
 800328a:	4b47      	ldr	r3, [pc, #284]	@ (80033a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800328c:	fb03 f201 	mul.w	r2, r3, r1
 8003290:	2300      	movs	r3, #0
 8003292:	fb00 f303 	mul.w	r3, r0, r3
 8003296:	4413      	add	r3, r2
 8003298:	4a43      	ldr	r2, [pc, #268]	@ (80033a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800329a:	fba0 1202 	umull	r1, r2, r0, r2
 800329e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80032a0:	460a      	mov	r2, r1
 80032a2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80032a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032a6:	4413      	add	r3, r2
 80032a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032ac:	2200      	movs	r2, #0
 80032ae:	61bb      	str	r3, [r7, #24]
 80032b0:	61fa      	str	r2, [r7, #28]
 80032b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80032ba:	f7fc ff8d 	bl	80001d8 <__aeabi_uldivmod>
 80032be:	4602      	mov	r2, r0
 80032c0:	460b      	mov	r3, r1
 80032c2:	4613      	mov	r3, r2
 80032c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032c6:	e053      	b.n	8003370 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032c8:	4b35      	ldr	r3, [pc, #212]	@ (80033a0 <HAL_RCC_GetSysClockFreq+0x180>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	099b      	lsrs	r3, r3, #6
 80032ce:	2200      	movs	r2, #0
 80032d0:	613b      	str	r3, [r7, #16]
 80032d2:	617a      	str	r2, [r7, #20]
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80032da:	f04f 0b00 	mov.w	fp, #0
 80032de:	4652      	mov	r2, sl
 80032e0:	465b      	mov	r3, fp
 80032e2:	f04f 0000 	mov.w	r0, #0
 80032e6:	f04f 0100 	mov.w	r1, #0
 80032ea:	0159      	lsls	r1, r3, #5
 80032ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032f0:	0150      	lsls	r0, r2, #5
 80032f2:	4602      	mov	r2, r0
 80032f4:	460b      	mov	r3, r1
 80032f6:	ebb2 080a 	subs.w	r8, r2, sl
 80032fa:	eb63 090b 	sbc.w	r9, r3, fp
 80032fe:	f04f 0200 	mov.w	r2, #0
 8003302:	f04f 0300 	mov.w	r3, #0
 8003306:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800330a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800330e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003312:	ebb2 0408 	subs.w	r4, r2, r8
 8003316:	eb63 0509 	sbc.w	r5, r3, r9
 800331a:	f04f 0200 	mov.w	r2, #0
 800331e:	f04f 0300 	mov.w	r3, #0
 8003322:	00eb      	lsls	r3, r5, #3
 8003324:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003328:	00e2      	lsls	r2, r4, #3
 800332a:	4614      	mov	r4, r2
 800332c:	461d      	mov	r5, r3
 800332e:	eb14 030a 	adds.w	r3, r4, sl
 8003332:	603b      	str	r3, [r7, #0]
 8003334:	eb45 030b 	adc.w	r3, r5, fp
 8003338:	607b      	str	r3, [r7, #4]
 800333a:	f04f 0200 	mov.w	r2, #0
 800333e:	f04f 0300 	mov.w	r3, #0
 8003342:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003346:	4629      	mov	r1, r5
 8003348:	028b      	lsls	r3, r1, #10
 800334a:	4621      	mov	r1, r4
 800334c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003350:	4621      	mov	r1, r4
 8003352:	028a      	lsls	r2, r1, #10
 8003354:	4610      	mov	r0, r2
 8003356:	4619      	mov	r1, r3
 8003358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800335a:	2200      	movs	r2, #0
 800335c:	60bb      	str	r3, [r7, #8]
 800335e:	60fa      	str	r2, [r7, #12]
 8003360:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003364:	f7fc ff38 	bl	80001d8 <__aeabi_uldivmod>
 8003368:	4602      	mov	r2, r0
 800336a:	460b      	mov	r3, r1
 800336c:	4613      	mov	r3, r2
 800336e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003370:	4b0b      	ldr	r3, [pc, #44]	@ (80033a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	0c1b      	lsrs	r3, r3, #16
 8003376:	f003 0303 	and.w	r3, r3, #3
 800337a:	3301      	adds	r3, #1
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003380:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003384:	fbb2 f3f3 	udiv	r3, r2, r3
 8003388:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800338a:	e002      	b.n	8003392 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800338c:	4b05      	ldr	r3, [pc, #20]	@ (80033a4 <HAL_RCC_GetSysClockFreq+0x184>)
 800338e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003390:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003394:	4618      	mov	r0, r3
 8003396:	3740      	adds	r7, #64	@ 0x40
 8003398:	46bd      	mov	sp, r7
 800339a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800339e:	bf00      	nop
 80033a0:	40023800 	.word	0x40023800
 80033a4:	00f42400 	.word	0x00f42400
 80033a8:	017d7840 	.word	0x017d7840

080033ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033b0:	4b03      	ldr	r3, [pc, #12]	@ (80033c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80033b2:	681b      	ldr	r3, [r3, #0]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	20000000 	.word	0x20000000

080033c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033c8:	f7ff fff0 	bl	80033ac <HAL_RCC_GetHCLKFreq>
 80033cc:	4602      	mov	r2, r0
 80033ce:	4b05      	ldr	r3, [pc, #20]	@ (80033e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	0a9b      	lsrs	r3, r3, #10
 80033d4:	f003 0307 	and.w	r3, r3, #7
 80033d8:	4903      	ldr	r1, [pc, #12]	@ (80033e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033da:	5ccb      	ldrb	r3, [r1, r3]
 80033dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	40023800 	.word	0x40023800
 80033e8:	08005350 	.word	0x08005350

080033ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033f0:	f7ff ffdc 	bl	80033ac <HAL_RCC_GetHCLKFreq>
 80033f4:	4602      	mov	r2, r0
 80033f6:	4b05      	ldr	r3, [pc, #20]	@ (800340c <HAL_RCC_GetPCLK2Freq+0x20>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	0b5b      	lsrs	r3, r3, #13
 80033fc:	f003 0307 	and.w	r3, r3, #7
 8003400:	4903      	ldr	r1, [pc, #12]	@ (8003410 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003402:	5ccb      	ldrb	r3, [r1, r3]
 8003404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003408:	4618      	mov	r0, r3
 800340a:	bd80      	pop	{r7, pc}
 800340c:	40023800 	.word	0x40023800
 8003410:	08005350 	.word	0x08005350

08003414 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e041      	b.n	80034aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d106      	bne.n	8003440 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7fe f85a 	bl	80014f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2202      	movs	r2, #2
 8003444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	3304      	adds	r3, #4
 8003450:	4619      	mov	r1, r3
 8003452:	4610      	mov	r0, r2
 8003454:	f000 fac0 	bl	80039d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b082      	sub	sp, #8
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d101      	bne.n	80034c4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e041      	b.n	8003548 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d106      	bne.n	80034de <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 f839 	bl	8003550 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2202      	movs	r2, #2
 80034e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	3304      	adds	r3, #4
 80034ee:	4619      	mov	r1, r3
 80034f0:	4610      	mov	r0, r2
 80034f2:	f000 fa71 	bl	80039d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2201      	movs	r2, #1
 800351a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2201      	movs	r2, #1
 8003532:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3708      	adds	r7, #8
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003558:	bf00      	nop
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d109      	bne.n	8003588 <HAL_TIM_PWM_Start+0x24>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800357a:	b2db      	uxtb	r3, r3
 800357c:	2b01      	cmp	r3, #1
 800357e:	bf14      	ite	ne
 8003580:	2301      	movne	r3, #1
 8003582:	2300      	moveq	r3, #0
 8003584:	b2db      	uxtb	r3, r3
 8003586:	e022      	b.n	80035ce <HAL_TIM_PWM_Start+0x6a>
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	2b04      	cmp	r3, #4
 800358c:	d109      	bne.n	80035a2 <HAL_TIM_PWM_Start+0x3e>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b01      	cmp	r3, #1
 8003598:	bf14      	ite	ne
 800359a:	2301      	movne	r3, #1
 800359c:	2300      	moveq	r3, #0
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	e015      	b.n	80035ce <HAL_TIM_PWM_Start+0x6a>
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	2b08      	cmp	r3, #8
 80035a6:	d109      	bne.n	80035bc <HAL_TIM_PWM_Start+0x58>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	bf14      	ite	ne
 80035b4:	2301      	movne	r3, #1
 80035b6:	2300      	moveq	r3, #0
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	e008      	b.n	80035ce <HAL_TIM_PWM_Start+0x6a>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	bf14      	ite	ne
 80035c8:	2301      	movne	r3, #1
 80035ca:	2300      	moveq	r3, #0
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e068      	b.n	80036a8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d104      	bne.n	80035e6 <HAL_TIM_PWM_Start+0x82>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2202      	movs	r2, #2
 80035e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035e4:	e013      	b.n	800360e <HAL_TIM_PWM_Start+0xaa>
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	2b04      	cmp	r3, #4
 80035ea:	d104      	bne.n	80035f6 <HAL_TIM_PWM_Start+0x92>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2202      	movs	r2, #2
 80035f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035f4:	e00b      	b.n	800360e <HAL_TIM_PWM_Start+0xaa>
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	2b08      	cmp	r3, #8
 80035fa:	d104      	bne.n	8003606 <HAL_TIM_PWM_Start+0xa2>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2202      	movs	r2, #2
 8003600:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003604:	e003      	b.n	800360e <HAL_TIM_PWM_Start+0xaa>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2202      	movs	r2, #2
 800360a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2201      	movs	r2, #1
 8003614:	6839      	ldr	r1, [r7, #0]
 8003616:	4618      	mov	r0, r3
 8003618:	f000 fc90 	bl	8003f3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a23      	ldr	r2, [pc, #140]	@ (80036b0 <HAL_TIM_PWM_Start+0x14c>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d107      	bne.n	8003636 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003634:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a1d      	ldr	r2, [pc, #116]	@ (80036b0 <HAL_TIM_PWM_Start+0x14c>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d018      	beq.n	8003672 <HAL_TIM_PWM_Start+0x10e>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003648:	d013      	beq.n	8003672 <HAL_TIM_PWM_Start+0x10e>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a19      	ldr	r2, [pc, #100]	@ (80036b4 <HAL_TIM_PWM_Start+0x150>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d00e      	beq.n	8003672 <HAL_TIM_PWM_Start+0x10e>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a17      	ldr	r2, [pc, #92]	@ (80036b8 <HAL_TIM_PWM_Start+0x154>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d009      	beq.n	8003672 <HAL_TIM_PWM_Start+0x10e>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a16      	ldr	r2, [pc, #88]	@ (80036bc <HAL_TIM_PWM_Start+0x158>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d004      	beq.n	8003672 <HAL_TIM_PWM_Start+0x10e>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a14      	ldr	r2, [pc, #80]	@ (80036c0 <HAL_TIM_PWM_Start+0x15c>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d111      	bne.n	8003696 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f003 0307 	and.w	r3, r3, #7
 800367c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2b06      	cmp	r3, #6
 8003682:	d010      	beq.n	80036a6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f042 0201 	orr.w	r2, r2, #1
 8003692:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003694:	e007      	b.n	80036a6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f042 0201 	orr.w	r2, r2, #1
 80036a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3710      	adds	r7, #16
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	40010000 	.word	0x40010000
 80036b4:	40000400 	.word	0x40000400
 80036b8:	40000800 	.word	0x40000800
 80036bc:	40000c00 	.word	0x40000c00
 80036c0:	40014000 	.word	0x40014000

080036c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036d0:	2300      	movs	r3, #0
 80036d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d101      	bne.n	80036e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80036de:	2302      	movs	r3, #2
 80036e0:	e0ae      	b.n	8003840 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2b0c      	cmp	r3, #12
 80036ee:	f200 809f 	bhi.w	8003830 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80036f2:	a201      	add	r2, pc, #4	@ (adr r2, 80036f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80036f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f8:	0800372d 	.word	0x0800372d
 80036fc:	08003831 	.word	0x08003831
 8003700:	08003831 	.word	0x08003831
 8003704:	08003831 	.word	0x08003831
 8003708:	0800376d 	.word	0x0800376d
 800370c:	08003831 	.word	0x08003831
 8003710:	08003831 	.word	0x08003831
 8003714:	08003831 	.word	0x08003831
 8003718:	080037af 	.word	0x080037af
 800371c:	08003831 	.word	0x08003831
 8003720:	08003831 	.word	0x08003831
 8003724:	08003831 	.word	0x08003831
 8003728:	080037ef 	.word	0x080037ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68b9      	ldr	r1, [r7, #8]
 8003732:	4618      	mov	r0, r3
 8003734:	f000 f9dc 	bl	8003af0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	699a      	ldr	r2, [r3, #24]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f042 0208 	orr.w	r2, r2, #8
 8003746:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	699a      	ldr	r2, [r3, #24]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f022 0204 	bic.w	r2, r2, #4
 8003756:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6999      	ldr	r1, [r3, #24]
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	691a      	ldr	r2, [r3, #16]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	430a      	orrs	r2, r1
 8003768:	619a      	str	r2, [r3, #24]
      break;
 800376a:	e064      	b.n	8003836 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68b9      	ldr	r1, [r7, #8]
 8003772:	4618      	mov	r0, r3
 8003774:	f000 fa22 	bl	8003bbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	699a      	ldr	r2, [r3, #24]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003786:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	699a      	ldr	r2, [r3, #24]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003796:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	6999      	ldr	r1, [r3, #24]
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	021a      	lsls	r2, r3, #8
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	430a      	orrs	r2, r1
 80037aa:	619a      	str	r2, [r3, #24]
      break;
 80037ac:	e043      	b.n	8003836 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68b9      	ldr	r1, [r7, #8]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f000 fa6d 	bl	8003c94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	69da      	ldr	r2, [r3, #28]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f042 0208 	orr.w	r2, r2, #8
 80037c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	69da      	ldr	r2, [r3, #28]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 0204 	bic.w	r2, r2, #4
 80037d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	69d9      	ldr	r1, [r3, #28]
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	691a      	ldr	r2, [r3, #16]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	430a      	orrs	r2, r1
 80037ea:	61da      	str	r2, [r3, #28]
      break;
 80037ec:	e023      	b.n	8003836 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68b9      	ldr	r1, [r7, #8]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f000 fab7 	bl	8003d68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	69da      	ldr	r2, [r3, #28]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003808:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	69da      	ldr	r2, [r3, #28]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003818:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	69d9      	ldr	r1, [r3, #28]
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	021a      	lsls	r2, r3, #8
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	430a      	orrs	r2, r1
 800382c:	61da      	str	r2, [r3, #28]
      break;
 800382e:	e002      	b.n	8003836 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	75fb      	strb	r3, [r7, #23]
      break;
 8003834:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800383e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003840:	4618      	mov	r0, r3
 8003842:	3718      	adds	r7, #24
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003852:	2300      	movs	r3, #0
 8003854:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800385c:	2b01      	cmp	r3, #1
 800385e:	d101      	bne.n	8003864 <HAL_TIM_ConfigClockSource+0x1c>
 8003860:	2302      	movs	r3, #2
 8003862:	e0b4      	b.n	80039ce <HAL_TIM_ConfigClockSource+0x186>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2202      	movs	r2, #2
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003882:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800388a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68ba      	ldr	r2, [r7, #8]
 8003892:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800389c:	d03e      	beq.n	800391c <HAL_TIM_ConfigClockSource+0xd4>
 800389e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038a2:	f200 8087 	bhi.w	80039b4 <HAL_TIM_ConfigClockSource+0x16c>
 80038a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038aa:	f000 8086 	beq.w	80039ba <HAL_TIM_ConfigClockSource+0x172>
 80038ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038b2:	d87f      	bhi.n	80039b4 <HAL_TIM_ConfigClockSource+0x16c>
 80038b4:	2b70      	cmp	r3, #112	@ 0x70
 80038b6:	d01a      	beq.n	80038ee <HAL_TIM_ConfigClockSource+0xa6>
 80038b8:	2b70      	cmp	r3, #112	@ 0x70
 80038ba:	d87b      	bhi.n	80039b4 <HAL_TIM_ConfigClockSource+0x16c>
 80038bc:	2b60      	cmp	r3, #96	@ 0x60
 80038be:	d050      	beq.n	8003962 <HAL_TIM_ConfigClockSource+0x11a>
 80038c0:	2b60      	cmp	r3, #96	@ 0x60
 80038c2:	d877      	bhi.n	80039b4 <HAL_TIM_ConfigClockSource+0x16c>
 80038c4:	2b50      	cmp	r3, #80	@ 0x50
 80038c6:	d03c      	beq.n	8003942 <HAL_TIM_ConfigClockSource+0xfa>
 80038c8:	2b50      	cmp	r3, #80	@ 0x50
 80038ca:	d873      	bhi.n	80039b4 <HAL_TIM_ConfigClockSource+0x16c>
 80038cc:	2b40      	cmp	r3, #64	@ 0x40
 80038ce:	d058      	beq.n	8003982 <HAL_TIM_ConfigClockSource+0x13a>
 80038d0:	2b40      	cmp	r3, #64	@ 0x40
 80038d2:	d86f      	bhi.n	80039b4 <HAL_TIM_ConfigClockSource+0x16c>
 80038d4:	2b30      	cmp	r3, #48	@ 0x30
 80038d6:	d064      	beq.n	80039a2 <HAL_TIM_ConfigClockSource+0x15a>
 80038d8:	2b30      	cmp	r3, #48	@ 0x30
 80038da:	d86b      	bhi.n	80039b4 <HAL_TIM_ConfigClockSource+0x16c>
 80038dc:	2b20      	cmp	r3, #32
 80038de:	d060      	beq.n	80039a2 <HAL_TIM_ConfigClockSource+0x15a>
 80038e0:	2b20      	cmp	r3, #32
 80038e2:	d867      	bhi.n	80039b4 <HAL_TIM_ConfigClockSource+0x16c>
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d05c      	beq.n	80039a2 <HAL_TIM_ConfigClockSource+0x15a>
 80038e8:	2b10      	cmp	r3, #16
 80038ea:	d05a      	beq.n	80039a2 <HAL_TIM_ConfigClockSource+0x15a>
 80038ec:	e062      	b.n	80039b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038fe:	f000 fafd 	bl	8003efc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003910:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68ba      	ldr	r2, [r7, #8]
 8003918:	609a      	str	r2, [r3, #8]
      break;
 800391a:	e04f      	b.n	80039bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800392c:	f000 fae6 	bl	8003efc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689a      	ldr	r2, [r3, #8]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800393e:	609a      	str	r2, [r3, #8]
      break;
 8003940:	e03c      	b.n	80039bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800394e:	461a      	mov	r2, r3
 8003950:	f000 fa5a 	bl	8003e08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2150      	movs	r1, #80	@ 0x50
 800395a:	4618      	mov	r0, r3
 800395c:	f000 fab3 	bl	8003ec6 <TIM_ITRx_SetConfig>
      break;
 8003960:	e02c      	b.n	80039bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800396e:	461a      	mov	r2, r3
 8003970:	f000 fa79 	bl	8003e66 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2160      	movs	r1, #96	@ 0x60
 800397a:	4618      	mov	r0, r3
 800397c:	f000 faa3 	bl	8003ec6 <TIM_ITRx_SetConfig>
      break;
 8003980:	e01c      	b.n	80039bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800398e:	461a      	mov	r2, r3
 8003990:	f000 fa3a 	bl	8003e08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2140      	movs	r1, #64	@ 0x40
 800399a:	4618      	mov	r0, r3
 800399c:	f000 fa93 	bl	8003ec6 <TIM_ITRx_SetConfig>
      break;
 80039a0:	e00c      	b.n	80039bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4619      	mov	r1, r3
 80039ac:	4610      	mov	r0, r2
 80039ae:	f000 fa8a 	bl	8003ec6 <TIM_ITRx_SetConfig>
      break;
 80039b2:	e003      	b.n	80039bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	73fb      	strb	r3, [r7, #15]
      break;
 80039b8:	e000      	b.n	80039bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80039ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80039cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
	...

080039d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a3a      	ldr	r2, [pc, #232]	@ (8003ad4 <TIM_Base_SetConfig+0xfc>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d00f      	beq.n	8003a10 <TIM_Base_SetConfig+0x38>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039f6:	d00b      	beq.n	8003a10 <TIM_Base_SetConfig+0x38>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a37      	ldr	r2, [pc, #220]	@ (8003ad8 <TIM_Base_SetConfig+0x100>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d007      	beq.n	8003a10 <TIM_Base_SetConfig+0x38>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a36      	ldr	r2, [pc, #216]	@ (8003adc <TIM_Base_SetConfig+0x104>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d003      	beq.n	8003a10 <TIM_Base_SetConfig+0x38>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a35      	ldr	r2, [pc, #212]	@ (8003ae0 <TIM_Base_SetConfig+0x108>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d108      	bne.n	8003a22 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a2b      	ldr	r2, [pc, #172]	@ (8003ad4 <TIM_Base_SetConfig+0xfc>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d01b      	beq.n	8003a62 <TIM_Base_SetConfig+0x8a>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a30:	d017      	beq.n	8003a62 <TIM_Base_SetConfig+0x8a>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a28      	ldr	r2, [pc, #160]	@ (8003ad8 <TIM_Base_SetConfig+0x100>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d013      	beq.n	8003a62 <TIM_Base_SetConfig+0x8a>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a27      	ldr	r2, [pc, #156]	@ (8003adc <TIM_Base_SetConfig+0x104>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d00f      	beq.n	8003a62 <TIM_Base_SetConfig+0x8a>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a26      	ldr	r2, [pc, #152]	@ (8003ae0 <TIM_Base_SetConfig+0x108>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d00b      	beq.n	8003a62 <TIM_Base_SetConfig+0x8a>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a25      	ldr	r2, [pc, #148]	@ (8003ae4 <TIM_Base_SetConfig+0x10c>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d007      	beq.n	8003a62 <TIM_Base_SetConfig+0x8a>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a24      	ldr	r2, [pc, #144]	@ (8003ae8 <TIM_Base_SetConfig+0x110>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d003      	beq.n	8003a62 <TIM_Base_SetConfig+0x8a>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a23      	ldr	r2, [pc, #140]	@ (8003aec <TIM_Base_SetConfig+0x114>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d108      	bne.n	8003a74 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	689a      	ldr	r2, [r3, #8]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a0e      	ldr	r2, [pc, #56]	@ (8003ad4 <TIM_Base_SetConfig+0xfc>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d103      	bne.n	8003aa8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	691a      	ldr	r2, [r3, #16]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d105      	bne.n	8003ac6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	f023 0201 	bic.w	r2, r3, #1
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	611a      	str	r2, [r3, #16]
  }
}
 8003ac6:	bf00      	nop
 8003ac8:	3714      	adds	r7, #20
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	40010000 	.word	0x40010000
 8003ad8:	40000400 	.word	0x40000400
 8003adc:	40000800 	.word	0x40000800
 8003ae0:	40000c00 	.word	0x40000c00
 8003ae4:	40014000 	.word	0x40014000
 8003ae8:	40014400 	.word	0x40014400
 8003aec:	40014800 	.word	0x40014800

08003af0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b087      	sub	sp, #28
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a1b      	ldr	r3, [r3, #32]
 8003b04:	f023 0201 	bic.w	r2, r3, #1
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f023 0303 	bic.w	r3, r3, #3
 8003b26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	f023 0302 	bic.w	r3, r3, #2
 8003b38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a1c      	ldr	r2, [pc, #112]	@ (8003bb8 <TIM_OC1_SetConfig+0xc8>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d10c      	bne.n	8003b66 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	f023 0308 	bic.w	r3, r3, #8
 8003b52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	697a      	ldr	r2, [r7, #20]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	f023 0304 	bic.w	r3, r3, #4
 8003b64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a13      	ldr	r2, [pc, #76]	@ (8003bb8 <TIM_OC1_SetConfig+0xc8>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d111      	bne.n	8003b92 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003b7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	685a      	ldr	r2, [r3, #4]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	621a      	str	r2, [r3, #32]
}
 8003bac:	bf00      	nop
 8003bae:	371c      	adds	r7, #28
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr
 8003bb8:	40010000 	.word	0x40010000

08003bbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b087      	sub	sp, #28
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	f023 0210 	bic.w	r2, r3, #16
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	021b      	lsls	r3, r3, #8
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	f023 0320 	bic.w	r3, r3, #32
 8003c06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	011b      	lsls	r3, r3, #4
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a1e      	ldr	r2, [pc, #120]	@ (8003c90 <TIM_OC2_SetConfig+0xd4>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d10d      	bne.n	8003c38 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	011b      	lsls	r3, r3, #4
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c36:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a15      	ldr	r2, [pc, #84]	@ (8003c90 <TIM_OC2_SetConfig+0xd4>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d113      	bne.n	8003c68 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	621a      	str	r2, [r3, #32]
}
 8003c82:	bf00      	nop
 8003c84:	371c      	adds	r7, #28
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	40010000 	.word	0x40010000

08003c94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b087      	sub	sp, #28
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a1b      	ldr	r3, [r3, #32]
 8003ca8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	69db      	ldr	r3, [r3, #28]
 8003cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f023 0303 	bic.w	r3, r3, #3
 8003cca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003cdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	021b      	lsls	r3, r3, #8
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a1d      	ldr	r2, [pc, #116]	@ (8003d64 <TIM_OC3_SetConfig+0xd0>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d10d      	bne.n	8003d0e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003cf8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	021b      	lsls	r3, r3, #8
 8003d00:	697a      	ldr	r2, [r7, #20]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a14      	ldr	r2, [pc, #80]	@ (8003d64 <TIM_OC3_SetConfig+0xd0>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d113      	bne.n	8003d3e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	011b      	lsls	r3, r3, #4
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	011b      	lsls	r3, r3, #4
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	697a      	ldr	r2, [r7, #20]
 8003d56:	621a      	str	r2, [r3, #32]
}
 8003d58:	bf00      	nop
 8003d5a:	371c      	adds	r7, #28
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	40010000 	.word	0x40010000

08003d68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b087      	sub	sp, #28
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	69db      	ldr	r3, [r3, #28]
 8003d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	021b      	lsls	r3, r3, #8
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003db2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	031b      	lsls	r3, r3, #12
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a10      	ldr	r2, [pc, #64]	@ (8003e04 <TIM_OC4_SetConfig+0x9c>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d109      	bne.n	8003ddc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003dce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	019b      	lsls	r3, r3, #6
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	621a      	str	r2, [r3, #32]
}
 8003df6:	bf00      	nop
 8003df8:	371c      	adds	r7, #28
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	40010000 	.word	0x40010000

08003e08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b087      	sub	sp, #28
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6a1b      	ldr	r3, [r3, #32]
 8003e18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	f023 0201 	bic.w	r2, r3, #1
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	011b      	lsls	r3, r3, #4
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	f023 030a 	bic.w	r3, r3, #10
 8003e44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	621a      	str	r2, [r3, #32]
}
 8003e5a:	bf00      	nop
 8003e5c:	371c      	adds	r7, #28
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e66:	b480      	push	{r7}
 8003e68:	b087      	sub	sp, #28
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	60f8      	str	r0, [r7, #12]
 8003e6e:	60b9      	str	r1, [r7, #8]
 8003e70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	f023 0210 	bic.w	r2, r3, #16
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003e90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	031b      	lsls	r3, r3, #12
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003ea2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	011b      	lsls	r3, r3, #4
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	621a      	str	r2, [r3, #32]
}
 8003eba:	bf00      	nop
 8003ebc:	371c      	adds	r7, #28
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b085      	sub	sp, #20
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
 8003ece:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003edc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ede:	683a      	ldr	r2, [r7, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	f043 0307 	orr.w	r3, r3, #7
 8003ee8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	609a      	str	r2, [r3, #8]
}
 8003ef0:	bf00      	nop
 8003ef2:	3714      	adds	r7, #20
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b087      	sub	sp, #28
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
 8003f08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	021a      	lsls	r2, r3, #8
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	697a      	ldr	r2, [r7, #20]
 8003f2e:	609a      	str	r2, [r3, #8]
}
 8003f30:	bf00      	nop
 8003f32:	371c      	adds	r7, #28
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b087      	sub	sp, #28
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	f003 031f 	and.w	r3, r3, #31
 8003f4e:	2201      	movs	r2, #1
 8003f50:	fa02 f303 	lsl.w	r3, r2, r3
 8003f54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6a1a      	ldr	r2, [r3, #32]
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	43db      	mvns	r3, r3
 8003f5e:	401a      	ands	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6a1a      	ldr	r2, [r3, #32]
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	f003 031f 	and.w	r3, r3, #31
 8003f6e:	6879      	ldr	r1, [r7, #4]
 8003f70:	fa01 f303 	lsl.w	r3, r1, r3
 8003f74:	431a      	orrs	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	621a      	str	r2, [r3, #32]
}
 8003f7a:	bf00      	nop
 8003f7c:	371c      	adds	r7, #28
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
	...

08003f88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d101      	bne.n	8003fa0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	e050      	b.n	8004042 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2202      	movs	r2, #2
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a1c      	ldr	r2, [pc, #112]	@ (8004050 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d018      	beq.n	8004016 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fec:	d013      	beq.n	8004016 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a18      	ldr	r2, [pc, #96]	@ (8004054 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d00e      	beq.n	8004016 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a16      	ldr	r2, [pc, #88]	@ (8004058 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d009      	beq.n	8004016 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a15      	ldr	r2, [pc, #84]	@ (800405c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d004      	beq.n	8004016 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a13      	ldr	r2, [pc, #76]	@ (8004060 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d10c      	bne.n	8004030 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800401c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	68ba      	ldr	r2, [r7, #8]
 8004024:	4313      	orrs	r3, r2
 8004026:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68ba      	ldr	r2, [r7, #8]
 800402e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3714      	adds	r7, #20
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	40010000 	.word	0x40010000
 8004054:	40000400 	.word	0x40000400
 8004058:	40000800 	.word	0x40000800
 800405c:	40000c00 	.word	0x40000c00
 8004060:	40014000 	.word	0x40014000

08004064 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e042      	b.n	80040fc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d106      	bne.n	8004090 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7fd faf0 	bl	8001670 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2224      	movs	r2, #36	@ 0x24
 8004094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68da      	ldr	r2, [r3, #12]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 fe75 	bl	8004d98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	691a      	ldr	r2, [r3, #16]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80040bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	695a      	ldr	r2, [r3, #20]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80040cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68da      	ldr	r2, [r3, #12]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80040dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2220      	movs	r2, #32
 80040e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2220      	movs	r2, #32
 80040f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3708      	adds	r7, #8
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	4613      	mov	r3, r2
 8004110:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b20      	cmp	r3, #32
 800411c:	d112      	bne.n	8004144 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d002      	beq.n	800412a <HAL_UART_Receive_DMA+0x26>
 8004124:	88fb      	ldrh	r3, [r7, #6]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e00b      	b.n	8004146 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004134:	88fb      	ldrh	r3, [r7, #6]
 8004136:	461a      	mov	r2, r3
 8004138:	68b9      	ldr	r1, [r7, #8]
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f000 fbcc 	bl	80048d8 <UART_Start_Receive_DMA>
 8004140:	4603      	mov	r3, r0
 8004142:	e000      	b.n	8004146 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004144:	2302      	movs	r3, #2
  }
}
 8004146:	4618      	mov	r0, r3
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
	...

08004150 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b0ba      	sub	sp, #232	@ 0xe8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004176:	2300      	movs	r3, #0
 8004178:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800417c:	2300      	movs	r3, #0
 800417e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004186:	f003 030f 	and.w	r3, r3, #15
 800418a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800418e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004192:	2b00      	cmp	r3, #0
 8004194:	d10f      	bne.n	80041b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800419a:	f003 0320 	and.w	r3, r3, #32
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d009      	beq.n	80041b6 <HAL_UART_IRQHandler+0x66>
 80041a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041a6:	f003 0320 	and.w	r3, r3, #32
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d003      	beq.n	80041b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 fd33 	bl	8004c1a <UART_Receive_IT>
      return;
 80041b4:	e25b      	b.n	800466e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80041b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f000 80de 	beq.w	800437c <HAL_UART_IRQHandler+0x22c>
 80041c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041c4:	f003 0301 	and.w	r3, r3, #1
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d106      	bne.n	80041da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80041cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041d0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f000 80d1 	beq.w	800437c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80041da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00b      	beq.n	80041fe <HAL_UART_IRQHandler+0xae>
 80041e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d005      	beq.n	80041fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041f6:	f043 0201 	orr.w	r2, r3, #1
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004202:	f003 0304 	and.w	r3, r3, #4
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00b      	beq.n	8004222 <HAL_UART_IRQHandler+0xd2>
 800420a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b00      	cmp	r3, #0
 8004214:	d005      	beq.n	8004222 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800421a:	f043 0202 	orr.w	r2, r3, #2
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00b      	beq.n	8004246 <HAL_UART_IRQHandler+0xf6>
 800422e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	2b00      	cmp	r3, #0
 8004238:	d005      	beq.n	8004246 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800423e:	f043 0204 	orr.w	r2, r3, #4
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800424a:	f003 0308 	and.w	r3, r3, #8
 800424e:	2b00      	cmp	r3, #0
 8004250:	d011      	beq.n	8004276 <HAL_UART_IRQHandler+0x126>
 8004252:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004256:	f003 0320 	and.w	r3, r3, #32
 800425a:	2b00      	cmp	r3, #0
 800425c:	d105      	bne.n	800426a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800425e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	2b00      	cmp	r3, #0
 8004268:	d005      	beq.n	8004276 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800426e:	f043 0208 	orr.w	r2, r3, #8
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800427a:	2b00      	cmp	r3, #0
 800427c:	f000 81f2 	beq.w	8004664 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004284:	f003 0320 	and.w	r3, r3, #32
 8004288:	2b00      	cmp	r3, #0
 800428a:	d008      	beq.n	800429e <HAL_UART_IRQHandler+0x14e>
 800428c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004290:	f003 0320 	and.w	r3, r3, #32
 8004294:	2b00      	cmp	r3, #0
 8004296:	d002      	beq.n	800429e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f000 fcbe 	bl	8004c1a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042a8:	2b40      	cmp	r3, #64	@ 0x40
 80042aa:	bf0c      	ite	eq
 80042ac:	2301      	moveq	r3, #1
 80042ae:	2300      	movne	r3, #0
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ba:	f003 0308 	and.w	r3, r3, #8
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d103      	bne.n	80042ca <HAL_UART_IRQHandler+0x17a>
 80042c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d04f      	beq.n	800436a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 fbc6 	bl	8004a5c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042da:	2b40      	cmp	r3, #64	@ 0x40
 80042dc:	d141      	bne.n	8004362 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	3314      	adds	r3, #20
 80042e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80042ec:	e853 3f00 	ldrex	r3, [r3]
 80042f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80042f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80042f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	3314      	adds	r3, #20
 8004306:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800430a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800430e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004312:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004316:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800431a:	e841 2300 	strex	r3, r2, [r1]
 800431e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004322:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1d9      	bne.n	80042de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800432e:	2b00      	cmp	r3, #0
 8004330:	d013      	beq.n	800435a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004336:	4a7e      	ldr	r2, [pc, #504]	@ (8004530 <HAL_UART_IRQHandler+0x3e0>)
 8004338:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800433e:	4618      	mov	r0, r3
 8004340:	f7fd ffe6 	bl	8002310 <HAL_DMA_Abort_IT>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d016      	beq.n	8004378 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800434e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004354:	4610      	mov	r0, r2
 8004356:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004358:	e00e      	b.n	8004378 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 f9a8 	bl	80046b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004360:	e00a      	b.n	8004378 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 f9a4 	bl	80046b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004368:	e006      	b.n	8004378 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 f9a0 	bl	80046b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004376:	e175      	b.n	8004664 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004378:	bf00      	nop
    return;
 800437a:	e173      	b.n	8004664 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004380:	2b01      	cmp	r3, #1
 8004382:	f040 814f 	bne.w	8004624 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800438a:	f003 0310 	and.w	r3, r3, #16
 800438e:	2b00      	cmp	r3, #0
 8004390:	f000 8148 	beq.w	8004624 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004398:	f003 0310 	and.w	r3, r3, #16
 800439c:	2b00      	cmp	r3, #0
 800439e:	f000 8141 	beq.w	8004624 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043a2:	2300      	movs	r3, #0
 80043a4:	60bb      	str	r3, [r7, #8]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	60bb      	str	r3, [r7, #8]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	60bb      	str	r3, [r7, #8]
 80043b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043c2:	2b40      	cmp	r3, #64	@ 0x40
 80043c4:	f040 80b6 	bne.w	8004534 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80043d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 8145 	beq.w	8004668 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80043e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80043e6:	429a      	cmp	r2, r3
 80043e8:	f080 813e 	bcs.w	8004668 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80043f2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043f8:	69db      	ldr	r3, [r3, #28]
 80043fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043fe:	f000 8088 	beq.w	8004512 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	330c      	adds	r3, #12
 8004408:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004410:	e853 3f00 	ldrex	r3, [r3]
 8004414:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004418:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800441c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004420:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	330c      	adds	r3, #12
 800442a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800442e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004432:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004436:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800443a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800443e:	e841 2300 	strex	r3, r2, [r1]
 8004442:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004446:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1d9      	bne.n	8004402 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	3314      	adds	r3, #20
 8004454:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004456:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004458:	e853 3f00 	ldrex	r3, [r3]
 800445c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800445e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004460:	f023 0301 	bic.w	r3, r3, #1
 8004464:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	3314      	adds	r3, #20
 800446e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004472:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004476:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004478:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800447a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800447e:	e841 2300 	strex	r3, r2, [r1]
 8004482:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004484:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1e1      	bne.n	800444e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	3314      	adds	r3, #20
 8004490:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004492:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004494:	e853 3f00 	ldrex	r3, [r3]
 8004498:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800449a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800449c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	3314      	adds	r3, #20
 80044aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80044ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80044b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80044b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80044b6:	e841 2300 	strex	r3, r2, [r1]
 80044ba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80044bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1e3      	bne.n	800448a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2220      	movs	r2, #32
 80044c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	330c      	adds	r3, #12
 80044d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044da:	e853 3f00 	ldrex	r3, [r3]
 80044de:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80044e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044e2:	f023 0310 	bic.w	r3, r3, #16
 80044e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	330c      	adds	r3, #12
 80044f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80044f4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80044f6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80044fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80044fc:	e841 2300 	strex	r3, r2, [r1]
 8004500:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004502:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1e3      	bne.n	80044d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800450c:	4618      	mov	r0, r3
 800450e:	f7fd fe8f 	bl	8002230 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2202      	movs	r2, #2
 8004516:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004520:	b29b      	uxth	r3, r3
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	b29b      	uxth	r3, r3
 8004526:	4619      	mov	r1, r3
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 f8cb 	bl	80046c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800452e:	e09b      	b.n	8004668 <HAL_UART_IRQHandler+0x518>
 8004530:	08004b23 	.word	0x08004b23
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800453c:	b29b      	uxth	r3, r3
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004548:	b29b      	uxth	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	f000 808e 	beq.w	800466c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004550:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004554:	2b00      	cmp	r3, #0
 8004556:	f000 8089 	beq.w	800466c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	330c      	adds	r3, #12
 8004560:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004564:	e853 3f00 	ldrex	r3, [r3]
 8004568:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800456a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800456c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004570:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	330c      	adds	r3, #12
 800457a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800457e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004580:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004582:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004584:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004586:	e841 2300 	strex	r3, r2, [r1]
 800458a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800458c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1e3      	bne.n	800455a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	3314      	adds	r3, #20
 8004598:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800459c:	e853 3f00 	ldrex	r3, [r3]
 80045a0:	623b      	str	r3, [r7, #32]
   return(result);
 80045a2:	6a3b      	ldr	r3, [r7, #32]
 80045a4:	f023 0301 	bic.w	r3, r3, #1
 80045a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	3314      	adds	r3, #20
 80045b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80045b6:	633a      	str	r2, [r7, #48]	@ 0x30
 80045b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80045bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045be:	e841 2300 	strex	r3, r2, [r1]
 80045c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80045c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1e3      	bne.n	8004592 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2220      	movs	r2, #32
 80045ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	330c      	adds	r3, #12
 80045de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	e853 3f00 	ldrex	r3, [r3]
 80045e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f023 0310 	bic.w	r3, r3, #16
 80045ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	330c      	adds	r3, #12
 80045f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80045fc:	61fa      	str	r2, [r7, #28]
 80045fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004600:	69b9      	ldr	r1, [r7, #24]
 8004602:	69fa      	ldr	r2, [r7, #28]
 8004604:	e841 2300 	strex	r3, r2, [r1]
 8004608:	617b      	str	r3, [r7, #20]
   return(result);
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1e3      	bne.n	80045d8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2202      	movs	r2, #2
 8004614:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004616:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800461a:	4619      	mov	r1, r3
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 f851 	bl	80046c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004622:	e023      	b.n	800466c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004628:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800462c:	2b00      	cmp	r3, #0
 800462e:	d009      	beq.n	8004644 <HAL_UART_IRQHandler+0x4f4>
 8004630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004634:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004638:	2b00      	cmp	r3, #0
 800463a:	d003      	beq.n	8004644 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 fa84 	bl	8004b4a <UART_Transmit_IT>
    return;
 8004642:	e014      	b.n	800466e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00e      	beq.n	800466e <HAL_UART_IRQHandler+0x51e>
 8004650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004658:	2b00      	cmp	r3, #0
 800465a:	d008      	beq.n	800466e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 fac4 	bl	8004bea <UART_EndTransmit_IT>
    return;
 8004662:	e004      	b.n	800466e <HAL_UART_IRQHandler+0x51e>
    return;
 8004664:	bf00      	nop
 8004666:	e002      	b.n	800466e <HAL_UART_IRQHandler+0x51e>
      return;
 8004668:	bf00      	nop
 800466a:	e000      	b.n	800466e <HAL_UART_IRQHandler+0x51e>
      return;
 800466c:	bf00      	nop
  }
}
 800466e:	37e8      	adds	r7, #232	@ 0xe8
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004690:	bf00      	nop
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80046a4:	bf00      	nop
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80046b8:	bf00      	nop
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	460b      	mov	r3, r1
 80046ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b09c      	sub	sp, #112	@ 0x70
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046e8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d172      	bne.n	80047de <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80046f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046fa:	2200      	movs	r2, #0
 80046fc:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	330c      	adds	r3, #12
 8004704:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004706:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004708:	e853 3f00 	ldrex	r3, [r3]
 800470c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800470e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004710:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004714:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004716:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	330c      	adds	r3, #12
 800471c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800471e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004720:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004722:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004724:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004726:	e841 2300 	strex	r3, r2, [r1]
 800472a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800472c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1e5      	bne.n	80046fe <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004732:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	3314      	adds	r3, #20
 8004738:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800473c:	e853 3f00 	ldrex	r3, [r3]
 8004740:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004742:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004744:	f023 0301 	bic.w	r3, r3, #1
 8004748:	667b      	str	r3, [r7, #100]	@ 0x64
 800474a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	3314      	adds	r3, #20
 8004750:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004752:	647a      	str	r2, [r7, #68]	@ 0x44
 8004754:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004756:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004758:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800475a:	e841 2300 	strex	r3, r2, [r1]
 800475e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004760:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1e5      	bne.n	8004732 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004766:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	3314      	adds	r3, #20
 800476c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004770:	e853 3f00 	ldrex	r3, [r3]
 8004774:	623b      	str	r3, [r7, #32]
   return(result);
 8004776:	6a3b      	ldr	r3, [r7, #32]
 8004778:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800477c:	663b      	str	r3, [r7, #96]	@ 0x60
 800477e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	3314      	adds	r3, #20
 8004784:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004786:	633a      	str	r2, [r7, #48]	@ 0x30
 8004788:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800478c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800478e:	e841 2300 	strex	r3, r2, [r1]
 8004792:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1e5      	bne.n	8004766 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800479a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800479c:	2220      	movs	r2, #32
 800479e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d119      	bne.n	80047de <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	330c      	adds	r3, #12
 80047b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	e853 3f00 	ldrex	r3, [r3]
 80047b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f023 0310 	bic.w	r3, r3, #16
 80047c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80047c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	330c      	adds	r3, #12
 80047c8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80047ca:	61fa      	str	r2, [r7, #28]
 80047cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ce:	69b9      	ldr	r1, [r7, #24]
 80047d0:	69fa      	ldr	r2, [r7, #28]
 80047d2:	e841 2300 	strex	r3, r2, [r1]
 80047d6:	617b      	str	r3, [r7, #20]
   return(result);
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1e5      	bne.n	80047aa <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047e0:	2200      	movs	r2, #0
 80047e2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d106      	bne.n	80047fa <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047ee:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80047f0:	4619      	mov	r1, r3
 80047f2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80047f4:	f7ff ff66 	bl	80046c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80047f8:	e002      	b.n	8004800 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80047fa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80047fc:	f7ff ff44 	bl	8004688 <HAL_UART_RxCpltCallback>
}
 8004800:	bf00      	nop
 8004802:	3770      	adds	r7, #112	@ 0x70
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004814:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2201      	movs	r2, #1
 800481a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004820:	2b01      	cmp	r3, #1
 8004822:	d108      	bne.n	8004836 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004828:	085b      	lsrs	r3, r3, #1
 800482a:	b29b      	uxth	r3, r3
 800482c:	4619      	mov	r1, r3
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f7ff ff48 	bl	80046c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004834:	e002      	b.n	800483c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f7ff ff30 	bl	800469c <HAL_UART_RxHalfCpltCallback>
}
 800483c:	bf00      	nop
 800483e:	3710      	adds	r7, #16
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800484c:	2300      	movs	r3, #0
 800484e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004854:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	695b      	ldr	r3, [r3, #20]
 800485c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004860:	2b80      	cmp	r3, #128	@ 0x80
 8004862:	bf0c      	ite	eq
 8004864:	2301      	moveq	r3, #1
 8004866:	2300      	movne	r3, #0
 8004868:	b2db      	uxtb	r3, r3
 800486a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004872:	b2db      	uxtb	r3, r3
 8004874:	2b21      	cmp	r3, #33	@ 0x21
 8004876:	d108      	bne.n	800488a <UART_DMAError+0x46>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d005      	beq.n	800488a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	2200      	movs	r2, #0
 8004882:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004884:	68b8      	ldr	r0, [r7, #8]
 8004886:	f000 f8c1 	bl	8004a0c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004894:	2b40      	cmp	r3, #64	@ 0x40
 8004896:	bf0c      	ite	eq
 8004898:	2301      	moveq	r3, #1
 800489a:	2300      	movne	r3, #0
 800489c:	b2db      	uxtb	r3, r3
 800489e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	2b22      	cmp	r3, #34	@ 0x22
 80048aa:	d108      	bne.n	80048be <UART_DMAError+0x7a>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d005      	beq.n	80048be <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	2200      	movs	r2, #0
 80048b6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80048b8:	68b8      	ldr	r0, [r7, #8]
 80048ba:	f000 f8cf 	bl	8004a5c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048c2:	f043 0210 	orr.w	r2, r3, #16
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048ca:	68b8      	ldr	r0, [r7, #8]
 80048cc:	f7ff fef0 	bl	80046b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048d0:	bf00      	nop
 80048d2:	3710      	adds	r7, #16
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b098      	sub	sp, #96	@ 0x60
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	4613      	mov	r3, r2
 80048e4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80048e6:	68ba      	ldr	r2, [r7, #8]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	88fa      	ldrh	r2, [r7, #6]
 80048f0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2222      	movs	r2, #34	@ 0x22
 80048fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004904:	4a3e      	ldr	r2, [pc, #248]	@ (8004a00 <UART_Start_Receive_DMA+0x128>)
 8004906:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800490c:	4a3d      	ldr	r2, [pc, #244]	@ (8004a04 <UART_Start_Receive_DMA+0x12c>)
 800490e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004914:	4a3c      	ldr	r2, [pc, #240]	@ (8004a08 <UART_Start_Receive_DMA+0x130>)
 8004916:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800491c:	2200      	movs	r2, #0
 800491e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004920:	f107 0308 	add.w	r3, r7, #8
 8004924:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	3304      	adds	r3, #4
 8004930:	4619      	mov	r1, r3
 8004932:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	88fb      	ldrh	r3, [r7, #6]
 8004938:	f7fd fc22 	bl	8002180 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800493c:	2300      	movs	r3, #0
 800493e:	613b      	str	r3, [r7, #16]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	613b      	str	r3, [r7, #16]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	613b      	str	r3, [r7, #16]
 8004950:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d019      	beq.n	800498e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	330c      	adds	r3, #12
 8004960:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004962:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004964:	e853 3f00 	ldrex	r3, [r3]
 8004968:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800496a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800496c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004970:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	330c      	adds	r3, #12
 8004978:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800497a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800497c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004980:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004982:	e841 2300 	strex	r3, r2, [r1]
 8004986:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004988:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1e5      	bne.n	800495a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	3314      	adds	r3, #20
 8004994:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004998:	e853 3f00 	ldrex	r3, [r3]
 800499c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800499e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049a0:	f043 0301 	orr.w	r3, r3, #1
 80049a4:	657b      	str	r3, [r7, #84]	@ 0x54
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	3314      	adds	r3, #20
 80049ac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80049ae:	63ba      	str	r2, [r7, #56]	@ 0x38
 80049b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80049b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80049b6:	e841 2300 	strex	r3, r2, [r1]
 80049ba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80049bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1e5      	bne.n	800498e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	3314      	adds	r3, #20
 80049c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	e853 3f00 	ldrex	r3, [r3]
 80049d0:	617b      	str	r3, [r7, #20]
   return(result);
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049d8:	653b      	str	r3, [r7, #80]	@ 0x50
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	3314      	adds	r3, #20
 80049e0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80049e2:	627a      	str	r2, [r7, #36]	@ 0x24
 80049e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e6:	6a39      	ldr	r1, [r7, #32]
 80049e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049ea:	e841 2300 	strex	r3, r2, [r1]
 80049ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d1e5      	bne.n	80049c2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3760      	adds	r7, #96	@ 0x60
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	080046dd 	.word	0x080046dd
 8004a04:	08004809 	.word	0x08004809
 8004a08:	08004845 	.word	0x08004845

08004a0c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b089      	sub	sp, #36	@ 0x24
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	330c      	adds	r3, #12
 8004a1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	e853 3f00 	ldrex	r3, [r3]
 8004a22:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004a2a:	61fb      	str	r3, [r7, #28]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	330c      	adds	r3, #12
 8004a32:	69fa      	ldr	r2, [r7, #28]
 8004a34:	61ba      	str	r2, [r7, #24]
 8004a36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a38:	6979      	ldr	r1, [r7, #20]
 8004a3a:	69ba      	ldr	r2, [r7, #24]
 8004a3c:	e841 2300 	strex	r3, r2, [r1]
 8004a40:	613b      	str	r3, [r7, #16]
   return(result);
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1e5      	bne.n	8004a14 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2220      	movs	r2, #32
 8004a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004a50:	bf00      	nop
 8004a52:	3724      	adds	r7, #36	@ 0x24
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b095      	sub	sp, #84	@ 0x54
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	330c      	adds	r3, #12
 8004a6a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a6e:	e853 3f00 	ldrex	r3, [r3]
 8004a72:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	330c      	adds	r3, #12
 8004a82:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a84:	643a      	str	r2, [r7, #64]	@ 0x40
 8004a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a88:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a8a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a8c:	e841 2300 	strex	r3, r2, [r1]
 8004a90:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1e5      	bne.n	8004a64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	3314      	adds	r3, #20
 8004a9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa0:	6a3b      	ldr	r3, [r7, #32]
 8004aa2:	e853 3f00 	ldrex	r3, [r3]
 8004aa6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	f023 0301 	bic.w	r3, r3, #1
 8004aae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	3314      	adds	r3, #20
 8004ab6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ab8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004aba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004abc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004abe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ac0:	e841 2300 	strex	r3, r2, [r1]
 8004ac4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1e5      	bne.n	8004a98 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d119      	bne.n	8004b08 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	330c      	adds	r3, #12
 8004ada:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	e853 3f00 	ldrex	r3, [r3]
 8004ae2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	f023 0310 	bic.w	r3, r3, #16
 8004aea:	647b      	str	r3, [r7, #68]	@ 0x44
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	330c      	adds	r3, #12
 8004af2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004af4:	61ba      	str	r2, [r7, #24]
 8004af6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af8:	6979      	ldr	r1, [r7, #20]
 8004afa:	69ba      	ldr	r2, [r7, #24]
 8004afc:	e841 2300 	strex	r3, r2, [r1]
 8004b00:	613b      	str	r3, [r7, #16]
   return(result);
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1e5      	bne.n	8004ad4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004b16:	bf00      	nop
 8004b18:	3754      	adds	r7, #84	@ 0x54
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr

08004b22 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b084      	sub	sp, #16
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b2e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f7ff fdb7 	bl	80046b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b42:	bf00      	nop
 8004b44:	3710      	adds	r7, #16
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}

08004b4a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b4a:	b480      	push	{r7}
 8004b4c:	b085      	sub	sp, #20
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b21      	cmp	r3, #33	@ 0x21
 8004b5c:	d13e      	bne.n	8004bdc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b66:	d114      	bne.n	8004b92 <UART_Transmit_IT+0x48>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d110      	bne.n	8004b92 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a1b      	ldr	r3, [r3, #32]
 8004b74:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	881b      	ldrh	r3, [r3, #0]
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b84:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	1c9a      	adds	r2, r3, #2
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	621a      	str	r2, [r3, #32]
 8004b90:	e008      	b.n	8004ba4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	1c59      	adds	r1, r3, #1
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	6211      	str	r1, [r2, #32]
 8004b9c:	781a      	ldrb	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	3b01      	subs	r3, #1
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d10f      	bne.n	8004bd8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68da      	ldr	r2, [r3, #12]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004bc6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68da      	ldr	r2, [r3, #12]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004bd6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	e000      	b.n	8004bde <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004bdc:	2302      	movs	r3, #2
  }
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3714      	adds	r7, #20
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr

08004bea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b082      	sub	sp, #8
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68da      	ldr	r2, [r3, #12]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c00:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2220      	movs	r2, #32
 8004c06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f7ff fd32 	bl	8004674 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3708      	adds	r7, #8
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}

08004c1a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b08c      	sub	sp, #48	@ 0x30
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b22      	cmp	r3, #34	@ 0x22
 8004c2c:	f040 80ae 	bne.w	8004d8c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c38:	d117      	bne.n	8004c6a <UART_Receive_IT+0x50>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d113      	bne.n	8004c6a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004c42:	2300      	movs	r3, #0
 8004c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c58:	b29a      	uxth	r2, r3
 8004c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c5c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c62:	1c9a      	adds	r2, r3, #2
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	629a      	str	r2, [r3, #40]	@ 0x28
 8004c68:	e026      	b.n	8004cb8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004c70:	2300      	movs	r3, #0
 8004c72:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c7c:	d007      	beq.n	8004c8e <UART_Receive_IT+0x74>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d10a      	bne.n	8004c9c <UART_Receive_IT+0x82>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d106      	bne.n	8004c9c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	b2da      	uxtb	r2, r3
 8004c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c98:	701a      	strb	r2, [r3, #0]
 8004c9a:	e008      	b.n	8004cae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ca8:	b2da      	uxtb	r2, r3
 8004caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb2:	1c5a      	adds	r2, r3, #1
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d15d      	bne.n	8004d88 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68da      	ldr	r2, [r3, #12]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f022 0220 	bic.w	r2, r2, #32
 8004cda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68da      	ldr	r2, [r3, #12]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004cea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	695a      	ldr	r2, [r3, #20]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f022 0201 	bic.w	r2, r2, #1
 8004cfa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d135      	bne.n	8004d7e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	330c      	adds	r3, #12
 8004d1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	e853 3f00 	ldrex	r3, [r3]
 8004d26:	613b      	str	r3, [r7, #16]
   return(result);
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	f023 0310 	bic.w	r3, r3, #16
 8004d2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	330c      	adds	r3, #12
 8004d36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d38:	623a      	str	r2, [r7, #32]
 8004d3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d3c:	69f9      	ldr	r1, [r7, #28]
 8004d3e:	6a3a      	ldr	r2, [r7, #32]
 8004d40:	e841 2300 	strex	r3, r2, [r1]
 8004d44:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1e5      	bne.n	8004d18 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0310 	and.w	r3, r3, #16
 8004d56:	2b10      	cmp	r3, #16
 8004d58:	d10a      	bne.n	8004d70 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	60fb      	str	r3, [r7, #12]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	60fb      	str	r3, [r7, #12]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	60fb      	str	r3, [r7, #12]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004d74:	4619      	mov	r1, r3
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f7ff fca4 	bl	80046c4 <HAL_UARTEx_RxEventCallback>
 8004d7c:	e002      	b.n	8004d84 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f7ff fc82 	bl	8004688 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004d84:	2300      	movs	r3, #0
 8004d86:	e002      	b.n	8004d8e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	e000      	b.n	8004d8e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004d8c:	2302      	movs	r3, #2
  }
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3730      	adds	r7, #48	@ 0x30
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
	...

08004d98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d9c:	b0c0      	sub	sp, #256	@ 0x100
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004db4:	68d9      	ldr	r1, [r3, #12]
 8004db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	ea40 0301 	orr.w	r3, r0, r1
 8004dc0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dc6:	689a      	ldr	r2, [r3, #8]
 8004dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ddc:	69db      	ldr	r3, [r3, #28]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004df0:	f021 010c 	bic.w	r1, r1, #12
 8004df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004dfe:	430b      	orrs	r3, r1
 8004e00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e12:	6999      	ldr	r1, [r3, #24]
 8004e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	ea40 0301 	orr.w	r3, r0, r1
 8004e1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	4b8f      	ldr	r3, [pc, #572]	@ (8005064 <UART_SetConfig+0x2cc>)
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d005      	beq.n	8004e38 <UART_SetConfig+0xa0>
 8004e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	4b8d      	ldr	r3, [pc, #564]	@ (8005068 <UART_SetConfig+0x2d0>)
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d104      	bne.n	8004e42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e38:	f7fe fad8 	bl	80033ec <HAL_RCC_GetPCLK2Freq>
 8004e3c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004e40:	e003      	b.n	8004e4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e42:	f7fe fabf 	bl	80033c4 <HAL_RCC_GetPCLK1Freq>
 8004e46:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e4e:	69db      	ldr	r3, [r3, #28]
 8004e50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e54:	f040 810c 	bne.w	8005070 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004e62:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004e66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004e6a:	4622      	mov	r2, r4
 8004e6c:	462b      	mov	r3, r5
 8004e6e:	1891      	adds	r1, r2, r2
 8004e70:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004e72:	415b      	adcs	r3, r3
 8004e74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004e7a:	4621      	mov	r1, r4
 8004e7c:	eb12 0801 	adds.w	r8, r2, r1
 8004e80:	4629      	mov	r1, r5
 8004e82:	eb43 0901 	adc.w	r9, r3, r1
 8004e86:	f04f 0200 	mov.w	r2, #0
 8004e8a:	f04f 0300 	mov.w	r3, #0
 8004e8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e9a:	4690      	mov	r8, r2
 8004e9c:	4699      	mov	r9, r3
 8004e9e:	4623      	mov	r3, r4
 8004ea0:	eb18 0303 	adds.w	r3, r8, r3
 8004ea4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004ea8:	462b      	mov	r3, r5
 8004eaa:	eb49 0303 	adc.w	r3, r9, r3
 8004eae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004ebe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004ec2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	18db      	adds	r3, r3, r3
 8004eca:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ecc:	4613      	mov	r3, r2
 8004ece:	eb42 0303 	adc.w	r3, r2, r3
 8004ed2:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ed4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004ed8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004edc:	f7fb f97c 	bl	80001d8 <__aeabi_uldivmod>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	4b61      	ldr	r3, [pc, #388]	@ (800506c <UART_SetConfig+0x2d4>)
 8004ee6:	fba3 2302 	umull	r2, r3, r3, r2
 8004eea:	095b      	lsrs	r3, r3, #5
 8004eec:	011c      	lsls	r4, r3, #4
 8004eee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ef8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004efc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004f00:	4642      	mov	r2, r8
 8004f02:	464b      	mov	r3, r9
 8004f04:	1891      	adds	r1, r2, r2
 8004f06:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004f08:	415b      	adcs	r3, r3
 8004f0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004f10:	4641      	mov	r1, r8
 8004f12:	eb12 0a01 	adds.w	sl, r2, r1
 8004f16:	4649      	mov	r1, r9
 8004f18:	eb43 0b01 	adc.w	fp, r3, r1
 8004f1c:	f04f 0200 	mov.w	r2, #0
 8004f20:	f04f 0300 	mov.w	r3, #0
 8004f24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f30:	4692      	mov	sl, r2
 8004f32:	469b      	mov	fp, r3
 8004f34:	4643      	mov	r3, r8
 8004f36:	eb1a 0303 	adds.w	r3, sl, r3
 8004f3a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f3e:	464b      	mov	r3, r9
 8004f40:	eb4b 0303 	adc.w	r3, fp, r3
 8004f44:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f54:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004f58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	18db      	adds	r3, r3, r3
 8004f60:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f62:	4613      	mov	r3, r2
 8004f64:	eb42 0303 	adc.w	r3, r2, r3
 8004f68:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004f6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004f72:	f7fb f931 	bl	80001d8 <__aeabi_uldivmod>
 8004f76:	4602      	mov	r2, r0
 8004f78:	460b      	mov	r3, r1
 8004f7a:	4611      	mov	r1, r2
 8004f7c:	4b3b      	ldr	r3, [pc, #236]	@ (800506c <UART_SetConfig+0x2d4>)
 8004f7e:	fba3 2301 	umull	r2, r3, r3, r1
 8004f82:	095b      	lsrs	r3, r3, #5
 8004f84:	2264      	movs	r2, #100	@ 0x64
 8004f86:	fb02 f303 	mul.w	r3, r2, r3
 8004f8a:	1acb      	subs	r3, r1, r3
 8004f8c:	00db      	lsls	r3, r3, #3
 8004f8e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004f92:	4b36      	ldr	r3, [pc, #216]	@ (800506c <UART_SetConfig+0x2d4>)
 8004f94:	fba3 2302 	umull	r2, r3, r3, r2
 8004f98:	095b      	lsrs	r3, r3, #5
 8004f9a:	005b      	lsls	r3, r3, #1
 8004f9c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004fa0:	441c      	add	r4, r3
 8004fa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004fac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004fb0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004fb4:	4642      	mov	r2, r8
 8004fb6:	464b      	mov	r3, r9
 8004fb8:	1891      	adds	r1, r2, r2
 8004fba:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004fbc:	415b      	adcs	r3, r3
 8004fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004fc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004fc4:	4641      	mov	r1, r8
 8004fc6:	1851      	adds	r1, r2, r1
 8004fc8:	6339      	str	r1, [r7, #48]	@ 0x30
 8004fca:	4649      	mov	r1, r9
 8004fcc:	414b      	adcs	r3, r1
 8004fce:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fd0:	f04f 0200 	mov.w	r2, #0
 8004fd4:	f04f 0300 	mov.w	r3, #0
 8004fd8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004fdc:	4659      	mov	r1, fp
 8004fde:	00cb      	lsls	r3, r1, #3
 8004fe0:	4651      	mov	r1, sl
 8004fe2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fe6:	4651      	mov	r1, sl
 8004fe8:	00ca      	lsls	r2, r1, #3
 8004fea:	4610      	mov	r0, r2
 8004fec:	4619      	mov	r1, r3
 8004fee:	4603      	mov	r3, r0
 8004ff0:	4642      	mov	r2, r8
 8004ff2:	189b      	adds	r3, r3, r2
 8004ff4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ff8:	464b      	mov	r3, r9
 8004ffa:	460a      	mov	r2, r1
 8004ffc:	eb42 0303 	adc.w	r3, r2, r3
 8005000:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005010:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005014:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005018:	460b      	mov	r3, r1
 800501a:	18db      	adds	r3, r3, r3
 800501c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800501e:	4613      	mov	r3, r2
 8005020:	eb42 0303 	adc.w	r3, r2, r3
 8005024:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005026:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800502a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800502e:	f7fb f8d3 	bl	80001d8 <__aeabi_uldivmod>
 8005032:	4602      	mov	r2, r0
 8005034:	460b      	mov	r3, r1
 8005036:	4b0d      	ldr	r3, [pc, #52]	@ (800506c <UART_SetConfig+0x2d4>)
 8005038:	fba3 1302 	umull	r1, r3, r3, r2
 800503c:	095b      	lsrs	r3, r3, #5
 800503e:	2164      	movs	r1, #100	@ 0x64
 8005040:	fb01 f303 	mul.w	r3, r1, r3
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	00db      	lsls	r3, r3, #3
 8005048:	3332      	adds	r3, #50	@ 0x32
 800504a:	4a08      	ldr	r2, [pc, #32]	@ (800506c <UART_SetConfig+0x2d4>)
 800504c:	fba2 2303 	umull	r2, r3, r2, r3
 8005050:	095b      	lsrs	r3, r3, #5
 8005052:	f003 0207 	and.w	r2, r3, #7
 8005056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4422      	add	r2, r4
 800505e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005060:	e106      	b.n	8005270 <UART_SetConfig+0x4d8>
 8005062:	bf00      	nop
 8005064:	40011000 	.word	0x40011000
 8005068:	40011400 	.word	0x40011400
 800506c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005070:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005074:	2200      	movs	r2, #0
 8005076:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800507a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800507e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005082:	4642      	mov	r2, r8
 8005084:	464b      	mov	r3, r9
 8005086:	1891      	adds	r1, r2, r2
 8005088:	6239      	str	r1, [r7, #32]
 800508a:	415b      	adcs	r3, r3
 800508c:	627b      	str	r3, [r7, #36]	@ 0x24
 800508e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005092:	4641      	mov	r1, r8
 8005094:	1854      	adds	r4, r2, r1
 8005096:	4649      	mov	r1, r9
 8005098:	eb43 0501 	adc.w	r5, r3, r1
 800509c:	f04f 0200 	mov.w	r2, #0
 80050a0:	f04f 0300 	mov.w	r3, #0
 80050a4:	00eb      	lsls	r3, r5, #3
 80050a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050aa:	00e2      	lsls	r2, r4, #3
 80050ac:	4614      	mov	r4, r2
 80050ae:	461d      	mov	r5, r3
 80050b0:	4643      	mov	r3, r8
 80050b2:	18e3      	adds	r3, r4, r3
 80050b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80050b8:	464b      	mov	r3, r9
 80050ba:	eb45 0303 	adc.w	r3, r5, r3
 80050be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80050c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80050ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80050d2:	f04f 0200 	mov.w	r2, #0
 80050d6:	f04f 0300 	mov.w	r3, #0
 80050da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80050de:	4629      	mov	r1, r5
 80050e0:	008b      	lsls	r3, r1, #2
 80050e2:	4621      	mov	r1, r4
 80050e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050e8:	4621      	mov	r1, r4
 80050ea:	008a      	lsls	r2, r1, #2
 80050ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80050f0:	f7fb f872 	bl	80001d8 <__aeabi_uldivmod>
 80050f4:	4602      	mov	r2, r0
 80050f6:	460b      	mov	r3, r1
 80050f8:	4b60      	ldr	r3, [pc, #384]	@ (800527c <UART_SetConfig+0x4e4>)
 80050fa:	fba3 2302 	umull	r2, r3, r3, r2
 80050fe:	095b      	lsrs	r3, r3, #5
 8005100:	011c      	lsls	r4, r3, #4
 8005102:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005106:	2200      	movs	r2, #0
 8005108:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800510c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005110:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005114:	4642      	mov	r2, r8
 8005116:	464b      	mov	r3, r9
 8005118:	1891      	adds	r1, r2, r2
 800511a:	61b9      	str	r1, [r7, #24]
 800511c:	415b      	adcs	r3, r3
 800511e:	61fb      	str	r3, [r7, #28]
 8005120:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005124:	4641      	mov	r1, r8
 8005126:	1851      	adds	r1, r2, r1
 8005128:	6139      	str	r1, [r7, #16]
 800512a:	4649      	mov	r1, r9
 800512c:	414b      	adcs	r3, r1
 800512e:	617b      	str	r3, [r7, #20]
 8005130:	f04f 0200 	mov.w	r2, #0
 8005134:	f04f 0300 	mov.w	r3, #0
 8005138:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800513c:	4659      	mov	r1, fp
 800513e:	00cb      	lsls	r3, r1, #3
 8005140:	4651      	mov	r1, sl
 8005142:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005146:	4651      	mov	r1, sl
 8005148:	00ca      	lsls	r2, r1, #3
 800514a:	4610      	mov	r0, r2
 800514c:	4619      	mov	r1, r3
 800514e:	4603      	mov	r3, r0
 8005150:	4642      	mov	r2, r8
 8005152:	189b      	adds	r3, r3, r2
 8005154:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005158:	464b      	mov	r3, r9
 800515a:	460a      	mov	r2, r1
 800515c:	eb42 0303 	adc.w	r3, r2, r3
 8005160:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800516e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005170:	f04f 0200 	mov.w	r2, #0
 8005174:	f04f 0300 	mov.w	r3, #0
 8005178:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800517c:	4649      	mov	r1, r9
 800517e:	008b      	lsls	r3, r1, #2
 8005180:	4641      	mov	r1, r8
 8005182:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005186:	4641      	mov	r1, r8
 8005188:	008a      	lsls	r2, r1, #2
 800518a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800518e:	f7fb f823 	bl	80001d8 <__aeabi_uldivmod>
 8005192:	4602      	mov	r2, r0
 8005194:	460b      	mov	r3, r1
 8005196:	4611      	mov	r1, r2
 8005198:	4b38      	ldr	r3, [pc, #224]	@ (800527c <UART_SetConfig+0x4e4>)
 800519a:	fba3 2301 	umull	r2, r3, r3, r1
 800519e:	095b      	lsrs	r3, r3, #5
 80051a0:	2264      	movs	r2, #100	@ 0x64
 80051a2:	fb02 f303 	mul.w	r3, r2, r3
 80051a6:	1acb      	subs	r3, r1, r3
 80051a8:	011b      	lsls	r3, r3, #4
 80051aa:	3332      	adds	r3, #50	@ 0x32
 80051ac:	4a33      	ldr	r2, [pc, #204]	@ (800527c <UART_SetConfig+0x4e4>)
 80051ae:	fba2 2303 	umull	r2, r3, r2, r3
 80051b2:	095b      	lsrs	r3, r3, #5
 80051b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80051b8:	441c      	add	r4, r3
 80051ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051be:	2200      	movs	r2, #0
 80051c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80051c2:	677a      	str	r2, [r7, #116]	@ 0x74
 80051c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80051c8:	4642      	mov	r2, r8
 80051ca:	464b      	mov	r3, r9
 80051cc:	1891      	adds	r1, r2, r2
 80051ce:	60b9      	str	r1, [r7, #8]
 80051d0:	415b      	adcs	r3, r3
 80051d2:	60fb      	str	r3, [r7, #12]
 80051d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051d8:	4641      	mov	r1, r8
 80051da:	1851      	adds	r1, r2, r1
 80051dc:	6039      	str	r1, [r7, #0]
 80051de:	4649      	mov	r1, r9
 80051e0:	414b      	adcs	r3, r1
 80051e2:	607b      	str	r3, [r7, #4]
 80051e4:	f04f 0200 	mov.w	r2, #0
 80051e8:	f04f 0300 	mov.w	r3, #0
 80051ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80051f0:	4659      	mov	r1, fp
 80051f2:	00cb      	lsls	r3, r1, #3
 80051f4:	4651      	mov	r1, sl
 80051f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051fa:	4651      	mov	r1, sl
 80051fc:	00ca      	lsls	r2, r1, #3
 80051fe:	4610      	mov	r0, r2
 8005200:	4619      	mov	r1, r3
 8005202:	4603      	mov	r3, r0
 8005204:	4642      	mov	r2, r8
 8005206:	189b      	adds	r3, r3, r2
 8005208:	66bb      	str	r3, [r7, #104]	@ 0x68
 800520a:	464b      	mov	r3, r9
 800520c:	460a      	mov	r2, r1
 800520e:	eb42 0303 	adc.w	r3, r2, r3
 8005212:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	663b      	str	r3, [r7, #96]	@ 0x60
 800521e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005220:	f04f 0200 	mov.w	r2, #0
 8005224:	f04f 0300 	mov.w	r3, #0
 8005228:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800522c:	4649      	mov	r1, r9
 800522e:	008b      	lsls	r3, r1, #2
 8005230:	4641      	mov	r1, r8
 8005232:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005236:	4641      	mov	r1, r8
 8005238:	008a      	lsls	r2, r1, #2
 800523a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800523e:	f7fa ffcb 	bl	80001d8 <__aeabi_uldivmod>
 8005242:	4602      	mov	r2, r0
 8005244:	460b      	mov	r3, r1
 8005246:	4b0d      	ldr	r3, [pc, #52]	@ (800527c <UART_SetConfig+0x4e4>)
 8005248:	fba3 1302 	umull	r1, r3, r3, r2
 800524c:	095b      	lsrs	r3, r3, #5
 800524e:	2164      	movs	r1, #100	@ 0x64
 8005250:	fb01 f303 	mul.w	r3, r1, r3
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	011b      	lsls	r3, r3, #4
 8005258:	3332      	adds	r3, #50	@ 0x32
 800525a:	4a08      	ldr	r2, [pc, #32]	@ (800527c <UART_SetConfig+0x4e4>)
 800525c:	fba2 2303 	umull	r2, r3, r2, r3
 8005260:	095b      	lsrs	r3, r3, #5
 8005262:	f003 020f 	and.w	r2, r3, #15
 8005266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4422      	add	r2, r4
 800526e:	609a      	str	r2, [r3, #8]
}
 8005270:	bf00      	nop
 8005272:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005276:	46bd      	mov	sp, r7
 8005278:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800527c:	51eb851f 	.word	0x51eb851f

08005280 <memmove>:
 8005280:	4288      	cmp	r0, r1
 8005282:	b510      	push	{r4, lr}
 8005284:	eb01 0402 	add.w	r4, r1, r2
 8005288:	d902      	bls.n	8005290 <memmove+0x10>
 800528a:	4284      	cmp	r4, r0
 800528c:	4623      	mov	r3, r4
 800528e:	d807      	bhi.n	80052a0 <memmove+0x20>
 8005290:	1e43      	subs	r3, r0, #1
 8005292:	42a1      	cmp	r1, r4
 8005294:	d008      	beq.n	80052a8 <memmove+0x28>
 8005296:	f811 2b01 	ldrb.w	r2, [r1], #1
 800529a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800529e:	e7f8      	b.n	8005292 <memmove+0x12>
 80052a0:	4402      	add	r2, r0
 80052a2:	4601      	mov	r1, r0
 80052a4:	428a      	cmp	r2, r1
 80052a6:	d100      	bne.n	80052aa <memmove+0x2a>
 80052a8:	bd10      	pop	{r4, pc}
 80052aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80052ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80052b2:	e7f7      	b.n	80052a4 <memmove+0x24>

080052b4 <memset>:
 80052b4:	4402      	add	r2, r0
 80052b6:	4603      	mov	r3, r0
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d100      	bne.n	80052be <memset+0xa>
 80052bc:	4770      	bx	lr
 80052be:	f803 1b01 	strb.w	r1, [r3], #1
 80052c2:	e7f9      	b.n	80052b8 <memset+0x4>

080052c4 <__libc_init_array>:
 80052c4:	b570      	push	{r4, r5, r6, lr}
 80052c6:	4d0d      	ldr	r5, [pc, #52]	@ (80052fc <__libc_init_array+0x38>)
 80052c8:	4c0d      	ldr	r4, [pc, #52]	@ (8005300 <__libc_init_array+0x3c>)
 80052ca:	1b64      	subs	r4, r4, r5
 80052cc:	10a4      	asrs	r4, r4, #2
 80052ce:	2600      	movs	r6, #0
 80052d0:	42a6      	cmp	r6, r4
 80052d2:	d109      	bne.n	80052e8 <__libc_init_array+0x24>
 80052d4:	4d0b      	ldr	r5, [pc, #44]	@ (8005304 <__libc_init_array+0x40>)
 80052d6:	4c0c      	ldr	r4, [pc, #48]	@ (8005308 <__libc_init_array+0x44>)
 80052d8:	f000 f826 	bl	8005328 <_init>
 80052dc:	1b64      	subs	r4, r4, r5
 80052de:	10a4      	asrs	r4, r4, #2
 80052e0:	2600      	movs	r6, #0
 80052e2:	42a6      	cmp	r6, r4
 80052e4:	d105      	bne.n	80052f2 <__libc_init_array+0x2e>
 80052e6:	bd70      	pop	{r4, r5, r6, pc}
 80052e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80052ec:	4798      	blx	r3
 80052ee:	3601      	adds	r6, #1
 80052f0:	e7ee      	b.n	80052d0 <__libc_init_array+0xc>
 80052f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80052f6:	4798      	blx	r3
 80052f8:	3601      	adds	r6, #1
 80052fa:	e7f2      	b.n	80052e2 <__libc_init_array+0x1e>
 80052fc:	08005368 	.word	0x08005368
 8005300:	08005368 	.word	0x08005368
 8005304:	08005368 	.word	0x08005368
 8005308:	0800536c 	.word	0x0800536c

0800530c <memcpy>:
 800530c:	440a      	add	r2, r1
 800530e:	4291      	cmp	r1, r2
 8005310:	f100 33ff 	add.w	r3, r0, #4294967295
 8005314:	d100      	bne.n	8005318 <memcpy+0xc>
 8005316:	4770      	bx	lr
 8005318:	b510      	push	{r4, lr}
 800531a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800531e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005322:	4291      	cmp	r1, r2
 8005324:	d1f9      	bne.n	800531a <memcpy+0xe>
 8005326:	bd10      	pop	{r4, pc}

08005328 <_init>:
 8005328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800532a:	bf00      	nop
 800532c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800532e:	bc08      	pop	{r3}
 8005330:	469e      	mov	lr, r3
 8005332:	4770      	bx	lr

08005334 <_fini>:
 8005334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005336:	bf00      	nop
 8005338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800533a:	bc08      	pop	{r3}
 800533c:	469e      	mov	lr, r3
 800533e:	4770      	bx	lr
