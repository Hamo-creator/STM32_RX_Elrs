#include "crsf_serial.h"
#include <string.h>

uint8_t uartRxBuf[UART_RX_BUFFER_SIZE];
uint16_t oldPos = 0;

void CrsfSerial_Init(CrsfSerial_HandleTypeDef *hcrsf, UART_HandleTypeDef *huart, uint32_t baud) {
    hcrsf->huart = huart;
    hcrsf->baud = baud;
    hcrsf->rxBufPos = 0;
    hcrsf->lastReceive = 0;
    hcrsf->lastChannelsPacket = 0;
    hcrsf->linkIsUp = false;
    hcrsf->passthroughBaud = 0;

    memset(hcrsf->rxBuf, 0, sizeof(hcrsf->rxBuf));
    memset(hcrsf->channels, 0, sizeof(hcrsf->channels));

    hcrsf->onLinkDown = NULL;
    hcrsf->onLinkUp = NULL;
    hcrsf->onOobData = NULL;
    hcrsf->onPacketChannels = NULL;
    hcrsf->onPacketLinkStatistics = NULL;
    hcrsf->onPacketGps = NULL;
}

void CrsfSerial_Begin(CrsfSerial_HandleTypeDef *hcrsf, uint32_t baud) {
    hcrsf->baud = baud ? baud : hcrsf->baud;
    // HAL_UART_Init must be called elsewhere with correct parameters
}

static void ShiftBuffer(CrsfSerial_HandleTypeDef *hcrsf, uint8_t cnt) {
    if (cnt >= hcrsf->rxBufPos) {
        hcrsf->rxBufPos = 0;
        return;
    }
    memmove(hcrsf->rxBuf, hcrsf->rxBuf + cnt, hcrsf->rxBufPos - cnt);
    hcrsf->rxBufPos -= cnt;
}

static void CrsfSerial_UnpackChannels(CrsfSerial_HandleTypeDef *hcrsf, const uint8_t *payload) {
    uint32_t bits = 0;
    uint8_t bitsAvailable = 0;
    uint8_t ch = 0;

    for (int i = 0; i < 22; i++) { // 22 bytes for 16 channels
        bits |= ((uint32_t)payload[i]) << bitsAvailable;
        bitsAvailable += 8;

        while (bitsAvailable >= 11 && ch < CRSF_NUM_CHANNELS) {
            hcrsf->channels[ch++] = bits & 0x7FF; // extract 11 bits
            bits >>= 11;
            bitsAvailable -= 11;
        }
    }
}


static void HandlePacket(CrsfSerial_HandleTypeDef *hcrsf, uint8_t len) {
    crsf_header_t *hdr = (crsf_header_t *)hcrsf->rxBuf;
    switch (hdr->type) {
        case CRSF_FRAMETYPE_RC_CHANNELS_PACKED:
            CrsfSerial_UnpackChannels(hcrsf, hdr->data); // <--- UNPACK channels into hcrsf->channels
            if (hcrsf->onPacketChannels) hcrsf->onPacketChannels();
            hcrsf->lastChannelsPacket = HAL_GetTick();
            hcrsf->linkIsUp = true;
            break;
        case CRSF_FRAMETYPE_LINK_STATISTICS:
            memcpy(&hcrsf->linkStatistics, hdr->data, sizeof(crsfLinkStatistics_t));
            if (hcrsf->onPacketLinkStatistics) hcrsf->onPacketLinkStatistics(&hcrsf->linkStatistics);
            break;
        case CRSF_FRAMETYPE_GPS:
            memcpy(&hcrsf->gpsSensor, hdr->data, sizeof(crsf_sensor_gps_t));
            if (hcrsf->onPacketGps) hcrsf->onPacketGps(&hcrsf->gpsSensor);
            break;
    }
}

//static void ProcessByte(CrsfSerial_HandleTypeDef *hcrsf, uint8_t b) {
void ProcessByte(CrsfSerial_HandleTypeDef *hcrsf, uint8_t b) {
    hcrsf->rxBuf[hcrsf->rxBufPos++] = b;
    if (hcrsf->rxBufPos >= 2) {
        uint8_t len = hcrsf->rxBuf[1];
        if (len >= 3 && hcrsf->rxBufPos >= len + 2) {
            uint8_t crc = crc8_dvb_s2(hcrsf->rxBuf + 2, len - 1);
            if (crc == hcrsf->rxBuf[len + 1]) {
                HandlePacket(hcrsf, len);
                ShiftBuffer(hcrsf, len + 2);
            } else {
                ShiftBuffer(hcrsf, 1);
            }
        }
    }
}

void CrsfSerial_Loop(CrsfSerial_HandleTypeDef *hcrsf) {
//    uint8_t b;
//    while (HAL_UART_Receive(hcrsf->huart, &b, 1, 0) == HAL_OK) {
//        hcrsf->lastReceive = HAL_GetTick();
//        if (CrsfSerial_GetPassthroughMode(hcrsf)) {
//            if (hcrsf->onOobData) hcrsf->onOobData(b);
//        } else {
//            ProcessByte(hcrsf, b);
//        }
//    }
//    while (HAL_UART_Receive_DMA(hcrsf->huart, &b, 1) == HAL_OK) {
//        hcrsf->lastReceive = HAL_GetTick();
//        if (CrsfSerial_GetPassthroughMode(hcrsf)) {
//            if (hcrsf->onOobData) hcrsf->onOobData(b);
//        } else {
//            ProcessByte(hcrsf, b);
//        }
//    }
    if (hcrsf->linkIsUp && HAL_GetTick() - hcrsf->lastChannelsPacket > CRSF_FAILSAFE_STAGE1_MS) {
        if (hcrsf->onLinkDown) hcrsf->onLinkDown();
        hcrsf->linkIsUp = false;
    }
}

void CrsfSerial_UART_IdleCallback(CrsfSerial_HandleTypeDef *hcrsf)
{
    uint16_t dmaPos = UART_RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(hcrsf->huart->hdmarx);
    uint16_t len;

    if (dmaPos != oldPos) {
        if (dmaPos > oldPos) {
            len = dmaPos - oldPos;
            for (uint16_t i = 0; i < len; i++) {
                ProcessByte(hcrsf, uartRxBuf[oldPos + i]);
            }
        } else {
            len = UART_RX_BUFFER_SIZE - oldPos;
            for (uint16_t i = 0; i < len; i++) {
                ProcessByte(hcrsf, uartRxBuf[oldPos + i]);
            }
            for (uint16_t i = 0; i < dmaPos; i++) {
                ProcessByte(hcrsf, uartRxBuf[i]);
            }
        }

        oldPos = dmaPos;
        if (oldPos >= UART_RX_BUFFER_SIZE) oldPos = 0;
    }
}

void CrsfSerial_WriteByte(CrsfSerial_HandleTypeDef *hcrsf, uint8_t b) {
	HAL_UART_Transmit_DMA(hcrsf->huart, &b, 1);
}

void CrsfSerial_WriteBuffer(CrsfSerial_HandleTypeDef *hcrsf, const uint8_t *buf, uint16_t len) {
	HAL_UART_Transmit_DMA(hcrsf->huart, (uint8_t *)buf, len);
}

void CrsfSerial_QueuePacket(CrsfSerial_HandleTypeDef *hcrsf, uint8_t type, const void *payload, uint8_t len) {
    if (len > CRSF_MAX_PAYLOAD_LEN) return;
    uint8_t buf[CRSF_MAX_PACKET_SIZE];
    buf[0] = CRSF_SYNC_BYTE;
    buf[1] = len + 2;
    buf[2] = type;
    memcpy(&buf[3], payload, len);
    buf[len + 3] = crc8_dvb_s2(&buf[2], len + 1);
    CrsfSerial_WriteBuffer(hcrsf, buf, len + 4);
}

void CrsfSerial_QueuePacketChannels(CrsfSerial_HandleTypeDef *hcrsf) {
    uint8_t buf[22]; // 11 channels * 11 bits = 242 bits = 30.25 bytes ~ 22 packed bytes
    // TODO: Pack the channel values here properly
    memset(buf, 0, sizeof(buf));
    CrsfSerial_QueuePacket(hcrsf, CRSF_FRAMETYPE_RC_CHANNELS_PACKED, buf, sizeof(buf));
}

int CrsfSerial_GetChannel(CrsfSerial_HandleTypeDef *hcrsf, unsigned int ch) {
    return ch < CRSF_NUM_CHANNELS ? hcrsf->channels[ch] : 0;
}

void CrsfSerial_SetChannel(CrsfSerial_HandleTypeDef *hcrsf, unsigned int ch, unsigned int value_us) {
    if (ch < CRSF_NUM_CHANNELS)
        hcrsf->channels[ch] = value_us;
}

const crsfLinkStatistics_t *CrsfSerial_GetLinkStatistics(CrsfSerial_HandleTypeDef *hcrsf) {
    return &hcrsf->linkStatistics;
}

const crsf_sensor_gps_t *CrsfSerial_GetGpsSensor(CrsfSerial_HandleTypeDef *hcrsf) {
    return &hcrsf->gpsSensor;
}

bool CrsfSerial_IsLinkUp(CrsfSerial_HandleTypeDef *hcrsf) {
    return hcrsf->linkIsUp;
}

bool CrsfSerial_GetPassthroughMode(CrsfSerial_HandleTypeDef *hcrsf) {
    return hcrsf->passthroughBaud != 0;
}

void CrsfSerial_SetPassthroughMode(CrsfSerial_HandleTypeDef *hcrsf, bool val, uint32_t passthroughBaud) {
    if (val) hcrsf->passthroughBaud = passthroughBaud ? passthroughBaud : hcrsf->baud;
    else hcrsf->passthroughBaud = 0;
}

